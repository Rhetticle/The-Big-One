
conbo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e704  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800e8a4  0800e8a4  0001e8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec70  0800ec70  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec70  0800ec70  0001ec70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec78  0800ec78  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec78  0800ec78  0001ec78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec7c  0800ec7c  0001ec7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800ec80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fdc  20000164  0800ede4  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006140  0800ede4  00026140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020df9  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bf1  00000000  00000000  00040f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  00045b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001938  00000000  00000000  000476c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000073bb  00000000  00000000  00048ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f981  00000000  00000000  000503b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5a53  00000000  00000000  0006fd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115787  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007750  00000000  00000000  001157d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e88c 	.word	0x0800e88c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800e88c 	.word	0x0800e88c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2iz>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d215      	bcs.n	80008b2 <__aeabi_d2iz+0x36>
 8000886:	d511      	bpl.n	80008ac <__aeabi_d2iz+0x30>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d912      	bls.n	80008b8 <__aeabi_d2iz+0x3c>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008a2:	fa23 f002 	lsr.w	r0, r3, r2
 80008a6:	bf18      	it	ne
 80008a8:	4240      	negne	r0, r0
 80008aa:	4770      	bx	lr
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	4770      	bx	lr
 80008b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008b6:	d105      	bne.n	80008c4 <__aeabi_d2iz+0x48>
 80008b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	bf08      	it	eq
 80008be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008c2:	4770      	bx	lr
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b974 	b.w	8000bcc <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468e      	mov	lr, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d14d      	bne.n	80009a6 <__udivmoddi4+0xaa>
 800090a:	428a      	cmp	r2, r1
 800090c:	4694      	mov	ip, r2
 800090e:	d969      	bls.n	80009e4 <__udivmoddi4+0xe8>
 8000910:	fab2 f282 	clz	r2, r2
 8000914:	b152      	cbz	r2, 800092c <__udivmoddi4+0x30>
 8000916:	fa01 f302 	lsl.w	r3, r1, r2
 800091a:	f1c2 0120 	rsb	r1, r2, #32
 800091e:	fa20 f101 	lsr.w	r1, r0, r1
 8000922:	fa0c fc02 	lsl.w	ip, ip, r2
 8000926:	ea41 0e03 	orr.w	lr, r1, r3
 800092a:	4094      	lsls	r4, r2
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	0c21      	lsrs	r1, r4, #16
 8000932:	fbbe f6f8 	udiv	r6, lr, r8
 8000936:	fa1f f78c 	uxth.w	r7, ip
 800093a:	fb08 e316 	mls	r3, r8, r6, lr
 800093e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000942:	fb06 f107 	mul.w	r1, r6, r7
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000952:	f080 811f 	bcs.w	8000b94 <__udivmoddi4+0x298>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 811c 	bls.w	8000b94 <__udivmoddi4+0x298>
 800095c:	3e02      	subs	r6, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a5b      	subs	r3, r3, r1
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb3 f0f8 	udiv	r0, r3, r8
 8000968:	fb08 3310 	mls	r3, r8, r0, r3
 800096c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000970:	fb00 f707 	mul.w	r7, r0, r7
 8000974:	42a7      	cmp	r7, r4
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x92>
 8000978:	eb1c 0404 	adds.w	r4, ip, r4
 800097c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000980:	f080 810a 	bcs.w	8000b98 <__udivmoddi4+0x29c>
 8000984:	42a7      	cmp	r7, r4
 8000986:	f240 8107 	bls.w	8000b98 <__udivmoddi4+0x29c>
 800098a:	4464      	add	r4, ip
 800098c:	3802      	subs	r0, #2
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	1be4      	subs	r4, r4, r7
 8000994:	2600      	movs	r6, #0
 8000996:	b11d      	cbz	r5, 80009a0 <__udivmoddi4+0xa4>
 8000998:	40d4      	lsrs	r4, r2
 800099a:	2300      	movs	r3, #0
 800099c:	e9c5 4300 	strd	r4, r3, [r5]
 80009a0:	4631      	mov	r1, r6
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d909      	bls.n	80009be <__udivmoddi4+0xc2>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	f000 80ef 	beq.w	8000b8e <__udivmoddi4+0x292>
 80009b0:	2600      	movs	r6, #0
 80009b2:	e9c5 0100 	strd	r0, r1, [r5]
 80009b6:	4630      	mov	r0, r6
 80009b8:	4631      	mov	r1, r6
 80009ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009be:	fab3 f683 	clz	r6, r3
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d14a      	bne.n	8000a5c <__udivmoddi4+0x160>
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d302      	bcc.n	80009d0 <__udivmoddi4+0xd4>
 80009ca:	4282      	cmp	r2, r0
 80009cc:	f200 80f9 	bhi.w	8000bc2 <__udivmoddi4+0x2c6>
 80009d0:	1a84      	subs	r4, r0, r2
 80009d2:	eb61 0303 	sbc.w	r3, r1, r3
 80009d6:	2001      	movs	r0, #1
 80009d8:	469e      	mov	lr, r3
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d0e0      	beq.n	80009a0 <__udivmoddi4+0xa4>
 80009de:	e9c5 4e00 	strd	r4, lr, [r5]
 80009e2:	e7dd      	b.n	80009a0 <__udivmoddi4+0xa4>
 80009e4:	b902      	cbnz	r2, 80009e8 <__udivmoddi4+0xec>
 80009e6:	deff      	udf	#255	; 0xff
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	f040 8092 	bne.w	8000b16 <__udivmoddi4+0x21a>
 80009f2:	eba1 010c 	sub.w	r1, r1, ip
 80009f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009fa:	fa1f fe8c 	uxth.w	lr, ip
 80009fe:	2601      	movs	r6, #1
 8000a00:	0c20      	lsrs	r0, r4, #16
 8000a02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a06:	fb07 1113 	mls	r1, r7, r3, r1
 8000a0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a0e:	fb0e f003 	mul.w	r0, lr, r3
 8000a12:	4288      	cmp	r0, r1
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x12c>
 8000a16:	eb1c 0101 	adds.w	r1, ip, r1
 8000a1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x12a>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f200 80cb 	bhi.w	8000bbc <__udivmoddi4+0x2c0>
 8000a26:	4643      	mov	r3, r8
 8000a28:	1a09      	subs	r1, r1, r0
 8000a2a:	b2a4      	uxth	r4, r4
 8000a2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a30:	fb07 1110 	mls	r1, r7, r0, r1
 8000a34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a38:	fb0e fe00 	mul.w	lr, lr, r0
 8000a3c:	45a6      	cmp	lr, r4
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x156>
 8000a40:	eb1c 0404 	adds.w	r4, ip, r4
 8000a44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a48:	d202      	bcs.n	8000a50 <__udivmoddi4+0x154>
 8000a4a:	45a6      	cmp	lr, r4
 8000a4c:	f200 80bb 	bhi.w	8000bc6 <__udivmoddi4+0x2ca>
 8000a50:	4608      	mov	r0, r1
 8000a52:	eba4 040e 	sub.w	r4, r4, lr
 8000a56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a5a:	e79c      	b.n	8000996 <__udivmoddi4+0x9a>
 8000a5c:	f1c6 0720 	rsb	r7, r6, #32
 8000a60:	40b3      	lsls	r3, r6
 8000a62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a72:	431c      	orrs	r4, r3
 8000a74:	40f9      	lsrs	r1, r7
 8000a76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a82:	0c20      	lsrs	r0, r4, #16
 8000a84:	fa1f fe8c 	uxth.w	lr, ip
 8000a88:	fb09 1118 	mls	r1, r9, r8, r1
 8000a8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a90:	fb08 f00e 	mul.w	r0, r8, lr
 8000a94:	4288      	cmp	r0, r1
 8000a96:	fa02 f206 	lsl.w	r2, r2, r6
 8000a9a:	d90b      	bls.n	8000ab4 <__udivmoddi4+0x1b8>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aa4:	f080 8088 	bcs.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f240 8085 	bls.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aae:	f1a8 0802 	sub.w	r8, r8, #2
 8000ab2:	4461      	add	r1, ip
 8000ab4:	1a09      	subs	r1, r1, r0
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000abc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ac0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ac4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ac8:	458e      	cmp	lr, r1
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x1e2>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ad4:	d26c      	bcs.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ad6:	458e      	cmp	lr, r1
 8000ad8:	d96a      	bls.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ada:	3802      	subs	r0, #2
 8000adc:	4461      	add	r1, ip
 8000ade:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ae6:	eba1 010e 	sub.w	r1, r1, lr
 8000aea:	42a1      	cmp	r1, r4
 8000aec:	46c8      	mov	r8, r9
 8000aee:	46a6      	mov	lr, r4
 8000af0:	d356      	bcc.n	8000ba0 <__udivmoddi4+0x2a4>
 8000af2:	d053      	beq.n	8000b9c <__udivmoddi4+0x2a0>
 8000af4:	b15d      	cbz	r5, 8000b0e <__udivmoddi4+0x212>
 8000af6:	ebb3 0208 	subs.w	r2, r3, r8
 8000afa:	eb61 010e 	sbc.w	r1, r1, lr
 8000afe:	fa01 f707 	lsl.w	r7, r1, r7
 8000b02:	fa22 f306 	lsr.w	r3, r2, r6
 8000b06:	40f1      	lsrs	r1, r6
 8000b08:	431f      	orrs	r7, r3
 8000b0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b0e:	2600      	movs	r6, #0
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	40d8      	lsrs	r0, r3
 8000b1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b20:	fa21 f303 	lsr.w	r3, r1, r3
 8000b24:	4091      	lsls	r1, r2
 8000b26:	4301      	orrs	r1, r0
 8000b28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2c:	fa1f fe8c 	uxth.w	lr, ip
 8000b30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b34:	fb07 3610 	mls	r6, r7, r0, r3
 8000b38:	0c0b      	lsrs	r3, r1, #16
 8000b3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b42:	429e      	cmp	r6, r3
 8000b44:	fa04 f402 	lsl.w	r4, r4, r2
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x260>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b52:	d22f      	bcs.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d92d      	bls.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	b289      	uxth	r1, r1
 8000b60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b64:	fb07 3316 	mls	r3, r7, r6, r3
 8000b68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b70:	428b      	cmp	r3, r1
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x28a>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b7c:	d216      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d914      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b82:	3e02      	subs	r6, #2
 8000b84:	4461      	add	r1, ip
 8000b86:	1ac9      	subs	r1, r1, r3
 8000b88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b8c:	e738      	b.n	8000a00 <__udivmoddi4+0x104>
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e705      	b.n	80009a0 <__udivmoddi4+0xa4>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e3      	b.n	8000960 <__udivmoddi4+0x64>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6f8      	b.n	800098e <__udivmoddi4+0x92>
 8000b9c:	454b      	cmp	r3, r9
 8000b9e:	d2a9      	bcs.n	8000af4 <__udivmoddi4+0x1f8>
 8000ba0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ba4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7a3      	b.n	8000af4 <__udivmoddi4+0x1f8>
 8000bac:	4646      	mov	r6, r8
 8000bae:	e7ea      	b.n	8000b86 <__udivmoddi4+0x28a>
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	e794      	b.n	8000ade <__udivmoddi4+0x1e2>
 8000bb4:	4640      	mov	r0, r8
 8000bb6:	e7d1      	b.n	8000b5c <__udivmoddi4+0x260>
 8000bb8:	46d0      	mov	r8, sl
 8000bba:	e77b      	b.n	8000ab4 <__udivmoddi4+0x1b8>
 8000bbc:	3b02      	subs	r3, #2
 8000bbe:	4461      	add	r1, ip
 8000bc0:	e732      	b.n	8000a28 <__udivmoddi4+0x12c>
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	e709      	b.n	80009da <__udivmoddi4+0xde>
 8000bc6:	4464      	add	r4, ip
 8000bc8:	3802      	subs	r0, #2
 8000bca:	e742      	b.n	8000a52 <__udivmoddi4+0x156>

08000bcc <__aeabi_idiv0>:
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <delay>:
uint16_t c_delay=0;
uint32_t Vcap_prev=0;

#define ERR_OVER_CHRG 1;

void delay(uint16_t dely){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim3,0);
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <delay+0x30>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3)<dely);
 8000be2:	bf00      	nop
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <delay+0x30>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d3f9      	bcc.n	8000be4 <delay+0x14>

}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000228 	.word	0x20000228

08000c04 <LED_Reset>:

void LED_Reset(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0e:	4814      	ldr	r0, [pc, #80]	; (8000c60 <LED_Reset+0x5c>)
 8000c10:	f002 fcb2 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c1a:	4811      	ldr	r0, [pc, #68]	; (8000c60 <LED_Reset+0x5c>)
 8000c1c:	f002 fcac 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c26:	480e      	ldr	r0, [pc, #56]	; (8000c60 <LED_Reset+0x5c>)
 8000c28:	f002 fca6 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <LED_Reset+0x5c>)
 8000c34:	f002 fca0 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3e:	4808      	ldr	r0, [pc, #32]	; (8000c60 <LED_Reset+0x5c>)
 8000c40:	f002 fc9a 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <LED_Reset+0x5c>)
 8000c4c:	f002 fc94 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c56:	4802      	ldr	r0, [pc, #8]	; (8000c60 <LED_Reset+0x5c>)
 8000c58:	f002 fc8e 	bl	8003578 <HAL_GPIO_WritePin>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40020400 	.word	0x40020400

08000c64 <LED_Follow>:

void LED_Follow(void){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6e:	4835      	ldr	r0, [pc, #212]	; (8000d44 <LED_Follow+0xe0>)
 8000c70:	f002 fc82 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000c74:	2064      	movs	r0, #100	; 0x64
 8000c76:	f009 f9c3 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c80:	4830      	ldr	r0, [pc, #192]	; (8000d44 <LED_Follow+0xe0>)
 8000c82:	f002 fc79 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f009 f9ba 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c92:	482c      	ldr	r0, [pc, #176]	; (8000d44 <LED_Follow+0xe0>)
 8000c94:	f002 fc70 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000c98:	2064      	movs	r0, #100	; 0x64
 8000c9a:	f009 f9b1 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca4:	4827      	ldr	r0, [pc, #156]	; (8000d44 <LED_Follow+0xe0>)
 8000ca6:	f002 fc67 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000caa:	2064      	movs	r0, #100	; 0x64
 8000cac:	f009 f9a8 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb6:	4823      	ldr	r0, [pc, #140]	; (8000d44 <LED_Follow+0xe0>)
 8000cb8:	f002 fc5e 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000cbc:	2064      	movs	r0, #100	; 0x64
 8000cbe:	f009 f99f 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc8:	481e      	ldr	r0, [pc, #120]	; (8000d44 <LED_Follow+0xe0>)
 8000cca:	f002 fc55 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000cce:	2064      	movs	r0, #100	; 0x64
 8000cd0:	f009 f996 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cda:	481a      	ldr	r0, [pc, #104]	; (8000d44 <LED_Follow+0xe0>)
 8000cdc:	f002 fc4c 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000ce0:	2064      	movs	r0, #100	; 0x64
 8000ce2:	f009 f98d 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cec:	4815      	ldr	r0, [pc, #84]	; (8000d44 <LED_Follow+0xe0>)
 8000cee:	f002 fc43 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000cf2:	2064      	movs	r0, #100	; 0x64
 8000cf4:	f009 f984 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfe:	4811      	ldr	r0, [pc, #68]	; (8000d44 <LED_Follow+0xe0>)
 8000d00:	f002 fc3a 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000d04:	2064      	movs	r0, #100	; 0x64
 8000d06:	f009 f97b 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LED_Follow+0xe0>)
 8000d12:	f002 fc31 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000d16:	2064      	movs	r0, #100	; 0x64
 8000d18:	f009 f972 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <LED_Follow+0xe0>)
 8000d24:	f002 fc28 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000d28:	2064      	movs	r0, #100	; 0x64
 8000d2a:	f009 f969 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <LED_Follow+0xe0>)
 8000d36:	f002 fc1f 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000d3a:	2064      	movs	r0, #100	; 0x64
 8000d3c:	f009 f960 	bl	800a000 <osDelay>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40020400 	.word	0x40020400

08000d48 <LED_Flash>:

void LED_Flash(void){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d52:	482d      	ldr	r0, [pc, #180]	; (8000e08 <LED_Flash+0xc0>)
 8000d54:	f002 fc10 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5e:	482a      	ldr	r0, [pc, #168]	; (8000e08 <LED_Flash+0xc0>)
 8000d60:	f002 fc0a 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6a:	4827      	ldr	r0, [pc, #156]	; (8000e08 <LED_Flash+0xc0>)
 8000d6c:	f002 fc04 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d76:	4824      	ldr	r0, [pc, #144]	; (8000e08 <LED_Flash+0xc0>)
 8000d78:	f002 fbfe 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d82:	4821      	ldr	r0, [pc, #132]	; (8000e08 <LED_Flash+0xc0>)
 8000d84:	f002 fbf8 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8e:	481e      	ldr	r0, [pc, #120]	; (8000e08 <LED_Flash+0xc0>)
 8000d90:	f002 fbf2 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9a:	481b      	ldr	r0, [pc, #108]	; (8000e08 <LED_Flash+0xc0>)
 8000d9c:	f002 fbec 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(1000);
 8000da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da4:	f009 f92c 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dae:	4816      	ldr	r0, [pc, #88]	; (8000e08 <LED_Flash+0xc0>)
 8000db0:	f002 fbe2 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dba:	4813      	ldr	r0, [pc, #76]	; (8000e08 <LED_Flash+0xc0>)
 8000dbc:	f002 fbdc 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <LED_Flash+0xc0>)
 8000dc8:	f002 fbd6 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LED_Flash+0xc0>)
 8000dd4:	f002 fbd0 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dde:	480a      	ldr	r0, [pc, #40]	; (8000e08 <LED_Flash+0xc0>)
 8000de0:	f002 fbca 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dea:	4807      	ldr	r0, [pc, #28]	; (8000e08 <LED_Flash+0xc0>)
 8000dec:	f002 fbc4 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	4804      	ldr	r0, [pc, #16]	; (8000e08 <LED_Flash+0xc0>)
 8000df8:	f002 fbbe 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(1000);
 8000dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e00:	f009 f8fe 	bl	800a000 <osDelay>

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40020400 	.word	0x40020400

08000e0c <chrg_led_reset>:

void chrg_led_reset(void){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e16:	480b      	ldr	r0, [pc, #44]	; (8000e44 <chrg_led_reset+0x38>)
 8000e18:	f002 fbae 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <chrg_led_reset+0x38>)
 8000e24:	f002 fba8 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <chrg_led_reset+0x38>)
 8000e30:	f002 fba2 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3a:	4802      	ldr	r0, [pc, #8]	; (8000e44 <chrg_led_reset+0x38>)
 8000e3c:	f002 fb9c 	bl	8003578 <HAL_GPIO_WritePin>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40020400 	.word	0x40020400

08000e48 <led_quick_flash>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
	osDelay(100);

}

void led_quick_flash(void){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e52:	4826      	ldr	r0, [pc, #152]	; (8000eec <led_quick_flash+0xa4>)
 8000e54:	f002 fb90 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5e:	4823      	ldr	r0, [pc, #140]	; (8000eec <led_quick_flash+0xa4>)
 8000e60:	f002 fb8a 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6a:	4820      	ldr	r0, [pc, #128]	; (8000eec <led_quick_flash+0xa4>)
 8000e6c:	f002 fb84 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e76:	481d      	ldr	r0, [pc, #116]	; (8000eec <led_quick_flash+0xa4>)
 8000e78:	f002 fb7e 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e82:	481a      	ldr	r0, [pc, #104]	; (8000eec <led_quick_flash+0xa4>)
 8000e84:	f002 fb78 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8e:	4817      	ldr	r0, [pc, #92]	; (8000eec <led_quick_flash+0xa4>)
 8000e90:	f002 fb72 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000e94:	2064      	movs	r0, #100	; 0x64
 8000e96:	f009 f8b3 	bl	800a000 <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea0:	4812      	ldr	r0, [pc, #72]	; (8000eec <led_quick_flash+0xa4>)
 8000ea2:	f002 fb69 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eac:	480f      	ldr	r0, [pc, #60]	; (8000eec <led_quick_flash+0xa4>)
 8000eae:	f002 fb63 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <led_quick_flash+0xa4>)
 8000eba:	f002 fb5d 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <led_quick_flash+0xa4>)
 8000ec6:	f002 fb57 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed0:	4806      	ldr	r0, [pc, #24]	; (8000eec <led_quick_flash+0xa4>)
 8000ed2:	f002 fb51 	bl	8003578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <led_quick_flash+0xa4>)
 8000ede:	f002 fb4b 	bl	8003578 <HAL_GPIO_WritePin>
	osDelay(100);
 8000ee2:	2064      	movs	r0, #100	; 0x64
 8000ee4:	f009 f88c 	bl	800a000 <osDelay>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40020400 	.word	0x40020400

08000ef0 <Charge_val_round>:

int Charge_val_round(uint32_t ADC_val){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	if(ADC_val<100){
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b63      	cmp	r3, #99	; 0x63
 8000efc:	d801      	bhi.n	8000f02 <Charge_val_round+0x12>
		ADC_val=100;
 8000efe:	2364      	movs	r3, #100	; 0x64
 8000f00:	607b      	str	r3, [r7, #4]
	}

	if(ADC_val>100 && ADC_val<250){
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b64      	cmp	r3, #100	; 0x64
 8000f06:	d904      	bls.n	8000f12 <Charge_val_round+0x22>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2bf9      	cmp	r3, #249	; 0xf9
 8000f0c:	d801      	bhi.n	8000f12 <Charge_val_round+0x22>
		ADC_val=250;
 8000f0e:	23fa      	movs	r3, #250	; 0xfa
 8000f10:	607b      	str	r3, [r7, #4]
	}

	if(ADC_val>250 && ADC_val<385){
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2bfa      	cmp	r3, #250	; 0xfa
 8000f16:	d906      	bls.n	8000f26 <Charge_val_round+0x36>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000f1e:	d802      	bhi.n	8000f26 <Charge_val_round+0x36>
		ADC_val=385;
 8000f20:	f240 1381 	movw	r3, #385	; 0x181
 8000f24:	607b      	str	r3, [r7, #4]
	}

	if(ADC_val>385){
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8000f2c:	d302      	bcc.n	8000f34 <Charge_val_round+0x44>
		ADC_val=400;
 8000f2e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f32:	607b      	str	r3, [r7, #4]
	}

	return(ADC_val);
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
	if(trig_count==1){
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x30>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d007      	beq.n	8000f66 <HAL_GPIO_EXTI_Callback+0x22>
		return;
	}
	if(GPIO_Pin==GPIO_PIN_10){
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f5c:	d104      	bne.n	8000f68 <HAL_GPIO_EXTI_Callback+0x24>
		trig_count=1;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x30>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
 8000f64:	e000      	b.n	8000f68 <HAL_GPIO_EXTI_Callback+0x24>
		return;
 8000f66:	bf00      	nop


	}

}
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000371 	.word	0x20000371

08000f78 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, ADC_raw, 2);
 8000f80:	2202      	movs	r2, #2
 8000f82:	4904      	ldr	r1, [pc, #16]	; (8000f94 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f86:	f001 f965 	bl	8002254 <HAL_ADC_Start_DMA>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000374 	.word	0x20000374
 8000f98:	20000180 	.word	0x20000180

08000f9c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	if(ADC_raw[0]>Vcap_prev){
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_ADC_ConvCpltCallback+0x64>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_ADC_ConvCpltCallback+0x68>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d903      	bls.n	8000fb8 <HAL_ADC_ConvCpltCallback+0x1c>
		Vcap_prev=ADC_raw[0];
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_ADC_ConvCpltCallback+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a13      	ldr	r2, [pc, #76]	; (8001004 <HAL_ADC_ConvCpltCallback+0x68>)
 8000fb6:	6013      	str	r3, [r2, #0]
	}
	BaseType_t xYieldRequired;
	xQueueSendFromISR(ISRtoProcessADCHandle,&Vcap_prev,NULL);
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4910      	ldr	r1, [pc, #64]	; (8001004 <HAL_ADC_ConvCpltCallback+0x68>)
 8000fc2:	f009 fca1 	bl	800a908 <xQueueGenericSendFromISR>
	xQueueSendFromISR(ISRtoProcessADCHandle,&ADC_raw[1],NULL);
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	2200      	movs	r2, #0
 8000fce:	490f      	ldr	r1, [pc, #60]	; (800100c <HAL_ADC_ConvCpltCallback+0x70>)
 8000fd0:	f009 fc9a 	bl	800a908 <xQueueGenericSendFromISR>
	xYieldRequired = xTaskResumeFromISR(ProcessADCHandle);
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_ADC_ConvCpltCallback+0x74>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f00a fb7f 	bl	800b6dc <xTaskResumeFromISR>
 8000fde:	60f8      	str	r0, [r7, #12]
	portYIELD_FROM_ISR( xYieldRequired );
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <HAL_ADC_ConvCpltCallback+0x5a>
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_ADC_ConvCpltCallback+0x78>)
 8000fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	f3bf 8f4f 	dsb	sy
 8000ff2:	f3bf 8f6f 	isb	sy
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000374 	.word	0x20000374
 8001004:	20000380 	.word	0x20000380
 8001008:	20000320 	.word	0x20000320
 800100c:	20000378 	.word	0x20000378
 8001010:	20000310 	.word	0x20000310
 8001014:	e000ed04 	.word	0xe000ed04

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f001 f870 	bl	8002100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f8c8 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 fa96 	bl	8001554 <MX_GPIO_Init>
  MX_DMA_Init();
 8001028:	f000 fa74 	bl	8001514 <MX_DMA_Init>
  MX_TIM3_Init();
 800102c:	f000 f98c 	bl	8001348 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001030:	f000 f92a 	bl	8001288 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001034:	f000 f9d6 	bl	80013e4 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001038:	f000 fa48 	bl	80014cc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 800103c:	f00c f9b6 	bl	800d3ac <MX_USB_DEVICE_Init>
  HAL_TIM_Base_Start(&htim3);
 8001040:	483a      	ldr	r0, [pc, #232]	; (800112c <main+0x114>)
 8001042:	f004 fa67 	bl	8005514 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8001046:	2100      	movs	r1, #0
 8001048:	4839      	ldr	r0, [pc, #228]	; (8001130 <main+0x118>)
 800104a:	f004 fba7 	bl	800579c <HAL_TIM_PWM_Start_IT>
  TIM4->CCR1=2000-1;
 800104e:	4b39      	ldr	r3, [pc, #228]	; (8001134 <main+0x11c>)
 8001050:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001056:	f008 fef7 	bl	8009e48 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of LEDs */
  LEDsHandle = osMutexNew(&LEDs_attributes);
 800105a:	4837      	ldr	r0, [pc, #220]	; (8001138 <main+0x120>)
 800105c:	f008 ffeb 	bl	800a036 <osMutexNew>
 8001060:	4603      	mov	r3, r0
 8001062:	4a36      	ldr	r2, [pc, #216]	; (800113c <main+0x124>)
 8001064:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  xSemaphoreGive(LEDsHandle);
 8001066:	4b35      	ldr	r3, [pc, #212]	; (800113c <main+0x124>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	2300      	movs	r3, #0
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	f009 fb4c 	bl	800a70c <xQueueGenericSend>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ZVStoVcap */
  ZVStoVcapHandle = osMessageQueueNew (1, sizeof(uint32_t), &ZVStoVcap_attributes);
 8001074:	4a32      	ldr	r2, [pc, #200]	; (8001140 <main+0x128>)
 8001076:	2104      	movs	r1, #4
 8001078:	2001      	movs	r0, #1
 800107a:	f009 f862 	bl	800a142 <osMessageQueueNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a30      	ldr	r2, [pc, #192]	; (8001144 <main+0x12c>)
 8001082:	6013      	str	r3, [r2, #0]

  /* creation of ISRtoProcessADC */
  ISRtoProcessADCHandle = osMessageQueueNew (2, sizeof(uint32_t), &ISRtoProcessADC_attributes);
 8001084:	4a30      	ldr	r2, [pc, #192]	; (8001148 <main+0x130>)
 8001086:	2104      	movs	r1, #4
 8001088:	2002      	movs	r0, #2
 800108a:	f009 f85a 	bl	800a142 <osMessageQueueNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a2e      	ldr	r2, [pc, #184]	; (800114c <main+0x134>)
 8001092:	6013      	str	r3, [r2, #0]

  /* creation of ProcessADCtoLED */
  ProcessADCtoLEDHandle = osMessageQueueNew (1, sizeof(uint32_t), &ProcessADCtoLED_attributes);
 8001094:	4a2e      	ldr	r2, [pc, #184]	; (8001150 <main+0x138>)
 8001096:	2104      	movs	r1, #4
 8001098:	2001      	movs	r0, #1
 800109a:	f009 f852 	bl	800a142 <osMessageQueueNew>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <main+0x13c>)
 80010a2:	6013      	str	r3, [r2, #0]

  /* creation of FiringData */
  FiringDataHandle = osMessageQueueNew (2, sizeof(uint32_t), &FiringData_attributes);
 80010a4:	4a2c      	ldr	r2, [pc, #176]	; (8001158 <main+0x140>)
 80010a6:	2104      	movs	r1, #4
 80010a8:	2002      	movs	r0, #2
 80010aa:	f009 f84a 	bl	800a142 <osMessageQueueNew>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a2a      	ldr	r2, [pc, #168]	; (800115c <main+0x144>)
 80010b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of USB_Listen */
  USB_ListenHandle = osThreadNew(USB_Listen_Start, NULL, &USB_Listen_attributes);
 80010b4:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <main+0x148>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	482a      	ldr	r0, [pc, #168]	; (8001164 <main+0x14c>)
 80010ba:	f008 ff0f 	bl	8009edc <osThreadNew>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a29      	ldr	r2, [pc, #164]	; (8001168 <main+0x150>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* creation of CheckZVS */
  CheckZVSHandle = osThreadNew(StartCheckZVS, NULL, &CheckZVS_attributes);
 80010c4:	4a29      	ldr	r2, [pc, #164]	; (800116c <main+0x154>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4829      	ldr	r0, [pc, #164]	; (8001170 <main+0x158>)
 80010ca:	f008 ff07 	bl	8009edc <osThreadNew>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a28      	ldr	r2, [pc, #160]	; (8001174 <main+0x15c>)
 80010d2:	6013      	str	r3, [r2, #0]

  /* creation of LEDStandby */
  LEDStandbyHandle = osThreadNew(StartLEDStandby, NULL, &LEDStandby_attributes);
 80010d4:	4a28      	ldr	r2, [pc, #160]	; (8001178 <main+0x160>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4828      	ldr	r0, [pc, #160]	; (800117c <main+0x164>)
 80010da:	f008 feff 	bl	8009edc <osThreadNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a27      	ldr	r2, [pc, #156]	; (8001180 <main+0x168>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* creation of SelfTest */
  SelfTestHandle = osThreadNew(StartSelfTest, NULL, &SelfTest_attributes);
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <main+0x16c>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	4827      	ldr	r0, [pc, #156]	; (8001188 <main+0x170>)
 80010ea:	f008 fef7 	bl	8009edc <osThreadNew>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a26      	ldr	r2, [pc, #152]	; (800118c <main+0x174>)
 80010f2:	6013      	str	r3, [r2, #0]

  /* creation of ProcessADC */
  ProcessADCHandle = osThreadNew(StartProcessADC, NULL, &ProcessADC_attributes);
 80010f4:	4a26      	ldr	r2, [pc, #152]	; (8001190 <main+0x178>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	4826      	ldr	r0, [pc, #152]	; (8001194 <main+0x17c>)
 80010fa:	f008 feef 	bl	8009edc <osThreadNew>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a25      	ldr	r2, [pc, #148]	; (8001198 <main+0x180>)
 8001102:	6013      	str	r3, [r2, #0]

  /* creation of LED_Control */
  LED_ControlHandle = osThreadNew(StartLED_Control, NULL, &LED_Control_attributes);
 8001104:	4a25      	ldr	r2, [pc, #148]	; (800119c <main+0x184>)
 8001106:	2100      	movs	r1, #0
 8001108:	4825      	ldr	r0, [pc, #148]	; (80011a0 <main+0x188>)
 800110a:	f008 fee7 	bl	8009edc <osThreadNew>
 800110e:	4603      	mov	r3, r0
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <main+0x18c>)
 8001112:	6013      	str	r3, [r2, #0]

  /* creation of FiringSeq */
  FiringSeqHandle = osThreadNew(StartFiringSeq, NULL, &FiringSeq_attributes);
 8001114:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <main+0x190>)
 8001116:	2100      	movs	r1, #0
 8001118:	4824      	ldr	r0, [pc, #144]	; (80011ac <main+0x194>)
 800111a:	f008 fedf 	bl	8009edc <osThreadNew>
 800111e:	4603      	mov	r3, r0
 8001120:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <main+0x198>)
 8001122:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001124:	f008 feb4 	bl	8009e90 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001128:	e7fe      	b.n	8001128 <main+0x110>
 800112a:	bf00      	nop
 800112c:	20000228 	.word	0x20000228
 8001130:	20000270 	.word	0x20000270
 8001134:	40000800 	.word	0x40000800
 8001138:	0800eb0c 	.word	0x0800eb0c
 800113c:	2000032c 	.word	0x2000032c
 8001140:	0800eaac 	.word	0x0800eaac
 8001144:	2000031c 	.word	0x2000031c
 8001148:	0800eac4 	.word	0x0800eac4
 800114c:	20000320 	.word	0x20000320
 8001150:	0800eadc 	.word	0x0800eadc
 8001154:	20000324 	.word	0x20000324
 8001158:	0800eaf4 	.word	0x0800eaf4
 800115c:	20000328 	.word	0x20000328
 8001160:	0800e9b0 	.word	0x0800e9b0
 8001164:	080016b5 	.word	0x080016b5
 8001168:	20000300 	.word	0x20000300
 800116c:	0800e9d4 	.word	0x0800e9d4
 8001170:	0800177d 	.word	0x0800177d
 8001174:	20000304 	.word	0x20000304
 8001178:	0800e9f8 	.word	0x0800e9f8
 800117c:	08001839 	.word	0x08001839
 8001180:	20000308 	.word	0x20000308
 8001184:	0800ea1c 	.word	0x0800ea1c
 8001188:	08001849 	.word	0x08001849
 800118c:	2000030c 	.word	0x2000030c
 8001190:	0800ea40 	.word	0x0800ea40
 8001194:	080018d9 	.word	0x080018d9
 8001198:	20000310 	.word	0x20000310
 800119c:	0800ea64 	.word	0x0800ea64
 80011a0:	080019f9 	.word	0x080019f9
 80011a4:	20000314 	.word	0x20000314
 80011a8:	0800ea88 	.word	0x0800ea88
 80011ac:	08001b59 	.word	0x08001b59
 80011b0:	20000318 	.word	0x20000318

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	; 0x50
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	2230      	movs	r2, #48	; 0x30
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00c fe6e 	bl	800dea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <SystemClock_Config+0xcc>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	4a27      	ldr	r2, [pc, #156]	; (8001280 <SystemClock_Config+0xcc>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e6:	6413      	str	r3, [r2, #64]	; 0x40
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <SystemClock_Config+0xcc>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <SystemClock_Config+0xd0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001200:	4a20      	ldr	r2, [pc, #128]	; (8001284 <SystemClock_Config+0xd0>)
 8001202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <SystemClock_Config+0xd0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001214:	2301      	movs	r3, #1
 8001216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121e:	2302      	movs	r3, #2
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001228:	2308      	movs	r3, #8
 800122a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800122c:	23a8      	movs	r3, #168	; 0xa8
 800122e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001230:	2304      	movs	r3, #4
 8001232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001234:	2307      	movs	r3, #7
 8001236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fc65 	bl	8004b0c <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001248:	f000 fd16 	bl	8001c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2302      	movs	r3, #2
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2102      	movs	r1, #2
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fec7 	bl	8004ffc <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001274:	f000 fd00 	bl	8001c78 <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3750      	adds	r7, #80	; 0x50
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <MX_ADC1_Init+0xb4>)
 800129c:	4a28      	ldr	r2, [pc, #160]	; (8001340 <MX_ADC1_Init+0xb8>)
 800129e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <MX_ADC1_Init+0xb4>)
 80012a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <MX_ADC1_Init+0xb4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012ae:	4b23      	ldr	r3, [pc, #140]	; (800133c <MX_ADC1_Init+0xb4>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <MX_ADC1_Init+0xb4>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_ADC1_Init+0xb4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_ADC1_Init+0xb4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <MX_ADC1_Init+0xb4>)
 80012ca:	4a1e      	ldr	r2, [pc, #120]	; (8001344 <MX_ADC1_Init+0xbc>)
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_ADC1_Init+0xb4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_ADC1_Init+0xb4>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_ADC1_Init+0xb4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_ADC1_Init+0xb4>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e8:	4814      	ldr	r0, [pc, #80]	; (800133c <MX_ADC1_Init+0xb4>)
 80012ea:	f000 ff6f 	bl	80021cc <HAL_ADC_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012f4:	f000 fcc0 	bl	8001c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4619      	mov	r1, r3
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <MX_ADC1_Init+0xb4>)
 800130a:	f001 f8a7 	bl	800245c <HAL_ADC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001314:	f000 fcb0 	bl	8001c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001318:	2303      	movs	r3, #3
 800131a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800131c:	2302      	movs	r3, #2
 800131e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_ADC1_Init+0xb4>)
 8001326:	f001 f899 	bl	800245c <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001330:	f000 fca2 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000180 	.word	0x20000180
 8001340:	40012000 	.word	0x40012000
 8001344:	0f000001 	.word	0x0f000001

08001348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_TIM3_Init+0x94>)
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <MX_TIM3_Init+0x98>)
 8001368:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_TIM3_Init+0x94>)
 800136c:	2253      	movs	r2, #83	; 0x53
 800136e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <MX_TIM3_Init+0x94>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_TIM3_Init+0x94>)
 8001378:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800137c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_TIM3_Init+0x94>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_TIM3_Init+0x94>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800138a:	4814      	ldr	r0, [pc, #80]	; (80013dc <MX_TIM3_Init+0x94>)
 800138c:	f004 f872 	bl	8005474 <HAL_TIM_Base_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001396:	f000 fc6f 	bl	8001c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	4619      	mov	r1, r3
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_TIM3_Init+0x94>)
 80013a8:	f004 fcc0 	bl	8005d2c <HAL_TIM_ConfigClockSource>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80013b2:	f000 fc61 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_TIM3_Init+0x94>)
 80013c4:	f005 f864 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80013ce:	f000 fc53 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000228 	.word	0x20000228
 80013e0:	40000400 	.word	0x40000400

080013e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	; 0x38
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001416:	4a2c      	ldr	r2, [pc, #176]	; (80014c8 <MX_TIM4_Init+0xe4>)
 8001418:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42000-1;
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MX_TIM4_Init+0xe0>)
 800141c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001420:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4-1;
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_TIM4_Init+0xe0>)
 800142a:	2203      	movs	r2, #3
 800142c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800143a:	4822      	ldr	r0, [pc, #136]	; (80014c4 <MX_TIM4_Init+0xe0>)
 800143c:	f004 f81a 	bl	8005474 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001446:	f000 fc17 	bl	8001c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001454:	4619      	mov	r1, r3
 8001456:	481b      	ldr	r0, [pc, #108]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001458:	f004 fc68 	bl	8005d2c <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001462:	f000 fc09 	bl	8001c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001466:	4817      	ldr	r0, [pc, #92]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001468:	f004 f93f 	bl	80056ea <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001472:	f000 fc01 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	4619      	mov	r1, r3
 8001484:	480f      	ldr	r0, [pc, #60]	; (80014c4 <MX_TIM4_Init+0xe0>)
 8001486:	f005 f803 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001490:	f000 fbf2 	bl	8001c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001494:	2360      	movs	r3, #96	; 0x60
 8001496:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_TIM4_Init+0xe0>)
 80014ac:	f004 fb7c 	bl	8005ba8 <HAL_TIM_PWM_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80014b6:	f000 fbdf 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3738      	adds	r7, #56	; 0x38
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000270 	.word	0x20000270
 80014c8:	40000800 	.word	0x40000800

080014cc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_TIM10_Init+0x40>)
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <MX_TIM10_Init+0x44>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 42000-1;
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <MX_TIM10_Init+0x40>)
 80014d8:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80014dc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_TIM10_Init+0x40>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 200-1;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_TIM10_Init+0x40>)
 80014e6:	22c7      	movs	r2, #199	; 0xc7
 80014e8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_TIM10_Init+0x40>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_TIM10_Init+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_TIM10_Init+0x40>)
 80014f8:	f003 ffbc 	bl	8005474 <HAL_TIM_Base_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001502:	f000 fbb9 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200002b8 	.word	0x200002b8
 8001510:	40014400 	.word	0x40014400

08001514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_DMA_Init+0x3c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <MX_DMA_Init+0x3c>)
 8001524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_DMA_Init+0x3c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2105      	movs	r1, #5
 800153a:	2038      	movs	r0, #56	; 0x38
 800153c:	f001 fae6 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001540:	2038      	movs	r0, #56	; 0x38
 8001542:	f001 faff 	bl	8002b44 <HAL_NVIC_EnableIRQ>

}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <MX_GPIO_Init+0x150>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a4c      	ldr	r2, [pc, #304]	; (80016a4 <MX_GPIO_Init+0x150>)
 8001574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <MX_GPIO_Init+0x150>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <MX_GPIO_Init+0x150>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a45      	ldr	r2, [pc, #276]	; (80016a4 <MX_GPIO_Init+0x150>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <MX_GPIO_Init+0x150>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <MX_GPIO_Init+0x150>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a3e      	ldr	r2, [pc, #248]	; (80016a4 <MX_GPIO_Init+0x150>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <MX_GPIO_Init+0x150>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <MX_GPIO_Init+0x150>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a37      	ldr	r2, [pc, #220]	; (80016a4 <MX_GPIO_Init+0x150>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <MX_GPIO_Init+0x150>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	21e0      	movs	r1, #224	; 0xe0
 80015de:	4832      	ldr	r0, [pc, #200]	; (80016a8 <MX_GPIO_Init+0x154>)
 80015e0:	f001 ffca 	bl	8003578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 4177 	mov.w	r1, #63232	; 0xf700
 80015ea:	4830      	ldr	r0, [pc, #192]	; (80016ac <MX_GPIO_Init+0x158>)
 80015ec:	f001 ffc4 	bl	8003578 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ZVS_ON_GPIO_Port, ZVS_ON_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f6:	482e      	ldr	r0, [pc, #184]	; (80016b0 <MX_GPIO_Init+0x15c>)
 80015f8:	f001 ffbe 	bl	8003578 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015fc:	23e0      	movs	r3, #224	; 0xe0
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4825      	ldr	r0, [pc, #148]	; (80016a8 <MX_GPIO_Init+0x154>)
 8001614:	f001 fe14 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001618:	f44f 4377 	mov.w	r3, #63232	; 0xf700
 800161c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	481e      	ldr	r0, [pc, #120]	; (80016ac <MX_GPIO_Init+0x158>)
 8001632:	f001 fe05 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZVS_Pin Safety_Pin */
  GPIO_InitStruct.Pin = ZVS_Pin|Safety_Pin;
 8001636:	f44f 7340 	mov.w	r3, #768	; 0x300
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4817      	ldr	r0, [pc, #92]	; (80016a8 <MX_GPIO_Init+0x154>)
 800164c:	f001 fdf8 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Interupt_Pin */
  GPIO_InitStruct.Pin = Trigger_Interupt_Pin;
 8001650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001656:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Trigger_Interupt_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4810      	ldr	r0, [pc, #64]	; (80016a8 <MX_GPIO_Init+0x154>)
 8001668:	f001 fdea 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZVS_ON_Pin */
  GPIO_InitStruct.Pin = ZVS_ON_Pin;
 800166c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ZVS_ON_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	480a      	ldr	r0, [pc, #40]	; (80016b0 <MX_GPIO_Init+0x15c>)
 8001686:	f001 fddb 	bl	8003240 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2105      	movs	r1, #5
 800168e:	2028      	movs	r0, #40	; 0x28
 8001690:	f001 fa3c 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001694:	2028      	movs	r0, #40	; 0x28
 8001696:	f001 fa55 	bl	8002b44 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800

080016b4 <USB_Listen_Start>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_USB_Listen_Start */
void USB_Listen_Start(void *argument)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b092      	sub	sp, #72	; 0x48
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80016bc:	f00b fe76 	bl	800d3ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  HAL_TIM_Base_Start(&htim3);
 80016c0:	4827      	ldr	r0, [pc, #156]	; (8001760 <USB_Listen_Start+0xac>)
 80016c2:	f003 ff27 	bl	8005514 <HAL_TIM_Base_Start>
  /* Infinite loop */
  for(;;)
  {
	  char mess[64];

	  if(rec_cplt==1){
 80016c6:	4b27      	ldr	r3, [pc, #156]	; (8001764 <USB_Listen_Start+0xb0>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d143      	bne.n	8001756 <USB_Listen_Start+0xa2>
		  if(strcmp(buffer,"C1")==0){
 80016ce:	4926      	ldr	r1, [pc, #152]	; (8001768 <USB_Listen_Start+0xb4>)
 80016d0:	4826      	ldr	r0, [pc, #152]	; (800176c <USB_Listen_Start+0xb8>)
 80016d2:	f7fe fd85 	bl	80001e0 <strcmp>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d11f      	bne.n	800171c <USB_Listen_Start+0x68>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	4823      	ldr	r0, [pc, #140]	; (8001770 <USB_Listen_Start+0xbc>)
 80016e2:	f001 ff49 	bl	8003578 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80016e6:	2201      	movs	r2, #1
 80016e8:	2140      	movs	r1, #64	; 0x40
 80016ea:	4821      	ldr	r0, [pc, #132]	; (8001770 <USB_Listen_Start+0xbc>)
 80016ec:	f001 ff44 	bl	8003578 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 80016f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f4:	f000 fd46 	bl	8002184 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <USB_Listen_Start+0xbc>)
 80016fe:	f001 ff3b 	bl	8003578 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2140      	movs	r1, #64	; 0x40
 8001706:	481a      	ldr	r0, [pc, #104]	; (8001770 <USB_Listen_Start+0xbc>)
 8001708:	f001 ff36 	bl	8003578 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 800170c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001710:	f000 fd38 	bl	8002184 <HAL_Delay>
			  rec_cplt=0;
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <USB_Listen_Start+0xb0>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e01c      	b.n	8001756 <USB_Listen_Start+0xa2>
		  }

		  else{
			  c_delay=atoi(buffer);
 800171c:	4813      	ldr	r0, [pc, #76]	; (800176c <USB_Listen_Start+0xb8>)
 800171e:	f00c fb85 	bl	800de2c <atoi>
 8001722:	4603      	mov	r3, r0
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <USB_Listen_Start+0xc0>)
 8001728:	801a      	strh	r2, [r3, #0]
			  sprintf(mess,"Delay set to %i us",c_delay);
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <USB_Listen_Start+0xc0>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	4910      	ldr	r1, [pc, #64]	; (8001778 <USB_Listen_Start+0xc4>)
 8001736:	4618      	mov	r0, r3
 8001738:	f00c fbbc 	bl	800deb4 <siprintf>
			  CDC_Transmit_FS(mess, strlen(mess));
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fd57 	bl	80001f4 <strlen>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f00b ff19 	bl	800d588 <CDC_Transmit_FS>




	  }
	  vTaskSuspend(NULL);
 8001756:	2000      	movs	r0, #0
 8001758:	f009 feba 	bl	800b4d0 <vTaskSuspend>
  {
 800175c:	e7b3      	b.n	80016c6 <USB_Listen_Start+0x12>
 800175e:	bf00      	nop
 8001760:	20000228 	.word	0x20000228
 8001764:	20000370 	.word	0x20000370
 8001768:	0800e938 	.word	0x0800e938
 800176c:	20000330 	.word	0x20000330
 8001770:	40020000 	.word	0x40020000
 8001774:	2000037c 	.word	0x2000037c
 8001778:	0800e93c 	.word	0x0800e93c

0800177c <StartCheckZVS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCheckZVS */
void StartCheckZVS(void *argument)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCheckZVS */
  /* Infinite loop */
  for(;;)
  {

	 if(trig_count==0){
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <StartCheckZVS+0xb0>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <StartCheckZVS+0x16>
		 vTaskSuspend(NULL);
 800178c:	2000      	movs	r0, #0
 800178e:	f009 fe9f 	bl	800b4d0 <vTaskSuspend>
	 }
	 if(trig_count==1){
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <StartCheckZVS+0xb0>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d1f4      	bne.n	8001784 <StartCheckZVS+0x8>

		 if(ulTaskNotifyTake(pdTRUE, 0)==1){
 800179a:	2100      	movs	r1, #0
 800179c:	2001      	movs	r0, #1
 800179e:	f00a fde1 	bl	800c364 <ulTaskNotifyTake>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d0ed      	beq.n	8001784 <StartCheckZVS+0x8>

		 }

		 else{
			 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==0){
 80017a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ac:	4820      	ldr	r0, [pc, #128]	; (8001830 <StartCheckZVS+0xb4>)
 80017ae:	f001 fecb 	bl	8003548 <HAL_GPIO_ReadPin>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e5      	bne.n	8001784 <StartCheckZVS+0x8>

			 					 osDelay(2000);
 80017b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017bc:	f008 fc20 	bl	800a000 <osDelay>
			 					 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==0){
 80017c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c4:	481a      	ldr	r0, [pc, #104]	; (8001830 <StartCheckZVS+0xb4>)
 80017c6:	f001 febf 	bl	8003548 <HAL_GPIO_ReadPin>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1d9      	bne.n	8001784 <StartCheckZVS+0x8>
			 						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	4816      	ldr	r0, [pc, #88]	; (8001830 <StartCheckZVS+0xb4>)
 80017d6:	f001 fecf 	bl	8003578 <HAL_GPIO_WritePin>
			 						osDelay(c_delay);
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <StartCheckZVS+0xb8>)
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f008 fc0e 	bl	800a000 <osDelay>
			 						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2140      	movs	r1, #64	; 0x40
 80017e8:	4811      	ldr	r0, [pc, #68]	; (8001830 <StartCheckZVS+0xb4>)
 80017ea:	f001 fec5 	bl	8003578 <HAL_GPIO_WritePin>
			 						osDelay(100);
 80017ee:	2064      	movs	r0, #100	; 0x64
 80017f0:	f008 fc06 	bl	800a000 <osDelay>
			 						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2120      	movs	r1, #32
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <StartCheckZVS+0xb4>)
 80017fa:	f001 febd 	bl	8003578 <HAL_GPIO_WritePin>
			 						osDelay(10);
 80017fe:	200a      	movs	r0, #10
 8001800:	f008 fbfe 	bl	800a000 <osDelay>
			 						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	4809      	ldr	r0, [pc, #36]	; (8001830 <StartCheckZVS+0xb4>)
 800180a:	f001 feb5 	bl	8003578 <HAL_GPIO_WritePin>
			 						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2140      	movs	r1, #64	; 0x40
 8001812:	4807      	ldr	r0, [pc, #28]	; (8001830 <StartCheckZVS+0xb4>)
 8001814:	f001 feb0 	bl	8003578 <HAL_GPIO_WritePin>
			 						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
 8001818:	2200      	movs	r2, #0
 800181a:	2120      	movs	r1, #32
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <StartCheckZVS+0xb4>)
 800181e:	f001 feab 	bl	8003578 <HAL_GPIO_WritePin>
			 					    vTaskSuspend(NULL); //Resumed in Vcap
 8001822:	2000      	movs	r0, #0
 8001824:	f009 fe54 	bl	800b4d0 <vTaskSuspend>
	 if(trig_count==0){
 8001828:	e7ac      	b.n	8001784 <StartCheckZVS+0x8>
 800182a:	bf00      	nop
 800182c:	20000371 	.word	0x20000371
 8001830:	40020000 	.word	0x40020000
 8001834:	2000037c 	.word	0x2000037c

08001838 <StartLEDStandby>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDStandby */
void StartLEDStandby(void *argument)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDStandby */
  /* Infinite loop */
  for(;;)
  {

		 LED_Flash();
 8001840:	f7ff fa82 	bl	8000d48 <LED_Flash>
 8001844:	e7fc      	b.n	8001840 <StartLEDStandby+0x8>
	...

08001848 <StartSelfTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSelfTest */
void StartSelfTest(void *argument)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSelfTest */
  /* Infinite loop */
  for(;;)
  {

    if(trig_count==1){
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <StartSelfTest+0x74>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d12c      	bne.n	80018b2 <StartSelfTest+0x6a>
    	vTaskSuspend(LEDStandbyHandle);
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <StartSelfTest+0x78>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f009 fe37 	bl	800b4d0 <vTaskSuspend>
    	xSemaphoreTake(LEDsHandle,portMAX_DELAY);
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <StartSelfTest+0x7c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f04f 31ff 	mov.w	r1, #4294967295
 800186a:	4618      	mov	r0, r3
 800186c:	f009 f9c8 	bl	800ac00 <xQueueSemaphoreTake>
    	LED_Reset();
 8001870:	f7ff f9c8 	bl	8000c04 <LED_Reset>
    	LED_Follow();
 8001874:	f7ff f9f6 	bl	8000c64 <LED_Follow>
    	LED_Follow();
 8001878:	f7ff f9f4 	bl	8000c64 <LED_Follow>
    	LED_Follow();
 800187c:	f7ff f9f2 	bl	8000c64 <LED_Follow>
    	xSemaphoreGive(LEDsHandle);
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <StartSelfTest+0x7c>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	2300      	movs	r3, #0
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	f008 ff3f 	bl	800a70c <xQueueGenericSend>
    	vTaskResume(LED_ControlHandle);
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <StartSelfTest+0x80>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f009 fec4 	bl	800b620 <vTaskResume>
    	vTaskResume(CheckZVSHandle);
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <StartSelfTest+0x84>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f009 febf 	bl	800b620 <vTaskResume>
    	vTaskResume(FiringSeqHandle);
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <StartSelfTest+0x88>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f009 feba 	bl	800b620 <vTaskResume>
    	vTaskSuspend(NULL);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f009 fe0f 	bl	800b4d0 <vTaskSuspend>
    }
    osDelay(1);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f008 fba4 	bl	800a000 <osDelay>
    if(trig_count==1){
 80018b8:	e7ca      	b.n	8001850 <StartSelfTest+0x8>
 80018ba:	bf00      	nop
 80018bc:	20000371 	.word	0x20000371
 80018c0:	20000308 	.word	0x20000308
 80018c4:	2000032c 	.word	0x2000032c
 80018c8:	20000314 	.word	0x20000314
 80018cc:	20000304 	.word	0x20000304
 80018d0:	20000318 	.word	0x20000318
 80018d4:	00000000 	.word	0x00000000

080018d8 <StartProcessADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessADC */
void StartProcessADC(void *argument)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessADC */
  /* Infinite loop */
  for(;;)
  {

	if(trig_count==1){
 80018e0:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <StartProcessADC+0x100>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d104      	bne.n	80018f2 <StartProcessADC+0x1a>
		vTaskResume(LED_ControlHandle);
 80018e8:	4b3c      	ldr	r3, [pc, #240]	; (80019dc <StartProcessADC+0x104>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f009 fe97 	bl	800b620 <vTaskResume>
	}
	uint32_t ADC_vals[2];
	int Vcap;
	int Charge_val;
    xQueueReceive(ISRtoProcessADCHandle, &ADC_vals[0], 0); //Receive Capacitor voltage
 80018f2:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <StartProcessADC+0x108>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f107 0110 	add.w	r1, r7, #16
 80018fa:	2200      	movs	r2, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f009 f89f 	bl	800aa40 <xQueueReceive>
    xQueueReceive(ISRtoProcessADCHandle, &ADC_vals[1], 0); //Receive Capacitor voltage
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <StartProcessADC+0x108>)
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	f107 0310 	add.w	r3, r7, #16
 800190a:	3304      	adds	r3, #4
 800190c:	2200      	movs	r2, #0
 800190e:	4619      	mov	r1, r3
 8001910:	f009 f896 	bl	800aa40 <xQueueReceive>
    Vcap=((float)ADC_vals[0]/4095)*729.3;
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800191e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80019e4 <StartProcessADC+0x10c>
 8001922:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001926:	ee16 0a90 	vmov	r0, s13
 800192a:	f7fe ff4f 	bl	80007cc <__aeabi_f2d>
 800192e:	a328      	add	r3, pc, #160	; (adr r3, 80019d0 <StartProcessADC+0xf8>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fcbc 	bl	80002b0 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7fe ff9c 	bl	800087c <__aeabi_d2iz>
 8001944:	4603      	mov	r3, r0
 8001946:	60fb      	str	r3, [r7, #12]
    Charge_val=((float)ADC_vals[1]/4095)*400*(-1)+400;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001952:	eddf 6a24 	vldr	s13, [pc, #144]	; 80019e4 <StartProcessADC+0x10c>
 8001956:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80019e8 <StartProcessADC+0x110>
 800195e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001962:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80019e8 <StartProcessADC+0x110>
 8001966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800196e:	ee17 3a90 	vmov	r3, s15
 8001972:	60bb      	str	r3, [r7, #8]
    Charge_val=Charge_val_round(Charge_val);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff faba 	bl	8000ef0 <Charge_val_round>
 800197c:	4603      	mov	r3, r0
 800197e:	60bb      	str	r3, [r7, #8]

    if(Vcap==Charge_val || Vcap>Charge_val){
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	429a      	cmp	r2, r3
 8001986:	d003      	beq.n	8001990 <StartProcessADC+0xb8>
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	429a      	cmp	r2, r3
 800198e:	dd0a      	ble.n	80019a6 <StartProcessADC+0xce>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8001990:	2201      	movs	r2, #1
 8001992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001996:	4815      	ldr	r0, [pc, #84]	; (80019ec <StartProcessADC+0x114>)
 8001998:	f001 fdee 	bl	8003578 <HAL_GPIO_WritePin>
    	vTaskResume(FiringSeqHandle);
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <StartProcessADC+0x118>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f009 fe3d 	bl	800b620 <vTaskResume>

    }

    CDC_Transmit_FS(&Vcap, 2);
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	2102      	movs	r1, #2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00b fdeb 	bl	800d588 <CDC_Transmit_FS>
    osDelay(100);
 80019b2:	2064      	movs	r0, #100	; 0x64
 80019b4:	f008 fb24 	bl	800a000 <osDelay>
    xQueueSend(ProcessADCtoLEDHandle,&Charge_val,0);
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <StartProcessADC+0x11c>)
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	f107 0108 	add.w	r1, r7, #8
 80019c0:	2300      	movs	r3, #0
 80019c2:	2200      	movs	r2, #0
 80019c4:	f008 fea2 	bl	800a70c <xQueueGenericSend>
    vTaskSuspend(NULL);
 80019c8:	2000      	movs	r0, #0
 80019ca:	f009 fd81 	bl	800b4d0 <vTaskSuspend>
  {
 80019ce:	e787      	b.n	80018e0 <StartProcessADC+0x8>
 80019d0:	66666666 	.word	0x66666666
 80019d4:	4086ca66 	.word	0x4086ca66
 80019d8:	20000371 	.word	0x20000371
 80019dc:	20000314 	.word	0x20000314
 80019e0:	20000320 	.word	0x20000320
 80019e4:	457ff000 	.word	0x457ff000
 80019e8:	43c80000 	.word	0x43c80000
 80019ec:	40020400 	.word	0x40020400
 80019f0:	20000318 	.word	0x20000318
 80019f4:	20000324 	.word	0x20000324

080019f8 <StartLED_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_Control */
void StartLED_Control(void *argument)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_Control */
  /* Infinite loop */
  for(;;)
  {
	int Charge_val=0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
	xQueueReceive(ProcessADCtoLEDHandle, &Charge_val, 0);
 8001a04:	4b4d      	ldr	r3, [pc, #308]	; (8001b3c <StartLED_Control+0x144>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f107 010c 	add.w	r1, r7, #12
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f009 f816 	bl	800aa40 <xQueueReceive>
    if(trig_count==0){
 8001a14:	4b4a      	ldr	r3, [pc, #296]	; (8001b40 <StartLED_Control+0x148>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <StartLED_Control+0x2a>
    	vTaskSuspend(NULL);
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f009 fd57 	bl	800b4d0 <vTaskSuspend>
    }
    xSemaphoreTake(LEDsHandle,portMAX_DELAY); //Take control of LED GPIOs
 8001a22:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <StartLED_Control+0x14c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f009 f8e8 	bl	800ac00 <xQueueSemaphoreTake>

       	if(Charge_val==100){
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d10f      	bne.n	8001a56 <StartLED_Control+0x5e>
       		    HAL_TIM_Base_Stop_IT(&htim10);
 8001a36:	4844      	ldr	r0, [pc, #272]	; (8001b48 <StartLED_Control+0x150>)
 8001a38:	f003 fe28 	bl	800568c <HAL_TIM_Base_Stop_IT>
       	    	chrg_led_reset();
 8001a3c:	f7ff f9e6 	bl	8000e0c <chrg_led_reset>
       	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a46:	4841      	ldr	r0, [pc, #260]	; (8001b4c <StartLED_Control+0x154>)
 8001a48:	f001 fd96 	bl	8003578 <HAL_GPIO_WritePin>
       	    	vTaskResume(CheckZVSHandle);
 8001a4c:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <StartLED_Control+0x158>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f009 fde5 	bl	800b620 <vTaskResume>
       	    }

       	if(Charge_val==250){
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2bfa      	cmp	r3, #250	; 0xfa
 8001a5a:	d115      	bne.n	8001a88 <StartLED_Control+0x90>
       		    HAL_TIM_Base_Stop_IT(&htim10);
 8001a5c:	483a      	ldr	r0, [pc, #232]	; (8001b48 <StartLED_Control+0x150>)
 8001a5e:	f003 fe15 	bl	800568c <HAL_TIM_Base_Stop_IT>
       		    chrg_led_reset();
 8001a62:	f7ff f9d3 	bl	8000e0c <chrg_led_reset>
       	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001a66:	2201      	movs	r2, #1
 8001a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a6c:	4837      	ldr	r0, [pc, #220]	; (8001b4c <StartLED_Control+0x154>)
 8001a6e:	f001 fd83 	bl	8003578 <HAL_GPIO_WritePin>
       	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001a72:	2201      	movs	r2, #1
 8001a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a78:	4834      	ldr	r0, [pc, #208]	; (8001b4c <StartLED_Control+0x154>)
 8001a7a:	f001 fd7d 	bl	8003578 <HAL_GPIO_WritePin>
       	    	vTaskResume(CheckZVSHandle);
 8001a7e:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <StartLED_Control+0x158>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f009 fdcc 	bl	800b620 <vTaskResume>
       	    }

       	if(Charge_val==385){
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f240 1281 	movw	r2, #385	; 0x181
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d11b      	bne.n	8001aca <StartLED_Control+0xd2>
       		    HAL_TIM_Base_Stop_IT(&htim10);
 8001a92:	482d      	ldr	r0, [pc, #180]	; (8001b48 <StartLED_Control+0x150>)
 8001a94:	f003 fdfa 	bl	800568c <HAL_TIM_Base_Stop_IT>
       		    chrg_led_reset();
 8001a98:	f7ff f9b8 	bl	8000e0c <chrg_led_reset>
       	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aa2:	482a      	ldr	r0, [pc, #168]	; (8001b4c <StartLED_Control+0x154>)
 8001aa4:	f001 fd68 	bl	8003578 <HAL_GPIO_WritePin>
       	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aae:	4827      	ldr	r0, [pc, #156]	; (8001b4c <StartLED_Control+0x154>)
 8001ab0:	f001 fd62 	bl	8003578 <HAL_GPIO_WritePin>
       	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aba:	4824      	ldr	r0, [pc, #144]	; (8001b4c <StartLED_Control+0x154>)
 8001abc:	f001 fd5c 	bl	8003578 <HAL_GPIO_WritePin>
       	    	vTaskResume(CheckZVSHandle);
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <StartLED_Control+0x158>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f009 fdab 	bl	800b620 <vTaskResume>
       	    }

       if(Charge_val>385){
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8001ad0:	db28      	blt.n	8001b24 <StartLED_Control+0x12c>
       	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ad8:	481c      	ldr	r0, [pc, #112]	; (8001b4c <StartLED_Control+0x154>)
 8001ada:	f001 fd4d 	bl	8003578 <HAL_GPIO_WritePin>
       	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae4:	4819      	ldr	r0, [pc, #100]	; (8001b4c <StartLED_Control+0x154>)
 8001ae6:	f001 fd47 	bl	8003578 <HAL_GPIO_WritePin>
       	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001aea:	2201      	movs	r2, #1
 8001aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af0:	4816      	ldr	r0, [pc, #88]	; (8001b4c <StartLED_Control+0x154>)
 8001af2:	f001 fd41 	bl	8003578 <HAL_GPIO_WritePin>
       	    	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==0){
 8001af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001afa:	4816      	ldr	r0, [pc, #88]	; (8001b54 <StartLED_Control+0x15c>)
 8001afc:	f001 fd24 	bl	8003548 <HAL_GPIO_ReadPin>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10b      	bne.n	8001b1e <StartLED_Control+0x126>
       	    		HAL_TIM_Base_Stop_IT(&htim10);
 8001b06:	4810      	ldr	r0, [pc, #64]	; (8001b48 <StartLED_Control+0x150>)
 8001b08:	f003 fdc0 	bl	800568c <HAL_TIM_Base_Stop_IT>
       	    		LED_Reset();
 8001b0c:	f7ff f87a 	bl	8000c04 <LED_Reset>
       	    		led_quick_flash();
 8001b10:	f7ff f99a 	bl	8000e48 <led_quick_flash>
       	    		led_quick_flash();
 8001b14:	f7ff f998 	bl	8000e48 <led_quick_flash>
       	    		led_quick_flash();
 8001b18:	f7ff f996 	bl	8000e48 <led_quick_flash>
 8001b1c:	e002      	b.n	8001b24 <StartLED_Control+0x12c>
       	    	}
       	    	else{
       	    		HAL_TIM_Base_Start_IT(&htim10);
 8001b1e:	480a      	ldr	r0, [pc, #40]	; (8001b48 <StartLED_Control+0x150>)
 8001b20:	f003 fd52 	bl	80055c8 <HAL_TIM_Base_Start_IT>
       	    	}

       	    }
       xSemaphoreGive(LEDsHandle); //Release control of LED GPIOs
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <StartLED_Control+0x14c>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	f008 fded 	bl	800a70c <xQueueGenericSend>
       vTaskSuspend(NULL);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f009 fccc 	bl	800b4d0 <vTaskSuspend>
  {
 8001b38:	e762      	b.n	8001a00 <StartLED_Control+0x8>
 8001b3a:	bf00      	nop
 8001b3c:	20000324 	.word	0x20000324
 8001b40:	20000371 	.word	0x20000371
 8001b44:	2000032c 	.word	0x2000032c
 8001b48:	200002b8 	.word	0x200002b8
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	20000304 	.word	0x20000304
 8001b54:	40020000 	.word	0x40020000

08001b58 <StartFiringSeq>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFiringSeq */
void StartFiringSeq(void *argument)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFiringSeq */
  /* Infinite loop */
  for(;;)
  {
    if(trig_count==0){
 8001b60:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <StartFiringSeq+0xc8>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <StartFiringSeq+0x16>
    	vTaskSuspend(NULL);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f009 fcb1 	bl	800b4d0 <vTaskSuspend>
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0); //Turn off ZVS
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b74:	482b      	ldr	r0, [pc, #172]	; (8001c24 <StartFiringSeq+0xcc>)
 8001b76:	f001 fcff 	bl	8003578 <HAL_GPIO_WritePin>





    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b80:	4829      	ldr	r0, [pc, #164]	; (8001c28 <StartFiringSeq+0xd0>)
 8001b82:	f001 fcf9 	bl	8003578 <HAL_GPIO_WritePin>

    	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==0){ //Check Trigger
 8001b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b8a:	4828      	ldr	r0, [pc, #160]	; (8001c2c <StartFiringSeq+0xd4>)
 8001b8c:	f001 fcdc 	bl	8003548 <HAL_GPIO_ReadPin>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d13a      	bne.n	8001c0c <StartFiringSeq+0xb4>
    	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001b96:	2201      	movs	r2, #1
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	4824      	ldr	r0, [pc, #144]	; (8001c2c <StartFiringSeq+0xd4>)
 8001b9c:	f001 fcec 	bl	8003578 <HAL_GPIO_WritePin>
    	    	delay(c_delay);
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <StartFiringSeq+0xd8>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f813 	bl	8000bd0 <delay>
    	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001baa:	2201      	movs	r2, #1
 8001bac:	2140      	movs	r1, #64	; 0x40
 8001bae:	481f      	ldr	r0, [pc, #124]	; (8001c2c <StartFiringSeq+0xd4>)
 8001bb0:	f001 fce2 	bl	8003578 <HAL_GPIO_WritePin>
    	    	osDelay(100);
 8001bb4:	2064      	movs	r0, #100	; 0x64
 8001bb6:	f008 fa23 	bl	800a000 <osDelay>
    	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	481b      	ldr	r0, [pc, #108]	; (8001c2c <StartFiringSeq+0xd4>)
 8001bc0:	f001 fcda 	bl	8003578 <HAL_GPIO_WritePin>
    	    	osDelay(10);
 8001bc4:	200a      	movs	r0, #10
 8001bc6:	f008 fa1b 	bl	800a000 <osDelay>
    	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	4817      	ldr	r0, [pc, #92]	; (8001c2c <StartFiringSeq+0xd4>)
 8001bd0:	f001 fcd2 	bl	8003578 <HAL_GPIO_WritePin>
    	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2140      	movs	r1, #64	; 0x40
 8001bd8:	4814      	ldr	r0, [pc, #80]	; (8001c2c <StartFiringSeq+0xd4>)
 8001bda:	f001 fccd 	bl	8003578 <HAL_GPIO_WritePin>
    	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2120      	movs	r1, #32
 8001be2:	4812      	ldr	r0, [pc, #72]	; (8001c2c <StartFiringSeq+0xd4>)
 8001be4:	f001 fcc8 	bl	8003578 <HAL_GPIO_WritePin>
    	    	Vcap_prev=0;
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <StartFiringSeq+0xdc>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
    	    	osDelay(100);
 8001bee:	2064      	movs	r0, #100	; 0x64
 8001bf0:	f008 fa06 	bl	800a000 <osDelay>
    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bfa:	480b      	ldr	r0, [pc, #44]	; (8001c28 <StartFiringSeq+0xd0>)
 8001bfc:	f001 fcbc 	bl	8003578 <HAL_GPIO_WritePin>
    	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c06:	4808      	ldr	r0, [pc, #32]	; (8001c28 <StartFiringSeq+0xd0>)
 8001c08:	f001 fcb6 	bl	8003578 <HAL_GPIO_WritePin>





    vTaskResume(CheckZVSHandle); //Resume checking of ZVS
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <StartFiringSeq+0xe0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f009 fd05 	bl	800b620 <vTaskResume>
    vTaskSuspend(NULL);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f009 fc5a 	bl	800b4d0 <vTaskSuspend>
    if(trig_count==0){
 8001c1c:	e7a0      	b.n	8001b60 <StartFiringSeq+0x8>
 8001c1e:	bf00      	nop
 8001c20:	20000371 	.word	0x20000371
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	2000037c 	.word	0x2000037c
 8001c34:	20000380 	.word	0x20000380
 8001c38:	20000304 	.word	0x20000304

08001c3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if(htim->Instance== TIM10){
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d104      	bne.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001c4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c52:	4808      	ldr	r0, [pc, #32]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001c54:	f001 fca9 	bl	80035aa <HAL_GPIO_TogglePin>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c60:	d101      	bne.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8001c62:	f000 fa6f 	bl	8002144 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40014400 	.word	0x40014400
 8001c74:	40020400 	.word	0x40020400

08001c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7c:	b672      	cpsid	i
}
 8001c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <Error_Handler+0x8>
	...

08001c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_MspInit+0x54>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_MspInit+0x54>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_MspInit+0x54>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_MspInit+0x54>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_MspInit+0x54>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_MspInit+0x54>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	f06f 0001 	mvn.w	r0, #1
 8001cca:	f000 ff1f 	bl	8002b0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <HAL_ADC_MspInit+0xdc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d157      	bne.n	8001dae <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <HAL_ADC_MspInit+0xe0>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a2d      	ldr	r2, [pc, #180]	; (8001dbc <HAL_ADC_MspInit+0xe0>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_ADC_MspInit+0xe0>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_ADC_MspInit+0xe0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a26      	ldr	r2, [pc, #152]	; (8001dbc <HAL_ADC_MspInit+0xe0>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_ADC_MspInit+0xe0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CAP_Pin|V_cap_set_Pin;
 8001d36:	230c      	movs	r3, #12
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	481d      	ldr	r0, [pc, #116]	; (8001dc0 <HAL_ADC_MspInit+0xe4>)
 8001d4a:	f001 fa79 	bl	8003240 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001d50:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_ADC_MspInit+0xec>)
 8001d52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001d78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d92:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001d94:	f000 fee4 	bl	8002b60 <HAL_DMA_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d9e:	f7ff ff6b 	bl	8001c78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001da6:	639a      	str	r2, [r3, #56]	; 0x38
 8001da8:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40012000 	.word	0x40012000
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	200001c8 	.word	0x200001c8
 8001dc8:	40026410 	.word	0x40026410

08001dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <HAL_TIM_Base_MspInit+0xa8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10e      	bne.n	8001dfc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a24      	ldr	r2, [pc, #144]	; (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001dfa:	e036      	b.n	8001e6a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <HAL_TIM_Base_MspInit+0xb0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d116      	bne.n	8001e34 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2105      	movs	r1, #5
 8001e26:	201e      	movs	r0, #30
 8001e28:	f000 fe70 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e2c:	201e      	movs	r0, #30
 8001e2e:	f000 fe89 	bl	8002b44 <HAL_NVIC_EnableIRQ>
}
 8001e32:	e01a      	b.n	8001e6a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_TIM_Base_MspInit+0xb4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d115      	bne.n	8001e6a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_TIM_Base_MspInit+0xac>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2105      	movs	r1, #5
 8001e5e:	2019      	movs	r0, #25
 8001e60:	f000 fe54 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e64:	2019      	movs	r0, #25
 8001e66:	f000 fe6d 	bl	8002b44 <HAL_NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40000800 	.word	0x40000800
 8001e80:	40014400 	.word	0x40014400

08001e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08e      	sub	sp, #56	; 0x38
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <HAL_InitTick+0xe8>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	4a33      	ldr	r2, [pc, #204]	; (8001f6c <HAL_InitTick+0xe8>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea4:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <HAL_InitTick+0xe8>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb0:	f107 0210 	add.w	r2, r7, #16
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 faa8 	bl	8005410 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eca:	f003 fa8d 	bl	80053e8 <HAL_RCC_GetPCLK1Freq>
 8001ece:	6378      	str	r0, [r7, #52]	; 0x34
 8001ed0:	e004      	b.n	8001edc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ed2:	f003 fa89 	bl	80053e8 <HAL_RCC_GetPCLK1Freq>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	4a24      	ldr	r2, [pc, #144]	; (8001f70 <HAL_InitTick+0xec>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	0c9b      	lsrs	r3, r3, #18
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <HAL_InitTick+0xf0>)
 8001eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_InitTick+0xf0>)
 8001ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ef8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001efa:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <HAL_InitTick+0xf0>)
 8001efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efe:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <HAL_InitTick+0xf0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_InitTick+0xf0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_InitTick+0xf0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001f12:	4818      	ldr	r0, [pc, #96]	; (8001f74 <HAL_InitTick+0xf0>)
 8001f14:	f003 faae 	bl	8005474 <HAL_TIM_Base_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001f1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d11b      	bne.n	8001f5e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001f26:	4813      	ldr	r0, [pc, #76]	; (8001f74 <HAL_InitTick+0xf0>)
 8001f28:	f003 fb4e 	bl	80055c8 <HAL_TIM_Base_Start_IT>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001f32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d111      	bne.n	8001f5e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f3a:	201c      	movs	r0, #28
 8001f3c:	f000 fe02 	bl	8002b44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b0f      	cmp	r3, #15
 8001f44:	d808      	bhi.n	8001f58 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001f46:	2200      	movs	r2, #0
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	201c      	movs	r0, #28
 8001f4c:	f000 fdde 	bl	8002b0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f50:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <HAL_InitTick+0xf4>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e002      	b.n	8001f5e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3738      	adds	r7, #56	; 0x38
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	20000384 	.word	0x20000384
 8001f78:	20000004 	.word	0x20000004

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <NMI_Handler+0x4>

08001f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <HardFault_Handler+0x4>

08001f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <MemManage_Handler+0x4>

08001f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <BusFault_Handler+0x4>

08001f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <UsageFault_Handler+0x4>

08001f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fae:	f003 fcf3 	bl	8005998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200002b8 	.word	0x200002b8

08001fbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <TIM2_IRQHandler+0x10>)
 8001fc2:	f003 fce9 	bl	8005998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000384 	.word	0x20000384

08001fd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <TIM4_IRQHandler+0x10>)
 8001fd6:	f003 fcdf 	bl	8005998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000270 	.word	0x20000270

08001fe4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Trigger_Interupt_Pin);
 8001fe8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001fec:	f001 faf8 	bl	80035e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <DMA2_Stream0_IRQHandler+0x10>)
 8001ffa:	f000 feb7 	bl	8002d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200001c8 	.word	0x200001c8

08002008 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <OTG_FS_IRQHandler+0x10>)
 800200e:	f001 fc4f 	bl	80038b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20005a04 	.word	0x20005a04

0800201c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <_sbrk+0x5c>)
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <_sbrk+0x60>)
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <_sbrk+0x64>)
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <_sbrk+0x68>)
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	429a      	cmp	r2, r3
 800204a:	d207      	bcs.n	800205c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800204c:	f00b fef2 	bl	800de34 <__errno>
 8002050:	4603      	mov	r3, r0
 8002052:	220c      	movs	r2, #12
 8002054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	e009      	b.n	8002070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <_sbrk+0x64>)
 800206c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20010000 	.word	0x20010000
 800207c:	00000400 	.word	0x00000400
 8002080:	200003cc 	.word	0x200003cc
 8002084:	20006140 	.word	0x20006140

08002088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <SystemInit+0x20>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <SystemInit+0x20>)
 8002094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b0:	480d      	ldr	r0, [pc, #52]	; (80020e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020b2:	490e      	ldr	r1, [pc, #56]	; (80020ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020b4:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b8:	e002      	b.n	80020c0 <LoopCopyDataInit>

080020ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020be:	3304      	adds	r3, #4

080020c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c4:	d3f9      	bcc.n	80020ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020c8:	4c0b      	ldr	r4, [pc, #44]	; (80020f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020cc:	e001      	b.n	80020d2 <LoopFillZerobss>

080020ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d0:	3204      	adds	r2, #4

080020d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d4:	d3fb      	bcc.n	80020ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020d6:	f7ff ffd7 	bl	8002088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020da:	f00b feb1 	bl	800de40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020de:	f7fe ff9b 	bl	8001018 <main>
  bx  lr    
 80020e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ec:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80020f0:	0800ec80 	.word	0x0800ec80
  ldr r2, =_sbss
 80020f4:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80020f8:	20006140 	.word	0x20006140

080020fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <ADC_IRQHandler>
	...

08002100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <HAL_Init+0x40>)
 800210a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_Init+0x40>)
 8002116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <HAL_Init+0x40>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002128:	2003      	movs	r0, #3
 800212a:	f000 fce4 	bl	8002af6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212e:	200f      	movs	r0, #15
 8002130:	f7ff fea8 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002134:	f7ff fda6 	bl	8001c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00

08002144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_IncTick+0x20>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_IncTick+0x24>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <HAL_IncTick+0x24>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008
 8002168:	200003d0 	.word	0x200003d0

0800216c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return uwTick;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_GetTick+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	200003d0 	.word	0x200003d0

08002184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff ffee 	bl	800216c <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d005      	beq.n	80021aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219e:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_Delay+0x44>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021aa:	bf00      	nop
 80021ac:	f7ff ffde 	bl	800216c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d8f7      	bhi.n	80021ac <HAL_Delay+0x28>
  {
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000008 	.word	0x20000008

080021cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e033      	b.n	800224a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fd76 	bl	8001cdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002212:	f023 0302 	bic.w	r3, r3, #2
 8002216:	f043 0202 	orr.w	r2, r3, #2
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fa3e 	bl	80026a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f023 0303 	bic.w	r3, r3, #3
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
 800223a:	e001      	b.n	8002240 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_ADC_Start_DMA+0x1e>
 800226e:	2302      	movs	r3, #2
 8002270:	e0ce      	b.n	8002410 <HAL_ADC_Start_DMA+0x1bc>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	d018      	beq.n	80022ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002298:	4b5f      	ldr	r3, [pc, #380]	; (8002418 <HAL_ADC_Start_DMA+0x1c4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a5f      	ldr	r2, [pc, #380]	; (800241c <HAL_ADC_Start_DMA+0x1c8>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	0c9a      	lsrs	r2, r3, #18
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80022ac:	e002      	b.n	80022b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f9      	bne.n	80022ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c8:	d107      	bne.n	80022da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	f040 8086 	bne.w	80023f6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d007      	beq.n	800231c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002314:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002328:	d106      	bne.n	8002338 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f023 0206 	bic.w	r2, r3, #6
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
 8002336:	e002      	b.n	800233e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002346:	4b36      	ldr	r3, [pc, #216]	; (8002420 <HAL_ADC_Start_DMA+0x1cc>)
 8002348:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	4a35      	ldr	r2, [pc, #212]	; (8002424 <HAL_ADC_Start_DMA+0x1d0>)
 8002350:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002356:	4a34      	ldr	r2, [pc, #208]	; (8002428 <HAL_ADC_Start_DMA+0x1d4>)
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235e:	4a33      	ldr	r2, [pc, #204]	; (800242c <HAL_ADC_Start_DMA+0x1d8>)
 8002360:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800236a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800237a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800238a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	334c      	adds	r3, #76	; 0x4c
 8002396:	4619      	mov	r1, r3
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f000 fc8e 	bl	8002cbc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10f      	bne.n	80023cc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d129      	bne.n	800240e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	e020      	b.n	800240e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a17      	ldr	r2, [pc, #92]	; (8002430 <HAL_ADC_Start_DMA+0x1dc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d11b      	bne.n	800240e <HAL_ADC_Start_DMA+0x1ba>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d114      	bne.n	800240e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	e00b      	b.n	800240e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f043 0210 	orr.w	r2, r3, #16
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000000 	.word	0x20000000
 800241c:	431bde83 	.word	0x431bde83
 8002420:	40012300 	.word	0x40012300
 8002424:	08002899 	.word	0x08002899
 8002428:	08002953 	.word	0x08002953
 800242c:	0800296f 	.word	0x0800296f
 8002430:	40012000 	.word	0x40012000

08002434 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1c>
 8002474:	2302      	movs	r3, #2
 8002476:	e105      	b.n	8002684 <HAL_ADC_ConfigChannel+0x228>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b09      	cmp	r3, #9
 8002486:	d925      	bls.n	80024d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68d9      	ldr	r1, [r3, #12]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	3b1e      	subs	r3, #30
 800249e:	2207      	movs	r2, #7
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43da      	mvns	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	400a      	ands	r2, r1
 80024ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68d9      	ldr	r1, [r3, #12]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	4603      	mov	r3, r0
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4403      	add	r3, r0
 80024c6:	3b1e      	subs	r3, #30
 80024c8:	409a      	lsls	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	e022      	b.n	800251a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6919      	ldr	r1, [r3, #16]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	2207      	movs	r2, #7
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	400a      	ands	r2, r1
 80024f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6919      	ldr	r1, [r3, #16]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	4618      	mov	r0, r3
 800250a:	4603      	mov	r3, r0
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4403      	add	r3, r0
 8002510:	409a      	lsls	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b06      	cmp	r3, #6
 8002520:	d824      	bhi.n	800256c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	3b05      	subs	r3, #5
 8002534:	221f      	movs	r2, #31
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	400a      	ands	r2, r1
 8002542:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	4618      	mov	r0, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3b05      	subs	r3, #5
 800255e:	fa00 f203 	lsl.w	r2, r0, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	635a      	str	r2, [r3, #52]	; 0x34
 800256a:	e04c      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b0c      	cmp	r3, #12
 8002572:	d824      	bhi.n	80025be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	3b23      	subs	r3, #35	; 0x23
 8002586:	221f      	movs	r2, #31
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43da      	mvns	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	400a      	ands	r2, r1
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	3b23      	subs	r3, #35	; 0x23
 80025b0:	fa00 f203 	lsl.w	r2, r0, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
 80025bc:	e023      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b41      	subs	r3, #65	; 0x41
 80025d0:	221f      	movs	r2, #31
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	400a      	ands	r2, r1
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b41      	subs	r3, #65	; 0x41
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002606:	4b22      	ldr	r3, [pc, #136]	; (8002690 <HAL_ADC_ConfigChannel+0x234>)
 8002608:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <HAL_ADC_ConfigChannel+0x238>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d109      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1cc>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b12      	cmp	r3, #18
 800261a:	d105      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a19      	ldr	r2, [pc, #100]	; (8002694 <HAL_ADC_ConfigChannel+0x238>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d123      	bne.n	800267a <HAL_ADC_ConfigChannel+0x21e>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b10      	cmp	r3, #16
 8002638:	d003      	beq.n	8002642 <HAL_ADC_ConfigChannel+0x1e6>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b11      	cmp	r3, #17
 8002640:	d11b      	bne.n	800267a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b10      	cmp	r3, #16
 8002654:	d111      	bne.n	800267a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_ADC_ConfigChannel+0x23c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a10      	ldr	r2, [pc, #64]	; (800269c <HAL_ADC_ConfigChannel+0x240>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	0c9a      	lsrs	r2, r3, #18
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800266c:	e002      	b.n	8002674 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	3b01      	subs	r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f9      	bne.n	800266e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40012300 	.word	0x40012300
 8002694:	40012000 	.word	0x40012000
 8002698:	20000000 	.word	0x20000000
 800269c:	431bde83 	.word	0x431bde83

080026a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a8:	4b79      	ldr	r3, [pc, #484]	; (8002890 <ADC_Init+0x1f0>)
 80026aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	021a      	lsls	r2, r3, #8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6899      	ldr	r1, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	4a58      	ldr	r2, [pc, #352]	; (8002894 <ADC_Init+0x1f4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d022      	beq.n	800277e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002746:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6899      	ldr	r1, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6899      	ldr	r1, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	e00f      	b.n	800279e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800278c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800279c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0202 	bic.w	r2, r2, #2
 80027ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6899      	ldr	r1, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7e1b      	ldrb	r3, [r3, #24]
 80027b8:	005a      	lsls	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	3b01      	subs	r3, #1
 80027f8:	035a      	lsls	r2, r3, #13
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	e007      	b.n	8002814 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002812:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	3b01      	subs	r3, #1
 8002830:	051a      	lsls	r2, r3, #20
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002856:	025a      	lsls	r2, r3, #9
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6899      	ldr	r1, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	029a      	lsls	r2, r3, #10
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40012300 	.word	0x40012300
 8002894:	0f000001 	.word	0x0f000001

08002898 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d13c      	bne.n	800292c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d12b      	bne.n	8002924 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d127      	bne.n	8002924 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d119      	bne.n	8002924 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0220 	bic.w	r2, r2, #32
 80028fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f043 0201 	orr.w	r2, r3, #1
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7fe fb39 	bl	8000f9c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800292a:	e00e      	b.n	800294a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff fd85 	bl	8002448 <HAL_ADC_ErrorCallback>
}
 800293e:	e004      	b.n	800294a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff fd67 	bl	8002434 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2240      	movs	r2, #64	; 0x40
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	f043 0204 	orr.w	r2, r3, #4
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff fd5a 	bl	8002448 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ce:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <__NVIC_GetPriorityGrouping+0x18>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 0307 	and.w	r3, r3, #7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	db0b      	blt.n	8002a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4907      	ldr	r1, [pc, #28]	; (8002a38 <__NVIC_EnableIRQ+0x38>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f202 	lsl.w	r2, r0, r2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db0a      	blt.n	8002a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	490c      	ldr	r1, [pc, #48]	; (8002a88 <__NVIC_SetPriority+0x4c>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a64:	e00a      	b.n	8002a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4908      	ldr	r1, [pc, #32]	; (8002a8c <__NVIC_SetPriority+0x50>)
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3b04      	subs	r3, #4
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	440b      	add	r3, r1
 8002a7a:	761a      	strb	r2, [r3, #24]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000e100 	.word	0xe000e100
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f1c3 0307 	rsb	r3, r3, #7
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	bf28      	it	cs
 8002aae:	2304      	movcs	r3, #4
 8002ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d902      	bls.n	8002ac0 <NVIC_EncodePriority+0x30>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3b03      	subs	r3, #3
 8002abe:	e000      	b.n	8002ac2 <NVIC_EncodePriority+0x32>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	4313      	orrs	r3, r2
         );
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ff4c 	bl	800299c <__NVIC_SetPriorityGrouping>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b1e:	f7ff ff61 	bl	80029e4 <__NVIC_GetPriorityGrouping>
 8002b22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	6978      	ldr	r0, [r7, #20]
 8002b2a:	f7ff ffb1 	bl	8002a90 <NVIC_EncodePriority>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff80 	bl	8002a3c <__NVIC_SetPriority>
}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff54 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b6c:	f7ff fafe 	bl	800216c <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e099      	b.n	8002cb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9c:	e00f      	b.n	8002bbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b9e:	f7ff fae5 	bl	800216c <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d908      	bls.n	8002bbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e078      	b.n	8002cb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e8      	bne.n	8002b9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_DMA_Init+0x158>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d107      	bne.n	8002c28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	4313      	orrs	r3, r2
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 0307 	bic.w	r3, r3, #7
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d117      	bne.n	8002c82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fa6f 	bl	8003148 <DMA_CheckFifoParam>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2240      	movs	r2, #64	; 0x40
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e016      	b.n	8002cb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fa26 	bl	80030dc <DMA_CalcBaseAndBitshift>
 8002c90:	4603      	mov	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	223f      	movs	r2, #63	; 0x3f
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	f010803f 	.word	0xf010803f

08002cbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_DMA_Start_IT+0x26>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e040      	b.n	8002d64 <HAL_DMA_Start_IT+0xa8>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d12f      	bne.n	8002d56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f9b8 	bl	8003080 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	223f      	movs	r2, #63	; 0x3f
 8002d16:	409a      	lsls	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0216 	orr.w	r2, r2, #22
 8002d2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0208 	orr.w	r2, r2, #8
 8002d42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e005      	b.n	8002d62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d78:	4b8e      	ldr	r3, [pc, #568]	; (8002fb4 <HAL_DMA_IRQHandler+0x248>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a8e      	ldr	r2, [pc, #568]	; (8002fb8 <HAL_DMA_IRQHandler+0x24c>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0a9b      	lsrs	r3, r3, #10
 8002d84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	2208      	movs	r2, #8
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01a      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d013      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0204 	bic.w	r2, r2, #4
 8002dbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f043 0201 	orr.w	r2, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ddc:	2201      	movs	r2, #1
 8002dde:	409a      	lsls	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d012      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	f043 0202 	orr.w	r2, r3, #2
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	2204      	movs	r2, #4
 8002e14:	409a      	lsls	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d012      	beq.n	8002e44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00b      	beq.n	8002e44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	2204      	movs	r2, #4
 8002e32:	409a      	lsls	r2, r3
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3c:	f043 0204 	orr.w	r2, r3, #4
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	2210      	movs	r2, #16
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d043      	beq.n	8002edc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d03c      	beq.n	8002edc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e66:	2210      	movs	r2, #16
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d018      	beq.n	8002eae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d108      	bne.n	8002e9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d024      	beq.n	8002edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
 8002e9a:	e01f      	b.n	8002edc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01b      	beq.n	8002edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	4798      	blx	r3
 8002eac:	e016      	b.n	8002edc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d107      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0208 	bic.w	r2, r2, #8
 8002eca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 808f 	beq.w	800300c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8087 	beq.w	800300c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	2220      	movs	r2, #32
 8002f04:	409a      	lsls	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d136      	bne.n	8002f84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0216 	bic.w	r2, r2, #22
 8002f24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <HAL_DMA_IRQHandler+0x1da>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0208 	bic.w	r2, r2, #8
 8002f54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	223f      	movs	r2, #63	; 0x3f
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d07e      	beq.n	8003078 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
        }
        return;
 8002f82:	e079      	b.n	8003078 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01d      	beq.n	8002fce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10d      	bne.n	8002fbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d031      	beq.n	800300c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4798      	blx	r3
 8002fb0:	e02c      	b.n	800300c <HAL_DMA_IRQHandler+0x2a0>
 8002fb2:	bf00      	nop
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d023      	beq.n	800300c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4798      	blx	r3
 8002fcc:	e01e      	b.n	800300c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10f      	bne.n	8002ffc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0210 	bic.w	r2, r2, #16
 8002fea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	2b00      	cmp	r3, #0
 8003012:	d032      	beq.n	800307a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d022      	beq.n	8003066 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2205      	movs	r2, #5
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	3301      	adds	r3, #1
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	d307      	bcc.n	8003054 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f2      	bne.n	8003038 <HAL_DMA_IRQHandler+0x2cc>
 8003052:	e000      	b.n	8003056 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003054:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	4798      	blx	r3
 8003076:	e000      	b.n	800307a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003078:	bf00      	nop
    }
  }
}
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800309c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b40      	cmp	r3, #64	; 0x40
 80030ac:	d108      	bne.n	80030c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030be:	e007      	b.n	80030d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	60da      	str	r2, [r3, #12]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	3b10      	subs	r3, #16
 80030ec:	4a14      	ldr	r2, [pc, #80]	; (8003140 <DMA_CalcBaseAndBitshift+0x64>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030f6:	4a13      	ldr	r2, [pc, #76]	; (8003144 <DMA_CalcBaseAndBitshift+0x68>)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d909      	bls.n	800311e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	1d1a      	adds	r2, r3, #4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	659a      	str	r2, [r3, #88]	; 0x58
 800311c:	e007      	b.n	800312e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003126:	f023 0303 	bic.w	r3, r3, #3
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	aaaaaaab 	.word	0xaaaaaaab
 8003144:	0800eb34 	.word	0x0800eb34

08003148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d11f      	bne.n	80031a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b03      	cmp	r3, #3
 8003166:	d856      	bhi.n	8003216 <DMA_CheckFifoParam+0xce>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <DMA_CheckFifoParam+0x28>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003181 	.word	0x08003181
 8003174:	08003193 	.word	0x08003193
 8003178:	08003181 	.word	0x08003181
 800317c:	08003217 	.word	0x08003217
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d046      	beq.n	800321a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003190:	e043      	b.n	800321a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800319a:	d140      	bne.n	800321e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a0:	e03d      	b.n	800321e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031aa:	d121      	bne.n	80031f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d837      	bhi.n	8003222 <DMA_CheckFifoParam+0xda>
 80031b2:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <DMA_CheckFifoParam+0x70>)
 80031b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b8:	080031c9 	.word	0x080031c9
 80031bc:	080031cf 	.word	0x080031cf
 80031c0:	080031c9 	.word	0x080031c9
 80031c4:	080031e1 	.word	0x080031e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      break;
 80031cc:	e030      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d025      	beq.n	8003226 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031de:	e022      	b.n	8003226 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031e8:	d11f      	bne.n	800322a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ee:	e01c      	b.n	800322a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d903      	bls.n	80031fe <DMA_CheckFifoParam+0xb6>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d003      	beq.n	8003204 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031fc:	e018      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
      break;
 8003202:	e015      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00e      	beq.n	800322e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
      break;
 8003214:	e00b      	b.n	800322e <DMA_CheckFifoParam+0xe6>
      break;
 8003216:	bf00      	nop
 8003218:	e00a      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 800321a:	bf00      	nop
 800321c:	e008      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 800321e:	bf00      	nop
 8003220:	e006      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 8003222:	bf00      	nop
 8003224:	e004      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 8003226:	bf00      	nop
 8003228:	e002      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;   
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 800322e:	bf00      	nop
    }
  } 
  
  return status; 
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop

08003240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	e159      	b.n	8003510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800325c:	2201      	movs	r2, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	429a      	cmp	r2, r3
 8003276:	f040 8148 	bne.w	800350a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d005      	beq.n	8003292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328e:	2b02      	cmp	r3, #2
 8003290:	d130      	bne.n	80032f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c8:	2201      	movs	r2, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 0201 	and.w	r2, r3, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d017      	beq.n	8003330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d123      	bne.n	8003384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	08da      	lsrs	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3208      	adds	r2, #8
 8003344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	220f      	movs	r2, #15
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	08da      	lsrs	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3208      	adds	r2, #8
 800337e:	69b9      	ldr	r1, [r7, #24]
 8003380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0203 	and.w	r2, r3, #3
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a2 	beq.w	800350a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	4b57      	ldr	r3, [pc, #348]	; (8003528 <HAL_GPIO_Init+0x2e8>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	4a56      	ldr	r2, [pc, #344]	; (8003528 <HAL_GPIO_Init+0x2e8>)
 80033d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d4:	6453      	str	r3, [r2, #68]	; 0x44
 80033d6:	4b54      	ldr	r3, [pc, #336]	; (8003528 <HAL_GPIO_Init+0x2e8>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033e2:	4a52      	ldr	r2, [pc, #328]	; (800352c <HAL_GPIO_Init+0x2ec>)
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	3302      	adds	r3, #2
 80033ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	220f      	movs	r2, #15
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a49      	ldr	r2, [pc, #292]	; (8003530 <HAL_GPIO_Init+0x2f0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d019      	beq.n	8003442 <HAL_GPIO_Init+0x202>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a48      	ldr	r2, [pc, #288]	; (8003534 <HAL_GPIO_Init+0x2f4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_GPIO_Init+0x1fe>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a47      	ldr	r2, [pc, #284]	; (8003538 <HAL_GPIO_Init+0x2f8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00d      	beq.n	800343a <HAL_GPIO_Init+0x1fa>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a46      	ldr	r2, [pc, #280]	; (800353c <HAL_GPIO_Init+0x2fc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <HAL_GPIO_Init+0x1f6>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a45      	ldr	r2, [pc, #276]	; (8003540 <HAL_GPIO_Init+0x300>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_GPIO_Init+0x1f2>
 800342e:	2304      	movs	r3, #4
 8003430:	e008      	b.n	8003444 <HAL_GPIO_Init+0x204>
 8003432:	2307      	movs	r3, #7
 8003434:	e006      	b.n	8003444 <HAL_GPIO_Init+0x204>
 8003436:	2303      	movs	r3, #3
 8003438:	e004      	b.n	8003444 <HAL_GPIO_Init+0x204>
 800343a:	2302      	movs	r3, #2
 800343c:	e002      	b.n	8003444 <HAL_GPIO_Init+0x204>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_GPIO_Init+0x204>
 8003442:	2300      	movs	r3, #0
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	f002 0203 	and.w	r2, r2, #3
 800344a:	0092      	lsls	r2, r2, #2
 800344c:	4093      	lsls	r3, r2
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003454:	4935      	ldr	r1, [pc, #212]	; (800352c <HAL_GPIO_Init+0x2ec>)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	3302      	adds	r3, #2
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003462:	4b38      	ldr	r3, [pc, #224]	; (8003544 <HAL_GPIO_Init+0x304>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003486:	4a2f      	ldr	r2, [pc, #188]	; (8003544 <HAL_GPIO_Init+0x304>)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800348c:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_GPIO_Init+0x304>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034b0:	4a24      	ldr	r2, [pc, #144]	; (8003544 <HAL_GPIO_Init+0x304>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034b6:	4b23      	ldr	r3, [pc, #140]	; (8003544 <HAL_GPIO_Init+0x304>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034da:	4a1a      	ldr	r2, [pc, #104]	; (8003544 <HAL_GPIO_Init+0x304>)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034e0:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_GPIO_Init+0x304>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003504:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <HAL_GPIO_Init+0x304>)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3301      	adds	r3, #1
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	f67f aea2 	bls.w	800325c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3724      	adds	r7, #36	; 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	40013800 	.word	0x40013800
 8003530:	40020000 	.word	0x40020000
 8003534:	40020400 	.word	0x40020400
 8003538:	40020800 	.word	0x40020800
 800353c:	40020c00 	.word	0x40020c00
 8003540:	40021000 	.word	0x40021000
 8003544:	40013c00 	.word	0x40013c00

08003548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	887b      	ldrh	r3, [r7, #2]
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	e001      	b.n	800356a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800356a:	7bfb      	ldrb	r3, [r7, #15]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
 8003584:	4613      	mov	r3, r2
 8003586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003588:	787b      	ldrb	r3, [r7, #1]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800358e:	887a      	ldrh	r2, [r7, #2]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003594:	e003      	b.n	800359e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	041a      	lsls	r2, r3, #16
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	619a      	str	r2, [r3, #24]
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035bc:	887a      	ldrh	r2, [r7, #2]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4013      	ands	r3, r2
 80035c2:	041a      	lsls	r2, r3, #16
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	43d9      	mvns	r1, r3
 80035c8:	887b      	ldrh	r3, [r7, #2]
 80035ca:	400b      	ands	r3, r1
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	619a      	str	r2, [r3, #24]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d006      	beq.n	8003604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035f6:	4a05      	ldr	r2, [pc, #20]	; (800360c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd fca0 	bl	8000f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40013c00 	.word	0x40013c00

08003610 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003612:	b08f      	sub	sp, #60	; 0x3c
 8003614:	af0a      	add	r7, sp, #40	; 0x28
 8003616:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e10f      	b.n	8003842 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f00a f8eb 	bl	800d818 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2203      	movs	r2, #3
 8003646:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f003 f8ac 	bl	80067be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	687e      	ldr	r6, [r7, #4]
 800366e:	466d      	mov	r5, sp
 8003670:	f106 0410 	add.w	r4, r6, #16
 8003674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800367a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003680:	e885 0003 	stmia.w	r5, {r0, r1}
 8003684:	1d33      	adds	r3, r6, #4
 8003686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003688:	6838      	ldr	r0, [r7, #0]
 800368a:	f002 ff83 	bl	8006594 <USB_CoreInit>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0d0      	b.n	8003842 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f003 f89a 	bl	80067e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e04a      	b.n	8003748 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	333d      	adds	r3, #61	; 0x3d
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036c6:	7bfa      	ldrb	r2, [r7, #15]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	333c      	adds	r3, #60	; 0x3c
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	b298      	uxth	r0, r3
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	3344      	adds	r3, #68	; 0x44
 80036ee:	4602      	mov	r2, r0
 80036f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036f2:	7bfa      	ldrb	r2, [r7, #15]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3340      	adds	r3, #64	; 0x40
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	3348      	adds	r3, #72	; 0x48
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	334c      	adds	r3, #76	; 0x4c
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	3354      	adds	r3, #84	; 0x54
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	3301      	adds	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	7bfa      	ldrb	r2, [r7, #15]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	429a      	cmp	r2, r3
 8003750:	d3af      	bcc.n	80036b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
 8003756:	e044      	b.n	80037e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003784:	7bfa      	ldrb	r2, [r7, #15]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800379a:	7bfa      	ldrb	r2, [r7, #15]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	3301      	adds	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d3b5      	bcc.n	8003758 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	687e      	ldr	r6, [r7, #4]
 80037f4:	466d      	mov	r5, sp
 80037f6:	f106 0410 	add.w	r4, r6, #16
 80037fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003802:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003806:	e885 0003 	stmia.w	r5, {r0, r1}
 800380a:	1d33      	adds	r3, r6, #4
 800380c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800380e:	6838      	ldr	r0, [r7, #0]
 8003810:	f003 f832 	bl	8006878 <USB_DevInit>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e00d      	b.n	8003842 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f004 f981 	bl	8007b42 <USB_DevDisconnect>

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800384a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_PCD_Start+0x1c>
 8003862:	2302      	movs	r3, #2
 8003864:	e020      	b.n	80038a8 <HAL_PCD_Start+0x5e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	2b01      	cmp	r3, #1
 8003874:	d109      	bne.n	800388a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800387a:	2b01      	cmp	r3, #1
 800387c:	d005      	beq.n	800388a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f002 ff84 	bl	800679c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f004 f931 	bl	8007b00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b08d      	sub	sp, #52	; 0x34
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f004 f9ef 	bl	8007caa <USB_GetMode>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 848a 	bne.w	80041e8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f004 f953 	bl	8007b84 <USB_ReadInterrupts>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8480 	beq.w	80041e6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0a1b      	lsrs	r3, r3, #8
 80038f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f004 f940 	bl	8007b84 <USB_ReadInterrupts>
 8003904:	4603      	mov	r3, r0
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b02      	cmp	r3, #2
 800390c:	d107      	bne.n	800391e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f002 0202 	and.w	r2, r2, #2
 800391c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f004 f92e 	bl	8007b84 <USB_ReadInterrupts>
 8003928:	4603      	mov	r3, r0
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b10      	cmp	r3, #16
 8003930:	d161      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699a      	ldr	r2, [r3, #24]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0210 	bic.w	r2, r2, #16
 8003940:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f003 020f 	and.w	r2, r3, #15
 800394e:	4613      	mov	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	3304      	adds	r3, #4
 8003960:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	0c5b      	lsrs	r3, r3, #17
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	2b02      	cmp	r3, #2
 800396c:	d124      	bne.n	80039b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d035      	beq.n	80039e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003988:	b29b      	uxth	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	6a38      	ldr	r0, [r7, #32]
 800398e:	f003 ff65 	bl	800785c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800399e:	441a      	add	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b0:	441a      	add	r2, r3
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	621a      	str	r2, [r3, #32]
 80039b6:	e016      	b.n	80039e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	0c5b      	lsrs	r3, r3, #17
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	2b06      	cmp	r3, #6
 80039c2:	d110      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039ca:	2208      	movs	r2, #8
 80039cc:	4619      	mov	r1, r3
 80039ce:	6a38      	ldr	r0, [r7, #32]
 80039d0:	f003 ff44 	bl	800785c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	6a1a      	ldr	r2, [r3, #32]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e0:	441a      	add	r2, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699a      	ldr	r2, [r3, #24]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0210 	orr.w	r2, r2, #16
 80039f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 f8c2 	bl	8007b84 <USB_ReadInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a0a:	f040 80a7 	bne.w	8003b5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f004 f8c7 	bl	8007baa <USB_ReadDevAllOutEpInterrupt>
 8003a1c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a1e:	e099      	b.n	8003b54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 808e 	beq.w	8003b48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f004 f8eb 	bl	8007c12 <USB_ReadDevOutEPInterrupt>
 8003a3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00c      	beq.n	8003a62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a54:	461a      	mov	r2, r3
 8003a56:	2301      	movs	r3, #1
 8003a58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fec3 	bl	80047e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00c      	beq.n	8003a86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 ff99 	bl	80049b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2310      	movs	r3, #16
 8003aa0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d030      	beq.n	8003b0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	2b80      	cmp	r3, #128	; 0x80
 8003ab6:	d109      	bne.n	8003acc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4413      	add	r3, r2
 8003ade:	3304      	adds	r3, #4
 8003ae0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	78db      	ldrb	r3, [r3, #3]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d108      	bne.n	8003afc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2200      	movs	r2, #0
 8003aee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f009 ff8a 	bl	800da10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	461a      	mov	r2, r3
 8003b26:	2320      	movs	r3, #32
 8003b28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b40:	461a      	mov	r2, r3
 8003b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	085b      	lsrs	r3, r3, #1
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f47f af62 	bne.w	8003a20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f004 f80f 	bl	8007b84 <USB_ReadInterrupts>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b70:	f040 80db 	bne.w	8003d2a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 f830 	bl	8007bde <USB_ReadDevAllInEpInterrupt>
 8003b7e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b84:	e0cd      	b.n	8003d22 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80c2 	beq.w	8003d16 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f004 f856 	bl	8007c4e <USB_ReadDevInEPInterrupt>
 8003ba2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d057      	beq.n	8003c5e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69f9      	ldr	r1, [r7, #28]
 8003bca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bce:	4013      	ands	r3, r2
 8003bd0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bde:	461a      	mov	r2, r3
 8003be0:	2301      	movs	r3, #1
 8003be2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d132      	bne.n	8003c52 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	334c      	adds	r3, #76	; 0x4c
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4403      	add	r3, r0
 8003c0c:	3348      	adds	r3, #72	; 0x48
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4419      	add	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c16:	4613      	mov	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4403      	add	r3, r0
 8003c20:	334c      	adds	r3, #76	; 0x4c
 8003c22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d113      	bne.n	8003c52 <HAL_PCD_IRQHandler+0x3a2>
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3354      	adds	r3, #84	; 0x54
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d108      	bne.n	8003c52 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	f004 f85d 	bl	8007d0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f009 fe5e 	bl	800d91a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c74:	461a      	mov	r2, r3
 8003c76:	2308      	movs	r3, #8
 8003c78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c90:	461a      	mov	r2, r3
 8003c92:	2310      	movs	r3, #16
 8003c94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cac:	461a      	mov	r2, r3
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d023      	beq.n	8003d04 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cbe:	6a38      	ldr	r0, [r7, #32]
 8003cc0:	f002 ff3e 	bl	8006b40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	3338      	adds	r3, #56	; 0x38
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	78db      	ldrb	r3, [r3, #3]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d108      	bne.n	8003cf2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	4619      	mov	r1, r3
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f009 fea1 	bl	800da34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2302      	movs	r3, #2
 8003d02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fcdb 	bl	80046cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	3301      	adds	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	085b      	lsrs	r3, r3, #1
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f47f af2e 	bne.w	8003b86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f003 ff28 	bl	8007b84 <USB_ReadInterrupts>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d3e:	d122      	bne.n	8003d86 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d108      	bne.n	8003d70 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d66:	2100      	movs	r1, #0
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fec3 	bl	8004af4 <HAL_PCDEx_LPM_Callback>
 8003d6e:	e002      	b.n	8003d76 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f009 fe3f 	bl	800d9f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f003 fefa 	bl	8007b84 <USB_ReadInterrupts>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9a:	d112      	bne.n	8003dc2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d102      	bne.n	8003db2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f009 fdfb 	bl	800d9a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003dc0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f003 fedc 	bl	8007b84 <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	f040 80b7 	bne.w	8003f48 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2110      	movs	r1, #16
 8003df4:	4618      	mov	r0, r3
 8003df6:	f002 fea3 	bl	8006b40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dfe:	e046      	b.n	8003e8e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e24:	0151      	lsls	r1, r2, #5
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	440a      	add	r2, r1
 8003e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e40:	461a      	mov	r2, r3
 8003e42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d3b3      	bcc.n	8003e00 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ea6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003eaa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d016      	beq.n	8003ee2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec4:	f043 030b 	orr.w	r3, r3, #11
 8003ec8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eda:	f043 030b 	orr.w	r3, r3, #11
 8003ede:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee0:	e015      	b.n	8003f0e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ef4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003ef8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f08:	f043 030b 	orr.w	r3, r3, #11
 8003f0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f32:	461a      	mov	r2, r3
 8003f34:	f003 feea 	bl	8007d0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f003 fe19 	bl	8007b84 <USB_ReadInterrupts>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5c:	d124      	bne.n	8003fa8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f003 feaf 	bl	8007cc6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f002 fe64 	bl	8006c3a <USB_GetDevSpeed>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461a      	mov	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681c      	ldr	r4, [r3, #0]
 8003f7e:	f001 fa27 	bl	80053d0 <HAL_RCC_GetHCLKFreq>
 8003f82:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f002 fb63 	bl	8006658 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f009 fce9 	bl	800d96a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f003 fde9 	bl	8007b84 <USB_ReadInterrupts>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d10a      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f009 fcc6 	bl	800d94e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f002 0208 	and.w	r2, r2, #8
 8003fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f003 fdd4 	bl	8007b84 <USB_ReadInterrupts>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b80      	cmp	r3, #128	; 0x80
 8003fe4:	d122      	bne.n	800402c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff6:	e014      	b.n	8004022 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d105      	bne.n	800401c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	b2db      	uxtb	r3, r3
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fb27 	bl	800466a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	3301      	adds	r3, #1
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004028:	429a      	cmp	r2, r3
 800402a:	d3e5      	bcc.n	8003ff8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f003 fda7 	bl	8007b84 <USB_ReadInterrupts>
 8004036:	4603      	mov	r3, r0
 8004038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004040:	d13b      	bne.n	80040ba <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004042:	2301      	movs	r3, #1
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
 8004046:	e02b      	b.n	80040a0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	3340      	adds	r3, #64	; 0x40
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d115      	bne.n	800409a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800406e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004070:	2b00      	cmp	r3, #0
 8004072:	da12      	bge.n	800409a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	333f      	adds	r3, #63	; 0x3f
 8004084:	2201      	movs	r2, #1
 8004086:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004090:	b2db      	uxtb	r3, r3
 8004092:	4619      	mov	r1, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fae8 	bl	800466a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	3301      	adds	r3, #1
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d3ce      	bcc.n	8004048 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 fd60 	bl	8007b84 <USB_ReadInterrupts>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ce:	d155      	bne.n	800417c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040d0:	2301      	movs	r3, #1
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
 80040d4:	e045      	b.n	8004162 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d12e      	bne.n	800415c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004100:	2b00      	cmp	r3, #0
 8004102:	da2b      	bge.n	800415c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004110:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004114:	429a      	cmp	r2, r3
 8004116:	d121      	bne.n	800415c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004158:	6053      	str	r3, [r2, #4]
            break;
 800415a:	e007      	b.n	800416c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	3301      	adds	r3, #1
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	429a      	cmp	r2, r3
 800416a:	d3b4      	bcc.n	80040d6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800417a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f003 fcff 	bl	8007b84 <USB_ReadInterrupts>
 8004186:	4603      	mov	r3, r0
 8004188:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004190:	d10a      	bne.n	80041a8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f009 fc60 	bl	800da58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f003 fce9 	bl	8007b84 <USB_ReadInterrupts>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d115      	bne.n	80041e8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f009 fc50 	bl	800da74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	e000      	b.n	80041e8 <HAL_PCD_IRQHandler+0x938>
      return;
 80041e6:	bf00      	nop
    }
  }
}
 80041e8:	3734      	adds	r7, #52	; 0x34
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd90      	pop	{r4, r7, pc}

080041ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	460b      	mov	r3, r1
 80041f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_PCD_SetAddress+0x1a>
 8004204:	2302      	movs	r3, #2
 8004206:	e013      	b.n	8004230 <HAL_PCD_SetAddress+0x42>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f003 fc47 	bl	8007ab4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	4608      	mov	r0, r1
 8004242:	4611      	mov	r1, r2
 8004244:	461a      	mov	r2, r3
 8004246:	4603      	mov	r3, r0
 8004248:	70fb      	strb	r3, [r7, #3]
 800424a:	460b      	mov	r3, r1
 800424c:	803b      	strh	r3, [r7, #0]
 800424e:	4613      	mov	r3, r2
 8004250:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800425a:	2b00      	cmp	r3, #0
 800425c:	da0f      	bge.n	800427e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	3338      	adds	r3, #56	; 0x38
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	3304      	adds	r3, #4
 8004274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	705a      	strb	r2, [r3, #1]
 800427c:	e00f      	b.n	800429e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	f003 020f 	and.w	r2, r3, #15
 8004284:	4613      	mov	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	3304      	adds	r3, #4
 8004296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042aa:	883a      	ldrh	r2, [r7, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	78ba      	ldrb	r2, [r7, #2]
 80042b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042c8:	78bb      	ldrb	r3, [r7, #2]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d102      	bne.n	80042d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_PCD_EP_Open+0xaa>
 80042de:	2302      	movs	r3, #2
 80042e0:	e00e      	b.n	8004300 <HAL_PCD_EP_Open+0xc8>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68f9      	ldr	r1, [r7, #12]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f002 fcc7 	bl	8006c84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80042fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004318:	2b00      	cmp	r3, #0
 800431a:	da0f      	bge.n	800433c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	3338      	adds	r3, #56	; 0x38
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4413      	add	r3, r2
 8004330:	3304      	adds	r3, #4
 8004332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	705a      	strb	r2, [r3, #1]
 800433a:	e00f      	b.n	800435c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	4413      	add	r3, r2
 8004352:	3304      	adds	r3, #4
 8004354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_PCD_EP_Close+0x6e>
 8004372:	2302      	movs	r3, #2
 8004374:	e00e      	b.n	8004394 <HAL_PCD_EP_Close+0x8c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	4618      	mov	r0, r3
 8004386:	f002 fd05 	bl	8006d94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	460b      	mov	r3, r1
 80043aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ac:	7afb      	ldrb	r3, [r7, #11]
 80043ae:	f003 020f 	and.w	r2, r3, #15
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	3304      	adds	r3, #4
 80043c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2200      	movs	r2, #0
 80043dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043de:	7afb      	ldrb	r3, [r7, #11]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d102      	bne.n	80043f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f8:	7afb      	ldrb	r3, [r7, #11]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	6979      	ldr	r1, [r7, #20]
 8004410:	f002 ffe4 	bl	80073dc <USB_EP0StartXfer>
 8004414:	e008      	b.n	8004428 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	6979      	ldr	r1, [r7, #20]
 8004424:	f002 fd92 	bl	8006f4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004454:	681b      	ldr	r3, [r3, #0]
}
 8004456:	4618      	mov	r0, r3
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	460b      	mov	r3, r1
 8004470:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004472:	7afb      	ldrb	r3, [r7, #11]
 8004474:	f003 020f 	and.w	r2, r3, #15
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	3338      	adds	r3, #56	; 0x38
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	3304      	adds	r3, #4
 8004488:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2201      	movs	r2, #1
 80044a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a2:	7afb      	ldrb	r3, [r7, #11]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d102      	bne.n	80044bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044bc:	7afb      	ldrb	r3, [r7, #11]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	6979      	ldr	r1, [r7, #20]
 80044d4:	f002 ff82 	bl	80073dc <USB_EP0StartXfer>
 80044d8:	e008      	b.n	80044ec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	6979      	ldr	r1, [r7, #20]
 80044e8:	f002 fd30 	bl	8006f4c <USB_EPStartXfer>
  }

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	f003 020f 	and.w	r2, r3, #15
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d901      	bls.n	8004514 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e050      	b.n	80045b6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004518:	2b00      	cmp	r3, #0
 800451a:	da0f      	bge.n	800453c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	4613      	mov	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	3338      	adds	r3, #56	; 0x38
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4413      	add	r3, r2
 8004530:	3304      	adds	r3, #4
 8004532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	705a      	strb	r2, [r3, #1]
 800453a:	e00d      	b.n	8004558 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	3304      	adds	r3, #4
 8004550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	b2da      	uxtb	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_PCD_EP_SetStall+0x82>
 8004574:	2302      	movs	r3, #2
 8004576:	e01e      	b.n	80045b6 <HAL_PCD_EP_SetStall+0xc0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68f9      	ldr	r1, [r7, #12]
 8004586:	4618      	mov	r0, r3
 8004588:	f003 f9c0 	bl	800790c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	b2d9      	uxtb	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045a6:	461a      	mov	r2, r3
 80045a8:	f003 fbb0 	bl	8007d0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045ca:	78fb      	ldrb	r3, [r7, #3]
 80045cc:	f003 020f 	and.w	r2, r3, #15
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d901      	bls.n	80045dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e042      	b.n	8004662 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	da0f      	bge.n	8004604 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	3338      	adds	r3, #56	; 0x38
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	3304      	adds	r3, #4
 80045fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	705a      	strb	r2, [r3, #1]
 8004602:	e00f      	b.n	8004624 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 020f 	and.w	r2, r3, #15
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	3304      	adds	r3, #4
 800461c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	b2da      	uxtb	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_PCD_EP_ClrStall+0x86>
 8004640:	2302      	movs	r3, #2
 8004642:	e00e      	b.n	8004662 <HAL_PCD_EP_ClrStall+0xa4>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68f9      	ldr	r1, [r7, #12]
 8004652:	4618      	mov	r0, r3
 8004654:	f003 f9c8 	bl	80079e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	460b      	mov	r3, r1
 8004674:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800467a:	2b00      	cmp	r3, #0
 800467c:	da0c      	bge.n	8004698 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	f003 020f 	and.w	r2, r3, #15
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	3338      	adds	r3, #56	; 0x38
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4413      	add	r3, r2
 8004692:	3304      	adds	r3, #4
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e00c      	b.n	80046b2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	f003 020f 	and.w	r2, r3, #15
 800469e:	4613      	mov	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	3304      	adds	r3, #4
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f002 ffe7 	bl	800768c <USB_EPStopXfer>
 80046be:	4603      	mov	r3, r0
 80046c0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80046c2:	7afb      	ldrb	r3, [r7, #11]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	3338      	adds	r3, #56	; 0x38
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	4413      	add	r3, r2
 80046f0:	3304      	adds	r3, #4
 80046f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1a      	ldr	r2, [r3, #32]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d901      	bls.n	8004704 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e06c      	b.n	80047de <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	429a      	cmp	r2, r3
 8004718:	d902      	bls.n	8004720 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	3303      	adds	r3, #3
 8004724:	089b      	lsrs	r3, r3, #2
 8004726:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004728:	e02b      	b.n	8004782 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	429a      	cmp	r2, r3
 800473e:	d902      	bls.n	8004746 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3303      	adds	r3, #3
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6919      	ldr	r1, [r3, #16]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800475e:	b2db      	uxtb	r3, r3
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	4603      	mov	r3, r0
 8004764:	6978      	ldr	r0, [r7, #20]
 8004766:	f003 f83b 	bl	80077e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	441a      	add	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a1a      	ldr	r2, [r3, #32]
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	441a      	add	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	b29b      	uxth	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	429a      	cmp	r2, r3
 8004796:	d809      	bhi.n	80047ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a1a      	ldr	r2, [r3, #32]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d203      	bcs.n	80047ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1be      	bne.n	800472a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d811      	bhi.n	80047dc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	2201      	movs	r2, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	6939      	ldr	r1, [r7, #16]
 80047d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047d8:	4013      	ands	r3, r2
 80047da:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	333c      	adds	r3, #60	; 0x3c
 8004800:	3304      	adds	r3, #4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d17b      	bne.n	8004916 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d015      	beq.n	8004854 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	4a61      	ldr	r2, [pc, #388]	; (80049b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	f240 80b9 	bls.w	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80b3 	beq.w	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484a:	461a      	mov	r2, r3
 800484c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004850:	6093      	str	r3, [r2, #8]
 8004852:	e0a7      	b.n	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	461a      	mov	r2, r3
 800486c:	2320      	movs	r3, #32
 800486e:	6093      	str	r3, [r2, #8]
 8004870:	e098      	b.n	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	f040 8093 	bne.w	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	4a4b      	ldr	r2, [pc, #300]	; (80049b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d90f      	bls.n	80048a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489c:	461a      	mov	r2, r3
 800489e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a2:	6093      	str	r3, [r2, #8]
 80048a4:	e07e      	b.n	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	3304      	adds	r3, #4
 80048ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	0159      	lsls	r1, r3, #5
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	440b      	add	r3, r1
 80048c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d2:	1ad2      	subs	r2, r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d114      	bne.n	8004908 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048f0:	461a      	mov	r2, r3
 80048f2:	2101      	movs	r1, #1
 80048f4:	f003 fa0a 	bl	8007d0c <USB_EP0_OutStart>
 80048f8:	e006      	b.n	8004908 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	441a      	add	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f008 ffe8 	bl	800d8e4 <HAL_PCD_DataOutStageCallback>
 8004914:	e046      	b.n	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	4a26      	ldr	r2, [pc, #152]	; (80049b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d124      	bne.n	8004968 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004934:	461a      	mov	r2, r3
 8004936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493a:	6093      	str	r3, [r2, #8]
 800493c:	e032      	b.n	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004954:	461a      	mov	r2, r3
 8004956:	2320      	movs	r3, #32
 8004958:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f008 ffbf 	bl	800d8e4 <HAL_PCD_DataOutStageCallback>
 8004966:	e01d      	b.n	80049a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d114      	bne.n	8004998 <PCD_EP_OutXfrComplete_int+0x1b0>
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d108      	bne.n	8004998 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004990:	461a      	mov	r2, r3
 8004992:	2100      	movs	r1, #0
 8004994:	f003 f9ba 	bl	8007d0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	4619      	mov	r1, r3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f008 ffa0 	bl	800d8e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	4f54300a 	.word	0x4f54300a
 80049b4:	4f54310a 	.word	0x4f54310a

080049b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	333c      	adds	r3, #60	; 0x3c
 80049d0:	3304      	adds	r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <PCD_EP_OutSetupPacket_int+0x88>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d90e      	bls.n	8004a0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d009      	beq.n	8004a0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	461a      	mov	r2, r3
 8004a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f008 ff57 	bl	800d8c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d90c      	bls.n	8004a34 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d108      	bne.n	8004a34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2101      	movs	r1, #1
 8004a30:	f003 f96c 	bl	8007d0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	4f54300a 	.word	0x4f54300a

08004a44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
 8004a50:	4613      	mov	r3, r2
 8004a52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d107      	bne.n	8004a72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a62:	883b      	ldrh	r3, [r7, #0]
 8004a64:	0419      	lsls	r1, r3, #16
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a70:	e028      	b.n	8004ac4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]
 8004a84:	e00d      	b.n	8004aa2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	3340      	adds	r3, #64	; 0x40
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	0c1b      	lsrs	r3, r3, #16
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4413      	add	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	7bfa      	ldrb	r2, [r7, #15]
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d3ec      	bcc.n	8004a86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004aac:	883b      	ldrh	r3, [r7, #0]
 8004aae:	0418      	lsls	r0, r3, #16
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	4302      	orrs	r2, r0
 8004abc:	3340      	adds	r3, #64	; 0x40
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	887a      	ldrh	r2, [r7, #2]
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e267      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d075      	beq.n	8004c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b2a:	4b88      	ldr	r3, [pc, #544]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d00c      	beq.n	8004b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b36:	4b85      	ldr	r3, [pc, #532]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d112      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b42:	4b82      	ldr	r3, [pc, #520]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b4e:	d10b      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	4b7e      	ldr	r3, [pc, #504]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d05b      	beq.n	8004c14 <HAL_RCC_OscConfig+0x108>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d157      	bne.n	8004c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e242      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b70:	d106      	bne.n	8004b80 <HAL_RCC_OscConfig+0x74>
 8004b72:	4b76      	ldr	r3, [pc, #472]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a75      	ldr	r2, [pc, #468]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e01d      	b.n	8004bbc <HAL_RCC_OscConfig+0xb0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x98>
 8004b8a:	4b70      	ldr	r3, [pc, #448]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6f      	ldr	r2, [pc, #444]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	4b6d      	ldr	r3, [pc, #436]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a6c      	ldr	r2, [pc, #432]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e00b      	b.n	8004bbc <HAL_RCC_OscConfig+0xb0>
 8004ba4:	4b69      	ldr	r3, [pc, #420]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a68      	ldr	r2, [pc, #416]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	4b66      	ldr	r3, [pc, #408]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a65      	ldr	r2, [pc, #404]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d013      	beq.n	8004bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fd fad2 	bl	800216c <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fd face 	bl	800216c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e207      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bde:	4b5b      	ldr	r3, [pc, #364]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0xc0>
 8004bea:	e014      	b.n	8004c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fd fabe 	bl	800216c <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7fd faba 	bl	800216c <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	; 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e1f3      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c06:	4b51      	ldr	r3, [pc, #324]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0xe8>
 8004c12:	e000      	b.n	8004c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d063      	beq.n	8004cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c22:	4b4a      	ldr	r3, [pc, #296]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2e:	4b47      	ldr	r3, [pc, #284]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d11c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3a:	4b44      	ldr	r3, [pc, #272]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d116      	bne.n	8004c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c46:	4b41      	ldr	r3, [pc, #260]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_RCC_OscConfig+0x152>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e1c7      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5e:	4b3b      	ldr	r3, [pc, #236]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4937      	ldr	r1, [pc, #220]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c72:	e03a      	b.n	8004cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d020      	beq.n	8004cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c7c:	4b34      	ldr	r3, [pc, #208]	; (8004d50 <HAL_RCC_OscConfig+0x244>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fd fa73 	bl	800216c <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c8a:	f7fd fa6f 	bl	800216c <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e1a8      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9c:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	4b28      	ldr	r3, [pc, #160]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4925      	ldr	r1, [pc, #148]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]
 8004cbc:	e015      	b.n	8004cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbe:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <HAL_RCC_OscConfig+0x244>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fd fa52 	bl	800216c <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ccc:	f7fd fa4e 	bl	800216c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e187      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cde:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d036      	beq.n	8004d64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d016      	beq.n	8004d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <HAL_RCC_OscConfig+0x248>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fd fa32 	bl	800216c <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0c:	f7fd fa2e 	bl	800216c <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e167      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x200>
 8004d2a:	e01b      	b.n	8004d64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_RCC_OscConfig+0x248>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d32:	f7fd fa1b 	bl	800216c <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d38:	e00e      	b.n	8004d58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d3a:	f7fd fa17 	bl	800216c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d907      	bls.n	8004d58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e150      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	42470000 	.word	0x42470000
 8004d54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d58:	4b88      	ldr	r3, [pc, #544]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1ea      	bne.n	8004d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8097 	beq.w	8004ea0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d72:	2300      	movs	r3, #0
 8004d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d76:	4b81      	ldr	r3, [pc, #516]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10f      	bne.n	8004da2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]
 8004d86:	4b7d      	ldr	r3, [pc, #500]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	4a7c      	ldr	r2, [pc, #496]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d90:	6413      	str	r3, [r2, #64]	; 0x40
 8004d92:	4b7a      	ldr	r3, [pc, #488]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	60bb      	str	r3, [r7, #8]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da2:	4b77      	ldr	r3, [pc, #476]	; (8004f80 <HAL_RCC_OscConfig+0x474>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d118      	bne.n	8004de0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dae:	4b74      	ldr	r3, [pc, #464]	; (8004f80 <HAL_RCC_OscConfig+0x474>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a73      	ldr	r2, [pc, #460]	; (8004f80 <HAL_RCC_OscConfig+0x474>)
 8004db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dba:	f7fd f9d7 	bl	800216c <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc2:	f7fd f9d3 	bl	800216c <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e10c      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd4:	4b6a      	ldr	r3, [pc, #424]	; (8004f80 <HAL_RCC_OscConfig+0x474>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d106      	bne.n	8004df6 <HAL_RCC_OscConfig+0x2ea>
 8004de8:	4b64      	ldr	r3, [pc, #400]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4a63      	ldr	r2, [pc, #396]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	6713      	str	r3, [r2, #112]	; 0x70
 8004df4:	e01c      	b.n	8004e30 <HAL_RCC_OscConfig+0x324>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b05      	cmp	r3, #5
 8004dfc:	d10c      	bne.n	8004e18 <HAL_RCC_OscConfig+0x30c>
 8004dfe:	4b5f      	ldr	r3, [pc, #380]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	4a5e      	ldr	r2, [pc, #376]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e04:	f043 0304 	orr.w	r3, r3, #4
 8004e08:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0a:	4b5c      	ldr	r3, [pc, #368]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	4a5b      	ldr	r2, [pc, #364]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	6713      	str	r3, [r2, #112]	; 0x70
 8004e16:	e00b      	b.n	8004e30 <HAL_RCC_OscConfig+0x324>
 8004e18:	4b58      	ldr	r3, [pc, #352]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	4a57      	ldr	r2, [pc, #348]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	6713      	str	r3, [r2, #112]	; 0x70
 8004e24:	4b55      	ldr	r3, [pc, #340]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e28:	4a54      	ldr	r2, [pc, #336]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e2a:	f023 0304 	bic.w	r3, r3, #4
 8004e2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d015      	beq.n	8004e64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e38:	f7fd f998 	bl	800216c <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e40:	f7fd f994 	bl	800216c <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e0cb      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e56:	4b49      	ldr	r3, [pc, #292]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0ee      	beq.n	8004e40 <HAL_RCC_OscConfig+0x334>
 8004e62:	e014      	b.n	8004e8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e64:	f7fd f982 	bl	800216c <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e6c:	f7fd f97e 	bl	800216c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e0b5      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e82:	4b3e      	ldr	r3, [pc, #248]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ee      	bne.n	8004e6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e94:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	4a38      	ldr	r2, [pc, #224]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80a1 	beq.w	8004fec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eaa:	4b34      	ldr	r3, [pc, #208]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d05c      	beq.n	8004f70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d141      	bne.n	8004f42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ebe:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <HAL_RCC_OscConfig+0x478>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fd f952 	bl	800216c <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ecc:	f7fd f94e 	bl	800216c <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e087      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ede:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	019b      	lsls	r3, r3, #6
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	3b01      	subs	r3, #1
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	061b      	lsls	r3, r3, #24
 8004f0e:	491b      	ldr	r1, [pc, #108]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f14:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <HAL_RCC_OscConfig+0x478>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1a:	f7fd f927 	bl	800216c <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f22:	f7fd f923 	bl	800216c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e05c      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f34:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0f0      	beq.n	8004f22 <HAL_RCC_OscConfig+0x416>
 8004f40:	e054      	b.n	8004fec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <HAL_RCC_OscConfig+0x478>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fd f910 	bl	800216c <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f50:	f7fd f90c 	bl	800216c <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e045      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x444>
 8004f6e:	e03d      	b.n	8004fec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d107      	bne.n	8004f88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e038      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	40007000 	.word	0x40007000
 8004f84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f88:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <HAL_RCC_OscConfig+0x4ec>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d028      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d121      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d11a      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d111      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d107      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d001      	beq.n	8004fec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40023800 	.word	0x40023800

08004ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0cc      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b68      	ldr	r3, [pc, #416]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d90c      	bls.n	8005038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b65      	ldr	r3, [pc, #404]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005026:	4b63      	ldr	r3, [pc, #396]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d001      	beq.n	8005038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0b8      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d020      	beq.n	8005086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005050:	4b59      	ldr	r3, [pc, #356]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	4a58      	ldr	r2, [pc, #352]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800505a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005068:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4a52      	ldr	r2, [pc, #328]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005074:	4b50      	ldr	r3, [pc, #320]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	494d      	ldr	r1, [pc, #308]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d044      	beq.n	800511c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d107      	bne.n	80050aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509a:	4b47      	ldr	r3, [pc, #284]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d119      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e07f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d003      	beq.n	80050ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ba:	4b3f      	ldr	r3, [pc, #252]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e06f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ca:	4b3b      	ldr	r3, [pc, #236]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e067      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050da:	4b37      	ldr	r3, [pc, #220]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4934      	ldr	r1, [pc, #208]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ec:	f7fd f83e 	bl	800216c <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fd f83a 	bl	800216c <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e04f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 020c 	and.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	429a      	cmp	r2, r3
 800511a:	d1eb      	bne.n	80050f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d20c      	bcs.n	8005144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005132:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d001      	beq.n	8005144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e032      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005150:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4916      	ldr	r1, [pc, #88]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	490e      	ldr	r1, [pc, #56]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005182:	f000 f821 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8005186:	4602      	mov	r2, r0
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	490a      	ldr	r1, [pc, #40]	; (80051bc <HAL_RCC_ClockConfig+0x1c0>)
 8005194:	5ccb      	ldrb	r3, [r1, r3]
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <HAL_RCC_ClockConfig+0x1c4>)
 800519c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800519e:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <HAL_RCC_ClockConfig+0x1c8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fc fe6e 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40023c00 	.word	0x40023c00
 80051b8:	40023800 	.word	0x40023800
 80051bc:	0800eb1c 	.word	0x0800eb1c
 80051c0:	20000000 	.word	0x20000000
 80051c4:	20000004 	.word	0x20000004

080051c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051cc:	b094      	sub	sp, #80	; 0x50
 80051ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	647b      	str	r3, [r7, #68]	; 0x44
 80051d4:	2300      	movs	r3, #0
 80051d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d8:	2300      	movs	r3, #0
 80051da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051e0:	4b79      	ldr	r3, [pc, #484]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 030c 	and.w	r3, r3, #12
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d00d      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x40>
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	f200 80e1 	bhi.w	80053b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0x34>
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d003      	beq.n	8005202 <HAL_RCC_GetSysClockFreq+0x3a>
 80051fa:	e0db      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051fc:	4b73      	ldr	r3, [pc, #460]	; (80053cc <HAL_RCC_GetSysClockFreq+0x204>)
 80051fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005200:	e0db      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005202:	4b72      	ldr	r3, [pc, #456]	; (80053cc <HAL_RCC_GetSysClockFreq+0x204>)
 8005204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005206:	e0d8      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005208:	4b6f      	ldr	r3, [pc, #444]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005210:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005212:	4b6d      	ldr	r3, [pc, #436]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d063      	beq.n	80052e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800521e:	4b6a      	ldr	r3, [pc, #424]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	099b      	lsrs	r3, r3, #6
 8005224:	2200      	movs	r2, #0
 8005226:	63bb      	str	r3, [r7, #56]	; 0x38
 8005228:	63fa      	str	r2, [r7, #60]	; 0x3c
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005230:	633b      	str	r3, [r7, #48]	; 0x30
 8005232:	2300      	movs	r3, #0
 8005234:	637b      	str	r3, [r7, #52]	; 0x34
 8005236:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800523a:	4622      	mov	r2, r4
 800523c:	462b      	mov	r3, r5
 800523e:	f04f 0000 	mov.w	r0, #0
 8005242:	f04f 0100 	mov.w	r1, #0
 8005246:	0159      	lsls	r1, r3, #5
 8005248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800524c:	0150      	lsls	r0, r2, #5
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4621      	mov	r1, r4
 8005254:	1a51      	subs	r1, r2, r1
 8005256:	6139      	str	r1, [r7, #16]
 8005258:	4629      	mov	r1, r5
 800525a:	eb63 0301 	sbc.w	r3, r3, r1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800526c:	4659      	mov	r1, fp
 800526e:	018b      	lsls	r3, r1, #6
 8005270:	4651      	mov	r1, sl
 8005272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005276:	4651      	mov	r1, sl
 8005278:	018a      	lsls	r2, r1, #6
 800527a:	4651      	mov	r1, sl
 800527c:	ebb2 0801 	subs.w	r8, r2, r1
 8005280:	4659      	mov	r1, fp
 8005282:	eb63 0901 	sbc.w	r9, r3, r1
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800529a:	4690      	mov	r8, r2
 800529c:	4699      	mov	r9, r3
 800529e:	4623      	mov	r3, r4
 80052a0:	eb18 0303 	adds.w	r3, r8, r3
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	462b      	mov	r3, r5
 80052a8:	eb49 0303 	adc.w	r3, r9, r3
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052ba:	4629      	mov	r1, r5
 80052bc:	028b      	lsls	r3, r1, #10
 80052be:	4621      	mov	r1, r4
 80052c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052c4:	4621      	mov	r1, r4
 80052c6:	028a      	lsls	r2, r1, #10
 80052c8:	4610      	mov	r0, r2
 80052ca:	4619      	mov	r1, r3
 80052cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ce:	2200      	movs	r2, #0
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052d8:	f7fb faf8 	bl	80008cc <__aeabi_uldivmod>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4613      	mov	r3, r2
 80052e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052e4:	e058      	b.n	8005398 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052e6:	4b38      	ldr	r3, [pc, #224]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	099b      	lsrs	r3, r3, #6
 80052ec:	2200      	movs	r2, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	4611      	mov	r1, r2
 80052f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052f6:	623b      	str	r3, [r7, #32]
 80052f8:	2300      	movs	r3, #0
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
 80052fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005300:	4642      	mov	r2, r8
 8005302:	464b      	mov	r3, r9
 8005304:	f04f 0000 	mov.w	r0, #0
 8005308:	f04f 0100 	mov.w	r1, #0
 800530c:	0159      	lsls	r1, r3, #5
 800530e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005312:	0150      	lsls	r0, r2, #5
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4641      	mov	r1, r8
 800531a:	ebb2 0a01 	subs.w	sl, r2, r1
 800531e:	4649      	mov	r1, r9
 8005320:	eb63 0b01 	sbc.w	fp, r3, r1
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005330:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005334:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005338:	ebb2 040a 	subs.w	r4, r2, sl
 800533c:	eb63 050b 	sbc.w	r5, r3, fp
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	00eb      	lsls	r3, r5, #3
 800534a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800534e:	00e2      	lsls	r2, r4, #3
 8005350:	4614      	mov	r4, r2
 8005352:	461d      	mov	r5, r3
 8005354:	4643      	mov	r3, r8
 8005356:	18e3      	adds	r3, r4, r3
 8005358:	603b      	str	r3, [r7, #0]
 800535a:	464b      	mov	r3, r9
 800535c:	eb45 0303 	adc.w	r3, r5, r3
 8005360:	607b      	str	r3, [r7, #4]
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800536e:	4629      	mov	r1, r5
 8005370:	028b      	lsls	r3, r1, #10
 8005372:	4621      	mov	r1, r4
 8005374:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005378:	4621      	mov	r1, r4
 800537a:	028a      	lsls	r2, r1, #10
 800537c:	4610      	mov	r0, r2
 800537e:	4619      	mov	r1, r3
 8005380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005382:	2200      	movs	r2, #0
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	61fa      	str	r2, [r7, #28]
 8005388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800538c:	f7fb fa9e 	bl	80008cc <__aeabi_uldivmod>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4613      	mov	r3, r2
 8005396:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	3301      	adds	r3, #1
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80053a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053b2:	e002      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_RCC_GetSysClockFreq+0x204>)
 80053b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3750      	adds	r7, #80	; 0x50
 80053c0:	46bd      	mov	sp, r7
 80053c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c6:	bf00      	nop
 80053c8:	40023800 	.word	0x40023800
 80053cc:	00f42400 	.word	0x00f42400

080053d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d4:	4b03      	ldr	r3, [pc, #12]	; (80053e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053d6:	681b      	ldr	r3, [r3, #0]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000000 	.word	0x20000000

080053e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053ec:	f7ff fff0 	bl	80053d0 <HAL_RCC_GetHCLKFreq>
 80053f0:	4602      	mov	r2, r0
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	0a9b      	lsrs	r3, r3, #10
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	4903      	ldr	r1, [pc, #12]	; (800540c <HAL_RCC_GetPCLK1Freq+0x24>)
 80053fe:	5ccb      	ldrb	r3, [r1, r3]
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005404:	4618      	mov	r0, r3
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40023800 	.word	0x40023800
 800540c:	0800eb2c 	.word	0x0800eb2c

08005410 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	220f      	movs	r2, #15
 800541e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005420:	4b12      	ldr	r3, [pc, #72]	; (800546c <HAL_RCC_GetClockConfig+0x5c>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 0203 	and.w	r2, r3, #3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <HAL_RCC_GetClockConfig+0x5c>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <HAL_RCC_GetClockConfig+0x5c>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCC_GetClockConfig+0x5c>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	08db      	lsrs	r3, r3, #3
 800544a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005452:	4b07      	ldr	r3, [pc, #28]	; (8005470 <HAL_RCC_GetClockConfig+0x60>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0207 	and.w	r2, r3, #7
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	601a      	str	r2, [r3, #0]
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40023800 	.word	0x40023800
 8005470:	40023c00 	.word	0x40023c00

08005474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e041      	b.n	800550a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fc fc96 	bl	8001dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f000 fd20 	bl	8005ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d001      	beq.n	800552c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e03c      	b.n	80055a6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1e      	ldr	r2, [pc, #120]	; (80055b4 <HAL_TIM_Base_Start+0xa0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d018      	beq.n	8005570 <HAL_TIM_Base_Start+0x5c>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005546:	d013      	beq.n	8005570 <HAL_TIM_Base_Start+0x5c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1a      	ldr	r2, [pc, #104]	; (80055b8 <HAL_TIM_Base_Start+0xa4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00e      	beq.n	8005570 <HAL_TIM_Base_Start+0x5c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a19      	ldr	r2, [pc, #100]	; (80055bc <HAL_TIM_Base_Start+0xa8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d009      	beq.n	8005570 <HAL_TIM_Base_Start+0x5c>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <HAL_TIM_Base_Start+0xac>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_TIM_Base_Start+0x5c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <HAL_TIM_Base_Start+0xb0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d111      	bne.n	8005594 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b06      	cmp	r3, #6
 8005580:	d010      	beq.n	80055a4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0201 	orr.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005592:	e007      	b.n	80055a4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40000800 	.word	0x40000800
 80055c0:	40000c00 	.word	0x40000c00
 80055c4:	40014000 	.word	0x40014000

080055c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d001      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e044      	b.n	800566a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1e      	ldr	r2, [pc, #120]	; (8005678 <HAL_TIM_Base_Start_IT+0xb0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d018      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0x6c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560a:	d013      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0x6c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1a      	ldr	r2, [pc, #104]	; (800567c <HAL_TIM_Base_Start_IT+0xb4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00e      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0x6c>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a19      	ldr	r2, [pc, #100]	; (8005680 <HAL_TIM_Base_Start_IT+0xb8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d009      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0x6c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a17      	ldr	r2, [pc, #92]	; (8005684 <HAL_TIM_Base_Start_IT+0xbc>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0x6c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a16      	ldr	r2, [pc, #88]	; (8005688 <HAL_TIM_Base_Start_IT+0xc0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d111      	bne.n	8005658 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b06      	cmp	r3, #6
 8005644:	d010      	beq.n	8005668 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005656:	e007      	b.n	8005668 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40010000 	.word	0x40010000
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800
 8005684:	40000c00 	.word	0x40000c00
 8005688:	40014000 	.word	0x40014000

0800568c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6a1a      	ldr	r2, [r3, #32]
 80056aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10f      	bne.n	80056d4 <HAL_TIM_Base_Stop_IT+0x48>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6a1a      	ldr	r2, [r3, #32]
 80056ba:	f240 4344 	movw	r3, #1092	; 0x444
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d107      	bne.n	80056d4 <HAL_TIM_Base_Stop_IT+0x48>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0201 	bic.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e041      	b.n	8005780 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d106      	bne.n	8005716 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f839 	bl	8005788 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3304      	adds	r3, #4
 8005726:	4619      	mov	r1, r3
 8005728:	4610      	mov	r0, r2
 800572a:	f000 fbe5 	bl	8005ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d109      	bne.n	80057c4 <HAL_TIM_PWM_Start_IT+0x28>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	bf14      	ite	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	2300      	moveq	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	e022      	b.n	800580a <HAL_TIM_PWM_Start_IT+0x6e>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d109      	bne.n	80057de <HAL_TIM_PWM_Start_IT+0x42>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	bf14      	ite	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	2300      	moveq	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	e015      	b.n	800580a <HAL_TIM_PWM_Start_IT+0x6e>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d109      	bne.n	80057f8 <HAL_TIM_PWM_Start_IT+0x5c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	e008      	b.n	800580a <HAL_TIM_PWM_Start_IT+0x6e>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e0b3      	b.n	800597a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <HAL_TIM_PWM_Start_IT+0x86>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005820:	e013      	b.n	800584a <HAL_TIM_PWM_Start_IT+0xae>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b04      	cmp	r3, #4
 8005826:	d104      	bne.n	8005832 <HAL_TIM_PWM_Start_IT+0x96>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005830:	e00b      	b.n	800584a <HAL_TIM_PWM_Start_IT+0xae>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b08      	cmp	r3, #8
 8005836:	d104      	bne.n	8005842 <HAL_TIM_PWM_Start_IT+0xa6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005840:	e003      	b.n	800584a <HAL_TIM_PWM_Start_IT+0xae>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b0c      	cmp	r3, #12
 800584e:	d841      	bhi.n	80058d4 <HAL_TIM_PWM_Start_IT+0x138>
 8005850:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	0800588d 	.word	0x0800588d
 800585c:	080058d5 	.word	0x080058d5
 8005860:	080058d5 	.word	0x080058d5
 8005864:	080058d5 	.word	0x080058d5
 8005868:	0800589f 	.word	0x0800589f
 800586c:	080058d5 	.word	0x080058d5
 8005870:	080058d5 	.word	0x080058d5
 8005874:	080058d5 	.word	0x080058d5
 8005878:	080058b1 	.word	0x080058b1
 800587c:	080058d5 	.word	0x080058d5
 8005880:	080058d5 	.word	0x080058d5
 8005884:	080058d5 	.word	0x080058d5
 8005888:	080058c3 	.word	0x080058c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0202 	orr.w	r2, r2, #2
 800589a:	60da      	str	r2, [r3, #12]
      break;
 800589c:	e01d      	b.n	80058da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0204 	orr.w	r2, r2, #4
 80058ac:	60da      	str	r2, [r3, #12]
      break;
 80058ae:	e014      	b.n	80058da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0208 	orr.w	r2, r2, #8
 80058be:	60da      	str	r2, [r3, #12]
      break;
 80058c0:	e00b      	b.n	80058da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0210 	orr.w	r2, r2, #16
 80058d0:	60da      	str	r2, [r3, #12]
      break;
 80058d2:	e002      	b.n	80058da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
      break;
 80058d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d14b      	bne.n	8005978 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2201      	movs	r2, #1
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fdab 	bl	8006444 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a24      	ldr	r2, [pc, #144]	; (8005984 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d107      	bne.n	8005908 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005906:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d018      	beq.n	8005944 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591a:	d013      	beq.n	8005944 <HAL_TIM_PWM_Start_IT+0x1a8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a19      	ldr	r2, [pc, #100]	; (8005988 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00e      	beq.n	8005944 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a18      	ldr	r2, [pc, #96]	; (800598c <HAL_TIM_PWM_Start_IT+0x1f0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d009      	beq.n	8005944 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a16      	ldr	r2, [pc, #88]	; (8005990 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <HAL_TIM_PWM_Start_IT+0x1a8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a15      	ldr	r2, [pc, #84]	; (8005994 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d111      	bne.n	8005968 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b06      	cmp	r3, #6
 8005954:	d010      	beq.n	8005978 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	e007      	b.n	8005978 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	40010000 	.word	0x40010000
 8005988:	40000400 	.word	0x40000400
 800598c:	40000800 	.word	0x40000800
 8005990:	40000c00 	.word	0x40000c00
 8005994:	40014000 	.word	0x40014000

08005998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d122      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d11b      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0202 	mvn.w	r2, #2
 80059c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa77 	bl	8005ece <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa69 	bl	8005eba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7fb fac5 	bl	8000f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d122      	bne.n	8005a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d11b      	bne.n	8005a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0204 	mvn.w	r2, #4
 8005a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa4d 	bl	8005ece <HAL_TIM_IC_CaptureCallback>
 8005a34:	e005      	b.n	8005a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa3f 	bl	8005eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fb fa9b 	bl	8000f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d122      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d11b      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0208 	mvn.w	r2, #8
 8005a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2204      	movs	r2, #4
 8005a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fa23 	bl	8005ece <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fa15 	bl	8005eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7fb fa71 	bl	8000f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d122      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d11b      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0210 	mvn.w	r2, #16
 8005ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f9f9 	bl	8005ece <HAL_TIM_IC_CaptureCallback>
 8005adc:	e005      	b.n	8005aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f9eb 	bl	8005eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7fb fa47 	bl	8000f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d10e      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d107      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0201 	mvn.w	r2, #1
 8005b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fc f890 	bl	8001c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b26:	2b80      	cmp	r3, #128	; 0x80
 8005b28:	d10e      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b34:	2b80      	cmp	r3, #128	; 0x80
 8005b36:	d107      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fd1c 	bl	8006580 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b52:	2b40      	cmp	r3, #64	; 0x40
 8005b54:	d10e      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b60:	2b40      	cmp	r3, #64	; 0x40
 8005b62:	d107      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f9b7 	bl	8005ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	d10e      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d107      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0220 	mvn.w	r2, #32
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fce6 	bl	800656c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d101      	bne.n	8005bc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e0ae      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b0c      	cmp	r3, #12
 8005bd2:	f200 809f 	bhi.w	8005d14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bd6:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005c11 	.word	0x08005c11
 8005be0:	08005d15 	.word	0x08005d15
 8005be4:	08005d15 	.word	0x08005d15
 8005be8:	08005d15 	.word	0x08005d15
 8005bec:	08005c51 	.word	0x08005c51
 8005bf0:	08005d15 	.word	0x08005d15
 8005bf4:	08005d15 	.word	0x08005d15
 8005bf8:	08005d15 	.word	0x08005d15
 8005bfc:	08005c93 	.word	0x08005c93
 8005c00:	08005d15 	.word	0x08005d15
 8005c04:	08005d15 	.word	0x08005d15
 8005c08:	08005d15 	.word	0x08005d15
 8005c0c:	08005cd3 	.word	0x08005cd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 f9ee 	bl	8005ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0208 	orr.w	r2, r2, #8
 8005c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0204 	bic.w	r2, r2, #4
 8005c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6999      	ldr	r1, [r3, #24]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	619a      	str	r2, [r3, #24]
      break;
 8005c4e:	e064      	b.n	8005d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fa34 	bl	80060c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6999      	ldr	r1, [r3, #24]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	021a      	lsls	r2, r3, #8
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	619a      	str	r2, [r3, #24]
      break;
 8005c90:	e043      	b.n	8005d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fa7f 	bl	800619c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0208 	orr.w	r2, r2, #8
 8005cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69da      	ldr	r2, [r3, #28]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0204 	bic.w	r2, r2, #4
 8005cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69d9      	ldr	r1, [r3, #28]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	61da      	str	r2, [r3, #28]
      break;
 8005cd0:	e023      	b.n	8005d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fac9 	bl	8006270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69d9      	ldr	r1, [r3, #28]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	021a      	lsls	r2, r3, #8
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	61da      	str	r2, [r3, #28]
      break;
 8005d12:	e002      	b.n	8005d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	75fb      	strb	r3, [r7, #23]
      break;
 8005d18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_TIM_ConfigClockSource+0x1c>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e0b4      	b.n	8005eb2 <HAL_TIM_ConfigClockSource+0x186>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d80:	d03e      	beq.n	8005e00 <HAL_TIM_ConfigClockSource+0xd4>
 8005d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d86:	f200 8087 	bhi.w	8005e98 <HAL_TIM_ConfigClockSource+0x16c>
 8005d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8e:	f000 8086 	beq.w	8005e9e <HAL_TIM_ConfigClockSource+0x172>
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d96:	d87f      	bhi.n	8005e98 <HAL_TIM_ConfigClockSource+0x16c>
 8005d98:	2b70      	cmp	r3, #112	; 0x70
 8005d9a:	d01a      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0xa6>
 8005d9c:	2b70      	cmp	r3, #112	; 0x70
 8005d9e:	d87b      	bhi.n	8005e98 <HAL_TIM_ConfigClockSource+0x16c>
 8005da0:	2b60      	cmp	r3, #96	; 0x60
 8005da2:	d050      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x11a>
 8005da4:	2b60      	cmp	r3, #96	; 0x60
 8005da6:	d877      	bhi.n	8005e98 <HAL_TIM_ConfigClockSource+0x16c>
 8005da8:	2b50      	cmp	r3, #80	; 0x50
 8005daa:	d03c      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0xfa>
 8005dac:	2b50      	cmp	r3, #80	; 0x50
 8005dae:	d873      	bhi.n	8005e98 <HAL_TIM_ConfigClockSource+0x16c>
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	d058      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x13a>
 8005db4:	2b40      	cmp	r3, #64	; 0x40
 8005db6:	d86f      	bhi.n	8005e98 <HAL_TIM_ConfigClockSource+0x16c>
 8005db8:	2b30      	cmp	r3, #48	; 0x30
 8005dba:	d064      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x15a>
 8005dbc:	2b30      	cmp	r3, #48	; 0x30
 8005dbe:	d86b      	bhi.n	8005e98 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d060      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d867      	bhi.n	8005e98 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d05c      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x15a>
 8005dcc:	2b10      	cmp	r3, #16
 8005dce:	d05a      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x15a>
 8005dd0:	e062      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	6899      	ldr	r1, [r3, #8]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f000 fb0f 	bl	8006404 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	609a      	str	r2, [r3, #8]
      break;
 8005dfe:	e04f      	b.n	8005ea0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6899      	ldr	r1, [r3, #8]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f000 faf8 	bl	8006404 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e22:	609a      	str	r2, [r3, #8]
      break;
 8005e24:	e03c      	b.n	8005ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6859      	ldr	r1, [r3, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	461a      	mov	r2, r3
 8005e34:	f000 fa6c 	bl	8006310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2150      	movs	r1, #80	; 0x50
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fac5 	bl	80063ce <TIM_ITRx_SetConfig>
      break;
 8005e44:	e02c      	b.n	8005ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6859      	ldr	r1, [r3, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f000 fa8b 	bl	800636e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2160      	movs	r1, #96	; 0x60
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fab5 	bl	80063ce <TIM_ITRx_SetConfig>
      break;
 8005e64:	e01c      	b.n	8005ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6859      	ldr	r1, [r3, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f000 fa4c 	bl	8006310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2140      	movs	r1, #64	; 0x40
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 faa5 	bl	80063ce <TIM_ITRx_SetConfig>
      break;
 8005e84:	e00c      	b.n	8005ea0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4610      	mov	r0, r2
 8005e92:	f000 fa9c 	bl	80063ce <TIM_ITRx_SetConfig>
      break;
 8005e96:	e003      	b.n	8005ea0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e9c:	e000      	b.n	8005ea0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a34      	ldr	r2, [pc, #208]	; (8005fdc <TIM_Base_SetConfig+0xe4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00f      	beq.n	8005f30 <TIM_Base_SetConfig+0x38>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f16:	d00b      	beq.n	8005f30 <TIM_Base_SetConfig+0x38>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a31      	ldr	r2, [pc, #196]	; (8005fe0 <TIM_Base_SetConfig+0xe8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <TIM_Base_SetConfig+0x38>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a30      	ldr	r2, [pc, #192]	; (8005fe4 <TIM_Base_SetConfig+0xec>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_Base_SetConfig+0x38>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a2f      	ldr	r2, [pc, #188]	; (8005fe8 <TIM_Base_SetConfig+0xf0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d108      	bne.n	8005f42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a25      	ldr	r2, [pc, #148]	; (8005fdc <TIM_Base_SetConfig+0xe4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d01b      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f50:	d017      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a22      	ldr	r2, [pc, #136]	; (8005fe0 <TIM_Base_SetConfig+0xe8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d013      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a21      	ldr	r2, [pc, #132]	; (8005fe4 <TIM_Base_SetConfig+0xec>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00f      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a20      	ldr	r2, [pc, #128]	; (8005fe8 <TIM_Base_SetConfig+0xf0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00b      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a1f      	ldr	r2, [pc, #124]	; (8005fec <TIM_Base_SetConfig+0xf4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d007      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <TIM_Base_SetConfig+0xf8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_Base_SetConfig+0x8a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <TIM_Base_SetConfig+0xfc>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d108      	bne.n	8005f94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <TIM_Base_SetConfig+0xe4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d103      	bne.n	8005fc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	615a      	str	r2, [r3, #20]
}
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	40000400 	.word	0x40000400
 8005fe4:	40000800 	.word	0x40000800
 8005fe8:	40000c00 	.word	0x40000c00
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40014800 	.word	0x40014800

08005ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	f023 0201 	bic.w	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0303 	bic.w	r3, r3, #3
 800602e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 0302 	bic.w	r3, r3, #2
 8006040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a1c      	ldr	r2, [pc, #112]	; (80060c0 <TIM_OC1_SetConfig+0xc8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d10c      	bne.n	800606e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f023 0308 	bic.w	r3, r3, #8
 800605a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f023 0304 	bic.w	r3, r3, #4
 800606c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <TIM_OC1_SetConfig+0xc8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d111      	bne.n	800609a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800607c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	621a      	str	r2, [r3, #32]
}
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40010000 	.word	0x40010000

080060c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f023 0210 	bic.w	r2, r3, #16
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f023 0320 	bic.w	r3, r3, #32
 800610e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a1e      	ldr	r2, [pc, #120]	; (8006198 <TIM_OC2_SetConfig+0xd4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d10d      	bne.n	8006140 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800612a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a15      	ldr	r2, [pc, #84]	; (8006198 <TIM_OC2_SetConfig+0xd4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d113      	bne.n	8006170 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800614e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40010000 	.word	0x40010000

0800619c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0303 	bic.w	r3, r3, #3
 80061d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1d      	ldr	r2, [pc, #116]	; (800626c <TIM_OC3_SetConfig+0xd0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d10d      	bne.n	8006216 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006200:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a14      	ldr	r2, [pc, #80]	; (800626c <TIM_OC3_SetConfig+0xd0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d113      	bne.n	8006246 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800622c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	621a      	str	r2, [r3, #32]
}
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	40010000 	.word	0x40010000

08006270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	031b      	lsls	r3, r3, #12
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a10      	ldr	r2, [pc, #64]	; (800630c <TIM_OC4_SetConfig+0x9c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d109      	bne.n	80062e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	019b      	lsls	r3, r3, #6
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	621a      	str	r2, [r3, #32]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40010000 	.word	0x40010000

08006310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	f023 0201 	bic.w	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800633a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f023 030a 	bic.w	r3, r3, #10
 800634c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	621a      	str	r2, [r3, #32]
}
 8006362:	bf00      	nop
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800636e:	b480      	push	{r7}
 8006370:	b087      	sub	sp, #28
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	f023 0210 	bic.w	r2, r3, #16
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	031b      	lsls	r3, r3, #12
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	bf00      	nop
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f043 0307 	orr.w	r3, r3, #7
 80063f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	609a      	str	r2, [r3, #8]
}
 80063f8:	bf00      	nop
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800641e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	021a      	lsls	r2, r3, #8
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	431a      	orrs	r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4313      	orrs	r3, r2
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	609a      	str	r2, [r3, #8]
}
 8006438:	bf00      	nop
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f003 031f 	and.w	r3, r3, #31
 8006456:	2201      	movs	r2, #1
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a1a      	ldr	r2, [r3, #32]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	43db      	mvns	r3, r3
 8006466:	401a      	ands	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a1a      	ldr	r2, [r3, #32]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f003 031f 	and.w	r3, r3, #31
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	fa01 f303 	lsl.w	r3, r1, r3
 800647c:	431a      	orrs	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e050      	b.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1c      	ldr	r2, [pc, #112]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d018      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f4:	d013      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a18      	ldr	r2, [pc, #96]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00e      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a16      	ldr	r2, [pc, #88]	; (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d009      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a15      	ldr	r2, [pc, #84]	; (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d004      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a13      	ldr	r2, [pc, #76]	; (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d10c      	bne.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	4313      	orrs	r3, r2
 800652e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	40010000 	.word	0x40010000
 800655c:	40000400 	.word	0x40000400
 8006560:	40000800 	.word	0x40000800
 8006564:	40000c00 	.word	0x40000c00
 8006568:	40014000 	.word	0x40014000

0800656c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006594:	b084      	sub	sp, #16
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	f107 001c 	add.w	r0, r7, #28
 80065a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d122      	bne.n	80065f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80065c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d105      	bne.n	80065e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 fbee 	bl	8007dc8 <USB_CoreReset>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73fb      	strb	r3, [r7, #15]
 80065f0:	e01a      	b.n	8006628 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 fbe2 	bl	8007dc8 <USB_CoreReset>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	639a      	str	r2, [r3, #56]	; 0x38
 800661a:	e005      	b.n	8006628 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	2b01      	cmp	r3, #1
 800662c:	d10b      	bne.n	8006646 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f043 0206 	orr.w	r2, r3, #6
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f043 0220 	orr.w	r2, r3, #32
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006646:	7bfb      	ldrb	r3, [r7, #15]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006652:	b004      	add	sp, #16
 8006654:	4770      	bx	lr
	...

08006658 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	2b02      	cmp	r3, #2
 800666a:	d165      	bne.n	8006738 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4a41      	ldr	r2, [pc, #260]	; (8006774 <USB_SetTurnaroundTime+0x11c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d906      	bls.n	8006682 <USB_SetTurnaroundTime+0x2a>
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4a40      	ldr	r2, [pc, #256]	; (8006778 <USB_SetTurnaroundTime+0x120>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d202      	bcs.n	8006682 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800667c:	230f      	movs	r3, #15
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	e062      	b.n	8006748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	4a3c      	ldr	r2, [pc, #240]	; (8006778 <USB_SetTurnaroundTime+0x120>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d306      	bcc.n	8006698 <USB_SetTurnaroundTime+0x40>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	4a3b      	ldr	r2, [pc, #236]	; (800677c <USB_SetTurnaroundTime+0x124>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d202      	bcs.n	8006698 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006692:	230e      	movs	r3, #14
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	e057      	b.n	8006748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4a38      	ldr	r2, [pc, #224]	; (800677c <USB_SetTurnaroundTime+0x124>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d306      	bcc.n	80066ae <USB_SetTurnaroundTime+0x56>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4a37      	ldr	r2, [pc, #220]	; (8006780 <USB_SetTurnaroundTime+0x128>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d202      	bcs.n	80066ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066a8:	230d      	movs	r3, #13
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	e04c      	b.n	8006748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4a33      	ldr	r2, [pc, #204]	; (8006780 <USB_SetTurnaroundTime+0x128>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d306      	bcc.n	80066c4 <USB_SetTurnaroundTime+0x6c>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	4a32      	ldr	r2, [pc, #200]	; (8006784 <USB_SetTurnaroundTime+0x12c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d802      	bhi.n	80066c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066be:	230c      	movs	r3, #12
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	e041      	b.n	8006748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4a2f      	ldr	r2, [pc, #188]	; (8006784 <USB_SetTurnaroundTime+0x12c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d906      	bls.n	80066da <USB_SetTurnaroundTime+0x82>
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4a2e      	ldr	r2, [pc, #184]	; (8006788 <USB_SetTurnaroundTime+0x130>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d802      	bhi.n	80066da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066d4:	230b      	movs	r3, #11
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	e036      	b.n	8006748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4a2a      	ldr	r2, [pc, #168]	; (8006788 <USB_SetTurnaroundTime+0x130>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d906      	bls.n	80066f0 <USB_SetTurnaroundTime+0x98>
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4a29      	ldr	r2, [pc, #164]	; (800678c <USB_SetTurnaroundTime+0x134>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d802      	bhi.n	80066f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066ea:	230a      	movs	r3, #10
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	e02b      	b.n	8006748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4a26      	ldr	r2, [pc, #152]	; (800678c <USB_SetTurnaroundTime+0x134>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d906      	bls.n	8006706 <USB_SetTurnaroundTime+0xae>
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4a25      	ldr	r2, [pc, #148]	; (8006790 <USB_SetTurnaroundTime+0x138>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d202      	bcs.n	8006706 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006700:	2309      	movs	r3, #9
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	e020      	b.n	8006748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4a21      	ldr	r2, [pc, #132]	; (8006790 <USB_SetTurnaroundTime+0x138>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d306      	bcc.n	800671c <USB_SetTurnaroundTime+0xc4>
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4a20      	ldr	r2, [pc, #128]	; (8006794 <USB_SetTurnaroundTime+0x13c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d802      	bhi.n	800671c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006716:	2308      	movs	r3, #8
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	e015      	b.n	8006748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4a1d      	ldr	r2, [pc, #116]	; (8006794 <USB_SetTurnaroundTime+0x13c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d906      	bls.n	8006732 <USB_SetTurnaroundTime+0xda>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4a1c      	ldr	r2, [pc, #112]	; (8006798 <USB_SetTurnaroundTime+0x140>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d202      	bcs.n	8006732 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800672c:	2307      	movs	r3, #7
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	e00a      	b.n	8006748 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006732:	2306      	movs	r3, #6
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	e007      	b.n	8006748 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d102      	bne.n	8006744 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800673e:	2309      	movs	r3, #9
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	e001      	b.n	8006748 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006744:	2309      	movs	r3, #9
 8006746:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	029b      	lsls	r3, r3, #10
 800675c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006760:	431a      	orrs	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	371c      	adds	r7, #28
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	00d8acbf 	.word	0x00d8acbf
 8006778:	00e4e1c0 	.word	0x00e4e1c0
 800677c:	00f42400 	.word	0x00f42400
 8006780:	01067380 	.word	0x01067380
 8006784:	011a499f 	.word	0x011a499f
 8006788:	01312cff 	.word	0x01312cff
 800678c:	014ca43f 	.word	0x014ca43f
 8006790:	016e3600 	.word	0x016e3600
 8006794:	01a6ab1f 	.word	0x01a6ab1f
 8006798:	01e84800 	.word	0x01e84800

0800679c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f043 0201 	orr.w	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f023 0201 	bic.w	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d115      	bne.n	800682e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800680e:	2001      	movs	r0, #1
 8006810:	f7fb fcb8 	bl	8002184 <HAL_Delay>
      ms++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3301      	adds	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fa45 	bl	8007caa <USB_GetMode>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d01e      	beq.n	8006864 <USB_SetCurrentMode+0x84>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b31      	cmp	r3, #49	; 0x31
 800682a:	d9f0      	bls.n	800680e <USB_SetCurrentMode+0x2e>
 800682c:	e01a      	b.n	8006864 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d115      	bne.n	8006860 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006840:	2001      	movs	r0, #1
 8006842:	f7fb fc9f 	bl	8002184 <HAL_Delay>
      ms++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3301      	adds	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f001 fa2c 	bl	8007caa <USB_GetMode>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <USB_SetCurrentMode+0x84>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b31      	cmp	r3, #49	; 0x31
 800685c:	d9f0      	bls.n	8006840 <USB_SetCurrentMode+0x60>
 800685e:	e001      	b.n	8006864 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e005      	b.n	8006870 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b32      	cmp	r3, #50	; 0x32
 8006868:	d101      	bne.n	800686e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006878:	b084      	sub	sp, #16
 800687a:	b580      	push	{r7, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006892:	2300      	movs	r3, #0
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	e009      	b.n	80068ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	3340      	adds	r3, #64	; 0x40
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	2200      	movs	r2, #0
 80068a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3301      	adds	r3, #1
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b0e      	cmp	r3, #14
 80068b0:	d9f2      	bls.n	8006898 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11c      	bne.n	80068f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068c6:	f043 0302 	orr.w	r3, r3, #2
 80068ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
 80068f0:	e00b      	b.n	800690a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006910:	461a      	mov	r2, r3
 8006912:	2300      	movs	r3, #0
 8006914:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691c:	4619      	mov	r1, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006924:	461a      	mov	r2, r3
 8006926:	680b      	ldr	r3, [r1, #0]
 8006928:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10c      	bne.n	800694a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006936:	2100      	movs	r1, #0
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f965 	bl	8006c08 <USB_SetDevSpeed>
 800693e:	e008      	b.n	8006952 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006940:	2101      	movs	r1, #1
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f960 	bl	8006c08 <USB_SetDevSpeed>
 8006948:	e003      	b.n	8006952 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800694a:	2103      	movs	r1, #3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f95b 	bl	8006c08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006952:	2110      	movs	r1, #16
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f8f3 	bl	8006b40 <USB_FlushTxFifo>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f91f 	bl	8006ba8 <USB_FlushRxFifo>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697a:	461a      	mov	r2, r3
 800697c:	2300      	movs	r3, #0
 800697e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006986:	461a      	mov	r2, r3
 8006988:	2300      	movs	r3, #0
 800698a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006992:	461a      	mov	r2, r3
 8006994:	2300      	movs	r3, #0
 8006996:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	e043      	b.n	8006a26 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b4:	d118      	bne.n	80069e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c8:	461a      	mov	r2, r3
 80069ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	e013      	b.n	80069fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069de:	461a      	mov	r2, r3
 80069e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	e008      	b.n	80069fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f4:	461a      	mov	r2, r3
 80069f6:	2300      	movs	r3, #0
 80069f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	461a      	mov	r2, r3
 8006a08:	2300      	movs	r3, #0
 8006a0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	3301      	adds	r3, #1
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d3b7      	bcc.n	800699e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a2e:	2300      	movs	r3, #0
 8006a30:	613b      	str	r3, [r7, #16]
 8006a32:	e043      	b.n	8006abc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a4a:	d118      	bne.n	8006a7e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	e013      	b.n	8006a90 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	461a      	mov	r2, r3
 8006a76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	e008      	b.n	8006a90 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ab4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d3b7      	bcc.n	8006a34 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ae4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d105      	bne.n	8006af8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f043 0210 	orr.w	r2, r3, #16
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699a      	ldr	r2, [r3, #24]
 8006afc:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <USB_DevInit+0x2c4>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f043 0208 	orr.w	r2, r3, #8
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d107      	bne.n	8006b2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b24:	f043 0304 	orr.w	r3, r3, #4
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b38:	b004      	add	sp, #16
 8006b3a:	4770      	bx	lr
 8006b3c:	803c3800 	.word	0x803c3800

08006b40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3301      	adds	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <USB_FlushTxFifo+0x64>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d901      	bls.n	8006b60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e01b      	b.n	8006b98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	daf2      	bge.n	8006b4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	019b      	lsls	r3, r3, #6
 8006b70:	f043 0220 	orr.w	r2, r3, #32
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a08      	ldr	r2, [pc, #32]	; (8006ba4 <USB_FlushTxFifo+0x64>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d901      	bls.n	8006b8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e006      	b.n	8006b98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d0f0      	beq.n	8006b78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	00030d40 	.word	0x00030d40

08006ba8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a11      	ldr	r2, [pc, #68]	; (8006c04 <USB_FlushRxFifo+0x5c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d901      	bls.n	8006bc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e018      	b.n	8006bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	daf2      	bge.n	8006bb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2210      	movs	r2, #16
 8006bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4a08      	ldr	r2, [pc, #32]	; (8006c04 <USB_FlushRxFifo+0x5c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d901      	bls.n	8006bea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e006      	b.n	8006bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d0f0      	beq.n	8006bd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	00030d40 	.word	0x00030d40

08006c08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	68f9      	ldr	r1, [r7, #12]
 8006c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b087      	sub	sp, #28
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f003 0306 	and.w	r3, r3, #6
 8006c52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d102      	bne.n	8006c60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	75fb      	strb	r3, [r7, #23]
 8006c5e:	e00a      	b.n	8006c76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d002      	beq.n	8006c6c <USB_GetDevSpeed+0x32>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b06      	cmp	r3, #6
 8006c6a:	d102      	bne.n	8006c72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	75fb      	strb	r3, [r7, #23]
 8006c70:	e001      	b.n	8006c76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c72:	230f      	movs	r3, #15
 8006c74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d13a      	bne.n	8006d16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	68f9      	ldr	r1, [r7, #12]
 8006cba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d155      	bne.n	8006d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	791b      	ldrb	r3, [r3, #4]
 8006cf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	059b      	lsls	r3, r3, #22
 8006cfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	0151      	lsls	r1, r2, #5
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	440a      	add	r2, r1
 8006d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	e036      	b.n	8006d84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1c:	69da      	ldr	r2, [r3, #28]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	2101      	movs	r1, #1
 8006d28:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2c:	041b      	lsls	r3, r3, #16
 8006d2e:	68f9      	ldr	r1, [r7, #12]
 8006d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d34:	4313      	orrs	r3, r2
 8006d36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d11a      	bne.n	8006d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	791b      	ldrb	r3, [r3, #4]
 8006d68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
	...

08006d94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	785b      	ldrb	r3, [r3, #1]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d161      	bne.n	8006e74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dc6:	d11f      	bne.n	8006e08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	0151      	lsls	r1, r2, #5
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	440a      	add	r2, r1
 8006dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006de6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	0151      	lsls	r1, r2, #5
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	440a      	add	r2, r1
 8006dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	2101      	movs	r1, #1
 8006e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	43db      	mvns	r3, r3
 8006e22:	68f9      	ldr	r1, [r7, #12]
 8006e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e28:	4013      	ands	r3, r2
 8006e2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e32:	69da      	ldr	r2, [r3, #28]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	f003 030f 	and.w	r3, r3, #15
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	43db      	mvns	r3, r3
 8006e46:	68f9      	ldr	r1, [r7, #12]
 8006e48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	0159      	lsls	r1, r3, #5
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	440b      	add	r3, r1
 8006e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4b35      	ldr	r3, [pc, #212]	; (8006f44 <USB_DeactivateEndpoint+0x1b0>)
 8006e6e:	4013      	ands	r3, r2
 8006e70:	600b      	str	r3, [r1, #0]
 8006e72:	e060      	b.n	8006f36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e8a:	d11f      	bne.n	8006ecc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006eaa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	0151      	lsls	r1, r2, #5
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	2101      	movs	r1, #1
 8006ede:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee2:	041b      	lsls	r3, r3, #16
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	68f9      	ldr	r1, [r7, #12]
 8006ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eec:	4013      	ands	r3, r2
 8006eee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef6:	69da      	ldr	r2, [r3, #28]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	2101      	movs	r1, #1
 8006f02:	fa01 f303 	lsl.w	r3, r1, r3
 8006f06:	041b      	lsls	r3, r3, #16
 8006f08:	43db      	mvns	r3, r3
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f10:	4013      	ands	r3, r2
 8006f12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	0159      	lsls	r1, r3, #5
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	440b      	add	r3, r1
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <USB_DeactivateEndpoint+0x1b4>)
 8006f32:	4013      	ands	r3, r2
 8006f34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	ec337800 	.word	0xec337800
 8006f48:	eff37800 	.word	0xeff37800

08006f4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08a      	sub	sp, #40	; 0x28
 8006f50:	af02      	add	r7, sp, #8
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	4613      	mov	r3, r2
 8006f58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	f040 815c 	bne.w	8007226 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d132      	bne.n	8006fdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	0151      	lsls	r1, r2, #5
 8006f88:	69fa      	ldr	r2, [r7, #28]
 8006f8a:	440a      	add	r2, r1
 8006f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	0151      	lsls	r1, r2, #5
 8006fac:	69fa      	ldr	r2, [r7, #28]
 8006fae:	440a      	add	r2, r1
 8006fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	0151      	lsls	r1, r2, #5
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	440a      	add	r2, r1
 8006fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd4:	0cdb      	lsrs	r3, r3, #19
 8006fd6:	04db      	lsls	r3, r3, #19
 8006fd8:	6113      	str	r3, [r2, #16]
 8006fda:	e074      	b.n	80070c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	0151      	lsls	r1, r2, #5
 8006fee:	69fa      	ldr	r2, [r7, #28]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff6:	0cdb      	lsrs	r3, r3, #19
 8006ff8:	04db      	lsls	r3, r3, #19
 8006ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	0151      	lsls	r1, r2, #5
 800700e:	69fa      	ldr	r2, [r7, #28]
 8007010:	440a      	add	r2, r1
 8007012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007016:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800701a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800701e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	6999      	ldr	r1, [r3, #24]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	440b      	add	r3, r1
 8007038:	1e59      	subs	r1, r3, #1
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007042:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007044:	4b9d      	ldr	r3, [pc, #628]	; (80072bc <USB_EPStartXfer+0x370>)
 8007046:	400b      	ands	r3, r1
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	0148      	lsls	r0, r1, #5
 800704c:	69f9      	ldr	r1, [r7, #28]
 800704e:	4401      	add	r1, r0
 8007050:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007054:	4313      	orrs	r3, r2
 8007056:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007064:	691a      	ldr	r2, [r3, #16]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800706e:	69b9      	ldr	r1, [r7, #24]
 8007070:	0148      	lsls	r0, r1, #5
 8007072:	69f9      	ldr	r1, [r7, #28]
 8007074:	4401      	add	r1, r0
 8007076:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800707a:	4313      	orrs	r3, r2
 800707c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	791b      	ldrb	r3, [r3, #4]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d11f      	bne.n	80070c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80070a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d14b      	bne.n	8007164 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d009      	beq.n	80070e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	461a      	mov	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	791b      	ldrb	r3, [r3, #4]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d128      	bne.n	8007142 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d110      	bne.n	8007122 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800711a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	e00f      	b.n	8007142 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	0151      	lsls	r1, r2, #5
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	440a      	add	r2, r1
 8007138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800713c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007140:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	0151      	lsls	r1, r2, #5
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	440a      	add	r2, r1
 8007158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800715c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	e133      	b.n	80073cc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007182:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	791b      	ldrb	r3, [r3, #4]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d015      	beq.n	80071b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 811b 	beq.w	80073cc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	2101      	movs	r1, #1
 80071a8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ac:	69f9      	ldr	r1, [r7, #28]
 80071ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b2:	4313      	orrs	r3, r2
 80071b4:	634b      	str	r3, [r1, #52]	; 0x34
 80071b6:	e109      	b.n	80073cc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d110      	bne.n	80071ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	0151      	lsls	r1, r2, #5
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	440a      	add	r2, r1
 80071de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	e00f      	b.n	800720a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	0151      	lsls	r1, r2, #5
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	440a      	add	r2, r1
 8007200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007208:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	6919      	ldr	r1, [r3, #16]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	b298      	uxth	r0, r3
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	4603      	mov	r3, r0
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 fade 	bl	80077e0 <USB_WritePacket>
 8007224:	e0d2      	b.n	80073cc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007240:	0cdb      	lsrs	r3, r3, #19
 8007242:	04db      	lsls	r3, r3, #19
 8007244:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	0151      	lsls	r1, r2, #5
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	440a      	add	r2, r1
 800725c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007268:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d126      	bne.n	80072c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727e:	691a      	ldr	r2, [r3, #16]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007288:	69b9      	ldr	r1, [r7, #24]
 800728a:	0148      	lsls	r0, r1, #5
 800728c:	69f9      	ldr	r1, [r7, #28]
 800728e:	4401      	add	r1, r0
 8007290:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007294:	4313      	orrs	r3, r2
 8007296:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	0151      	lsls	r1, r2, #5
 80072aa:	69fa      	ldr	r2, [r7, #28]
 80072ac:	440a      	add	r2, r1
 80072ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072b6:	6113      	str	r3, [r2, #16]
 80072b8:	e03a      	b.n	8007330 <USB_EPStartXfer+0x3e4>
 80072ba:	bf00      	nop
 80072bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	699a      	ldr	r2, [r3, #24]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	4413      	add	r3, r2
 80072ca:	1e5a      	subs	r2, r3, #1
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	8afa      	ldrh	r2, [r7, #22]
 80072dc:	fb03 f202 	mul.w	r2, r3, r2
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f0:	691a      	ldr	r2, [r3, #16]
 80072f2:	8afb      	ldrh	r3, [r7, #22]
 80072f4:	04d9      	lsls	r1, r3, #19
 80072f6:	4b38      	ldr	r3, [pc, #224]	; (80073d8 <USB_EPStartXfer+0x48c>)
 80072f8:	400b      	ands	r3, r1
 80072fa:	69b9      	ldr	r1, [r7, #24]
 80072fc:	0148      	lsls	r0, r1, #5
 80072fe:	69f9      	ldr	r1, [r7, #28]
 8007300:	4401      	add	r1, r0
 8007302:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007306:	4313      	orrs	r3, r2
 8007308:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007320:	69b9      	ldr	r1, [r7, #24]
 8007322:	0148      	lsls	r0, r1, #5
 8007324:	69f9      	ldr	r1, [r7, #28]
 8007326:	4401      	add	r1, r0
 8007328:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800732c:	4313      	orrs	r3, r2
 800732e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d10d      	bne.n	8007352 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	6919      	ldr	r1, [r3, #16]
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734e:	460a      	mov	r2, r1
 8007350:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	791b      	ldrb	r3, [r3, #4]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d128      	bne.n	80073ac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007366:	2b00      	cmp	r3, #0
 8007368:	d110      	bne.n	800738c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007384:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	e00f      	b.n	80073ac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	0151      	lsls	r1, r2, #5
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	440a      	add	r2, r1
 80073c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3720      	adds	r7, #32
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	1ff80000 	.word	0x1ff80000

080073dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	785b      	ldrb	r3, [r3, #1]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	f040 80ce 	bne.w	800759a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d132      	bne.n	800746c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007420:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007424:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	0151      	lsls	r1, r2, #5
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	440a      	add	r2, r1
 8007440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	0151      	lsls	r1, r2, #5
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	440a      	add	r2, r1
 8007460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007464:	0cdb      	lsrs	r3, r3, #19
 8007466:	04db      	lsls	r3, r3, #19
 8007468:	6113      	str	r3, [r2, #16]
 800746a:	e04e      	b.n	800750a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	0151      	lsls	r1, r2, #5
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	440a      	add	r2, r1
 8007482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007486:	0cdb      	lsrs	r3, r3, #19
 8007488:	04db      	lsls	r3, r3, #19
 800748a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	0151      	lsls	r1, r2, #5
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	440a      	add	r2, r1
 80074a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	699a      	ldr	r2, [r3, #24]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d903      	bls.n	80074c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	68da      	ldr	r2, [r3, #12]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	0151      	lsls	r1, r2, #5
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	440a      	add	r2, r1
 80074da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f0:	691a      	ldr	r2, [r3, #16]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074fa:	6939      	ldr	r1, [r7, #16]
 80074fc:	0148      	lsls	r0, r1, #5
 80074fe:	6979      	ldr	r1, [r7, #20]
 8007500:	4401      	add	r1, r0
 8007502:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007506:	4313      	orrs	r3, r2
 8007508:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d11e      	bne.n	800754e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d009      	beq.n	800752c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007524:	461a      	mov	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	440a      	add	r2, r1
 8007542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007546:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	e097      	b.n	800767e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	0151      	lsls	r1, r2, #5
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	440a      	add	r2, r1
 8007564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007568:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800756c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 8083 	beq.w	800767e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	2101      	movs	r1, #1
 800758a:	fa01 f303 	lsl.w	r3, r1, r3
 800758e:	6979      	ldr	r1, [r7, #20]
 8007590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007594:	4313      	orrs	r3, r2
 8007596:	634b      	str	r3, [r1, #52]	; 0x34
 8007598:	e071      	b.n	800767e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	0151      	lsls	r1, r2, #5
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	440a      	add	r2, r1
 80075b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b4:	0cdb      	lsrs	r3, r3, #19
 80075b6:	04db      	lsls	r3, r3, #19
 80075b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	0151      	lsls	r1, r2, #5
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	440a      	add	r2, r1
 80075d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	440a      	add	r2, r1
 800760c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007614:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007622:	691a      	ldr	r2, [r3, #16]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800762c:	6939      	ldr	r1, [r7, #16]
 800762e:	0148      	lsls	r0, r1, #5
 8007630:	6979      	ldr	r1, [r7, #20]
 8007632:	4401      	add	r1, r0
 8007634:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007638:	4313      	orrs	r3, r2
 800763a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d10d      	bne.n	800765e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6919      	ldr	r1, [r3, #16]
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765a:	460a      	mov	r2, r1
 800765c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	0151      	lsls	r1, r2, #5
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	440a      	add	r2, r1
 8007674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007678:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800767c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	785b      	ldrb	r3, [r3, #1]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d14a      	bne.n	8007740 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076c2:	f040 8086 	bne.w	80077d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	7812      	ldrb	r2, [r2, #0]
 80076da:	0151      	lsls	r1, r2, #5
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	440a      	add	r2, r1
 80076e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	7812      	ldrb	r2, [r2, #0]
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007708:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800770c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3301      	adds	r3, #1
 8007712:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f242 7210 	movw	r2, #10000	; 0x2710
 800771a:	4293      	cmp	r3, r2
 800771c:	d902      	bls.n	8007724 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	75fb      	strb	r3, [r7, #23]
          break;
 8007722:	e056      	b.n	80077d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800773c:	d0e7      	beq.n	800770e <USB_EPStopXfer+0x82>
 800773e:	e048      	b.n	80077d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007758:	d13b      	bne.n	80077d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	7812      	ldrb	r2, [r2, #0]
 800776e:	0151      	lsls	r1, r2, #5
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	440a      	add	r2, r1
 8007774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007778:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800777c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	4413      	add	r3, r2
 8007788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	7812      	ldrb	r2, [r2, #0]
 8007792:	0151      	lsls	r1, r2, #5
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	440a      	add	r2, r1
 8007798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800779c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d902      	bls.n	80077b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	75fb      	strb	r3, [r7, #23]
          break;
 80077b6:	e00c      	b.n	80077d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077d0:	d0e7      	beq.n	80077a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	371c      	adds	r7, #28
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b089      	sub	sp, #36	; 0x24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4611      	mov	r1, r2
 80077ec:	461a      	mov	r2, r3
 80077ee:	460b      	mov	r3, r1
 80077f0:	71fb      	strb	r3, [r7, #7]
 80077f2:	4613      	mov	r3, r2
 80077f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80077fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d123      	bne.n	800784e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007806:	88bb      	ldrh	r3, [r7, #4]
 8007808:	3303      	adds	r3, #3
 800780a:	089b      	lsrs	r3, r3, #2
 800780c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800780e:	2300      	movs	r3, #0
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	e018      	b.n	8007846 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	031a      	lsls	r2, r3, #12
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	4413      	add	r3, r2
 800781c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007820:	461a      	mov	r2, r3
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	3301      	adds	r3, #1
 800782c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	3301      	adds	r3, #1
 8007832:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	3301      	adds	r3, #1
 8007838:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	3301      	adds	r3, #1
 800783e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	3301      	adds	r3, #1
 8007844:	61bb      	str	r3, [r7, #24]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	429a      	cmp	r2, r3
 800784c:	d3e2      	bcc.n	8007814 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3724      	adds	r7, #36	; 0x24
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800785c:	b480      	push	{r7}
 800785e:	b08b      	sub	sp, #44	; 0x2c
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007872:	88fb      	ldrh	r3, [r7, #6]
 8007874:	089b      	lsrs	r3, r3, #2
 8007876:	b29b      	uxth	r3, r3
 8007878:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007882:	2300      	movs	r3, #0
 8007884:	623b      	str	r3, [r7, #32]
 8007886:	e014      	b.n	80078b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	601a      	str	r2, [r3, #0]
    pDest++;
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	3301      	adds	r3, #1
 8007898:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	3301      	adds	r3, #1
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	3301      	adds	r3, #1
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	3301      	adds	r3, #1
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	3301      	adds	r3, #1
 80078b0:	623b      	str	r3, [r7, #32]
 80078b2:	6a3a      	ldr	r2, [r7, #32]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d3e6      	bcc.n	8007888 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80078ba:	8bfb      	ldrh	r3, [r7, #30]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d01e      	beq.n	80078fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ca:	461a      	mov	r2, r3
 80078cc:	f107 0310 	add.w	r3, r7, #16
 80078d0:	6812      	ldr	r2, [r2, #0]
 80078d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	fa22 f303 	lsr.w	r3, r2, r3
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	701a      	strb	r2, [r3, #0]
      i++;
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	3301      	adds	r3, #1
 80078ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	3301      	adds	r3, #1
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80078f2:	8bfb      	ldrh	r3, [r7, #30]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80078f8:	8bfb      	ldrh	r3, [r7, #30]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1ea      	bne.n	80078d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007900:	4618      	mov	r0, r3
 8007902:	372c      	adds	r7, #44	; 0x2c
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d12c      	bne.n	8007982 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	db12      	blt.n	8007960 <USB_EPSetStall+0x54>
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00f      	beq.n	8007960 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	0151      	lsls	r1, r2, #5
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	440a      	add	r2, r1
 8007956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800795a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800795e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	0151      	lsls	r1, r2, #5
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	440a      	add	r2, r1
 8007976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800797a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	e02b      	b.n	80079da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	db12      	blt.n	80079ba <USB_EPSetStall+0xae>
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00f      	beq.n	80079ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	0151      	lsls	r1, r2, #5
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	440a      	add	r2, r1
 80079b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	0151      	lsls	r1, r2, #5
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	440a      	add	r2, r1
 80079d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d128      	bne.n	8007a56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	0151      	lsls	r1, r2, #5
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	440a      	add	r2, r1
 8007a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	791b      	ldrb	r3, [r3, #4]
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d003      	beq.n	8007a34 <USB_EPClearStall+0x4c>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	791b      	ldrb	r3, [r3, #4]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d138      	bne.n	8007aa6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	0151      	lsls	r1, r2, #5
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	440a      	add	r2, r1
 8007a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	e027      	b.n	8007aa6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	0151      	lsls	r1, r2, #5
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	440a      	add	r2, r1
 8007a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	791b      	ldrb	r3, [r3, #4]
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d003      	beq.n	8007a86 <USB_EPClearStall+0x9e>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	791b      	ldrb	r3, [r3, #4]
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d10f      	bne.n	8007aa6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	0151      	lsls	r1, r2, #5
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	440a      	add	r2, r1
 8007a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aa4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ad2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007ad6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	78fb      	ldrb	r3, [r7, #3]
 8007ae2:	011b      	lsls	r3, r3, #4
 8007ae4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007ae8:	68f9      	ldr	r1, [r7, #12]
 8007aea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007aee:	4313      	orrs	r3, r2
 8007af0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b1a:	f023 0303 	bic.w	r3, r3, #3
 8007b1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b2e:	f023 0302 	bic.w	r3, r3, #2
 8007b32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b5c:	f023 0303 	bic.w	r3, r3, #3
 8007b60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b70:	f043 0302 	orr.w	r3, r3, #2
 8007b74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4013      	ands	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	0c1b      	lsrs	r3, r3, #16
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b085      	sub	sp, #20
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	b29b      	uxth	r3, r3
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b085      	sub	sp, #20
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c22:	78fb      	ldrb	r3, [r7, #3]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c40:	68bb      	ldr	r3, [r7, #8]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b087      	sub	sp, #28
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007c72:	78fb      	ldrb	r3, [r7, #3]
 8007c74:	f003 030f 	and.w	r3, r3, #15
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7e:	01db      	lsls	r3, r3, #7
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	4013      	ands	r3, r2
 8007c9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b085      	sub	sp, #20
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ce4:	f023 0307 	bic.w	r3, r3, #7
 8007ce8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	460b      	mov	r3, r1
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	333c      	adds	r3, #60	; 0x3c
 8007d22:	3304      	adds	r3, #4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	4a26      	ldr	r2, [pc, #152]	; (8007dc4 <USB_EP0_OutStart+0xb8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d90a      	bls.n	8007d46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d40:	d101      	bne.n	8007d46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	e037      	b.n	8007db6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	2300      	movs	r3, #0
 8007d50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d74:	f043 0318 	orr.w	r3, r3, #24
 8007d78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007d8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007d8e:	7afb      	ldrb	r3, [r7, #11]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d10f      	bne.n	8007db4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007db2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	371c      	adds	r7, #28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	4f54300a 	.word	0x4f54300a

08007dc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4a13      	ldr	r2, [pc, #76]	; (8007e2c <USB_CoreReset+0x64>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d901      	bls.n	8007de6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e01b      	b.n	8007e1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	daf2      	bge.n	8007dd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	f043 0201 	orr.w	r2, r3, #1
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3301      	adds	r3, #1
 8007e02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4a09      	ldr	r2, [pc, #36]	; (8007e2c <USB_CoreReset+0x64>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d901      	bls.n	8007e10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e006      	b.n	8007e1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d0f0      	beq.n	8007dfe <USB_CoreReset+0x36>

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	00030d40 	.word	0x00030d40

08007e30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007e40:	f005 ffb0 	bl	800dda4 <USBD_static_malloc>
 8007e44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d109      	bne.n	8007e60 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	32b0      	adds	r2, #176	; 0xb0
 8007e56:	2100      	movs	r1, #0
 8007e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e0d4      	b.n	800800a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007e60:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007e64:	2100      	movs	r1, #0
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f006 f81c 	bl	800dea4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	32b0      	adds	r2, #176	; 0xb0
 8007e76:	68f9      	ldr	r1, [r7, #12]
 8007e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	32b0      	adds	r2, #176	; 0xb0
 8007e86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	7c1b      	ldrb	r3, [r3, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d138      	bne.n	8007f0a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e98:	4b5e      	ldr	r3, [pc, #376]	; (8008014 <USBD_CDC_Init+0x1e4>)
 8007e9a:	7819      	ldrb	r1, [r3, #0]
 8007e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f005 fe5b 	bl	800db5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ea8:	4b5a      	ldr	r3, [pc, #360]	; (8008014 <USBD_CDC_Init+0x1e4>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	f003 020f 	and.w	r2, r3, #15
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	3324      	adds	r3, #36	; 0x24
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007ec2:	4b55      	ldr	r3, [pc, #340]	; (8008018 <USBD_CDC_Init+0x1e8>)
 8007ec4:	7819      	ldrb	r1, [r3, #0]
 8007ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eca:	2202      	movs	r2, #2
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f005 fe46 	bl	800db5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ed2:	4b51      	ldr	r3, [pc, #324]	; (8008018 <USBD_CDC_Init+0x1e8>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	f003 020f 	and.w	r2, r3, #15
 8007eda:	6879      	ldr	r1, [r7, #4]
 8007edc:	4613      	mov	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	440b      	add	r3, r1
 8007ee6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007eea:	2201      	movs	r2, #1
 8007eec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007eee:	4b4b      	ldr	r3, [pc, #300]	; (800801c <USBD_CDC_Init+0x1ec>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	f003 020f 	and.w	r2, r3, #15
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	3326      	adds	r3, #38	; 0x26
 8007f04:	2210      	movs	r2, #16
 8007f06:	801a      	strh	r2, [r3, #0]
 8007f08:	e035      	b.n	8007f76 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f0a:	4b42      	ldr	r3, [pc, #264]	; (8008014 <USBD_CDC_Init+0x1e4>)
 8007f0c:	7819      	ldrb	r1, [r3, #0]
 8007f0e:	2340      	movs	r3, #64	; 0x40
 8007f10:	2202      	movs	r2, #2
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f005 fe23 	bl	800db5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f18:	4b3e      	ldr	r3, [pc, #248]	; (8008014 <USBD_CDC_Init+0x1e4>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	f003 020f 	and.w	r2, r3, #15
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	3324      	adds	r3, #36	; 0x24
 8007f2e:	2201      	movs	r2, #1
 8007f30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f32:	4b39      	ldr	r3, [pc, #228]	; (8008018 <USBD_CDC_Init+0x1e8>)
 8007f34:	7819      	ldrb	r1, [r3, #0]
 8007f36:	2340      	movs	r3, #64	; 0x40
 8007f38:	2202      	movs	r2, #2
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f005 fe0f 	bl	800db5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f40:	4b35      	ldr	r3, [pc, #212]	; (8008018 <USBD_CDC_Init+0x1e8>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	f003 020f 	and.w	r2, r3, #15
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f58:	2201      	movs	r2, #1
 8007f5a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f5c:	4b2f      	ldr	r3, [pc, #188]	; (800801c <USBD_CDC_Init+0x1ec>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	f003 020f 	and.w	r2, r3, #15
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	3326      	adds	r3, #38	; 0x26
 8007f72:	2210      	movs	r2, #16
 8007f74:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f76:	4b29      	ldr	r3, [pc, #164]	; (800801c <USBD_CDC_Init+0x1ec>)
 8007f78:	7819      	ldrb	r1, [r3, #0]
 8007f7a:	2308      	movs	r3, #8
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f005 fded 	bl	800db5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007f84:	4b25      	ldr	r3, [pc, #148]	; (800801c <USBD_CDC_Init+0x1ec>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	f003 020f 	and.w	r2, r3, #15
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	440b      	add	r3, r1
 8007f98:	3324      	adds	r3, #36	; 0x24
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	33b0      	adds	r3, #176	; 0xb0
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	e018      	b.n	800800a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	7c1b      	ldrb	r3, [r3, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fe0:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <USBD_CDC_Init+0x1e8>)
 8007fe2:	7819      	ldrb	r1, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f005 fea4 	bl	800dd3c <USBD_LL_PrepareReceive>
 8007ff4:	e008      	b.n	8008008 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ff6:	4b08      	ldr	r3, [pc, #32]	; (8008018 <USBD_CDC_Init+0x1e8>)
 8007ff8:	7819      	ldrb	r1, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008000:	2340      	movs	r3, #64	; 0x40
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f005 fe9a 	bl	800dd3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000093 	.word	0x20000093
 8008018:	20000094 	.word	0x20000094
 800801c:	20000095 	.word	0x20000095

08008020 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800802c:	4b3a      	ldr	r3, [pc, #232]	; (8008118 <USBD_CDC_DeInit+0xf8>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f005 fdb9 	bl	800dbaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008038:	4b37      	ldr	r3, [pc, #220]	; (8008118 <USBD_CDC_DeInit+0xf8>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	f003 020f 	and.w	r2, r3, #15
 8008040:	6879      	ldr	r1, [r7, #4]
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	440b      	add	r3, r1
 800804c:	3324      	adds	r3, #36	; 0x24
 800804e:	2200      	movs	r2, #0
 8008050:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008052:	4b32      	ldr	r3, [pc, #200]	; (800811c <USBD_CDC_DeInit+0xfc>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f005 fda6 	bl	800dbaa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800805e:	4b2f      	ldr	r3, [pc, #188]	; (800811c <USBD_CDC_DeInit+0xfc>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	f003 020f 	and.w	r2, r3, #15
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008076:	2200      	movs	r2, #0
 8008078:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800807a:	4b29      	ldr	r3, [pc, #164]	; (8008120 <USBD_CDC_DeInit+0x100>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f005 fd92 	bl	800dbaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008086:	4b26      	ldr	r3, [pc, #152]	; (8008120 <USBD_CDC_DeInit+0x100>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	f003 020f 	and.w	r2, r3, #15
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	3324      	adds	r3, #36	; 0x24
 800809c:	2200      	movs	r2, #0
 800809e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80080a0:	4b1f      	ldr	r3, [pc, #124]	; (8008120 <USBD_CDC_DeInit+0x100>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	f003 020f 	and.w	r2, r3, #15
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	440b      	add	r3, r1
 80080b4:	3326      	adds	r3, #38	; 0x26
 80080b6:	2200      	movs	r2, #0
 80080b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	32b0      	adds	r2, #176	; 0xb0
 80080c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d01f      	beq.n	800810c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	33b0      	adds	r3, #176	; 0xb0
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	32b0      	adds	r2, #176	; 0xb0
 80080ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f005 fe66 	bl	800ddc0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	32b0      	adds	r2, #176	; 0xb0
 80080fe:	2100      	movs	r1, #0
 8008100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20000093 	.word	0x20000093
 800811c:	20000094 	.word	0x20000094
 8008120:	20000095 	.word	0x20000095

08008124 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	32b0      	adds	r2, #176	; 0xb0
 8008138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008150:	2303      	movs	r3, #3
 8008152:	e0bf      	b.n	80082d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800815c:	2b00      	cmp	r3, #0
 800815e:	d050      	beq.n	8008202 <USBD_CDC_Setup+0xde>
 8008160:	2b20      	cmp	r3, #32
 8008162:	f040 80af 	bne.w	80082c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	88db      	ldrh	r3, [r3, #6]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d03a      	beq.n	80081e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	b25b      	sxtb	r3, r3
 8008174:	2b00      	cmp	r3, #0
 8008176:	da1b      	bge.n	80081b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	33b0      	adds	r3, #176	; 0xb0
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800818e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	88d2      	ldrh	r2, [r2, #6]
 8008194:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	88db      	ldrh	r3, [r3, #6]
 800819a:	2b07      	cmp	r3, #7
 800819c:	bf28      	it	cs
 800819e:	2307      	movcs	r3, #7
 80081a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	89fa      	ldrh	r2, [r7, #14]
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 fd89 	bl	8009cc0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80081ae:	e090      	b.n	80082d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	785a      	ldrb	r2, [r3, #1]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	88db      	ldrh	r3, [r3, #6]
 80081be:	2b3f      	cmp	r3, #63	; 0x3f
 80081c0:	d803      	bhi.n	80081ca <USBD_CDC_Setup+0xa6>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	88db      	ldrh	r3, [r3, #6]
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	e000      	b.n	80081cc <USBD_CDC_Setup+0xa8>
 80081ca:	2240      	movs	r2, #64	; 0x40
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80081d2:	6939      	ldr	r1, [r7, #16]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80081da:	461a      	mov	r2, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 fd9b 	bl	8009d18 <USBD_CtlPrepareRx>
      break;
 80081e2:	e076      	b.n	80082d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	33b0      	adds	r3, #176	; 0xb0
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	7850      	ldrb	r0, [r2, #1]
 80081fa:	2200      	movs	r2, #0
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	4798      	blx	r3
      break;
 8008200:	e067      	b.n	80082d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	2b0b      	cmp	r3, #11
 8008208:	d851      	bhi.n	80082ae <USBD_CDC_Setup+0x18a>
 800820a:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <USBD_CDC_Setup+0xec>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008241 	.word	0x08008241
 8008214:	080082bd 	.word	0x080082bd
 8008218:	080082af 	.word	0x080082af
 800821c:	080082af 	.word	0x080082af
 8008220:	080082af 	.word	0x080082af
 8008224:	080082af 	.word	0x080082af
 8008228:	080082af 	.word	0x080082af
 800822c:	080082af 	.word	0x080082af
 8008230:	080082af 	.word	0x080082af
 8008234:	080082af 	.word	0x080082af
 8008238:	0800826b 	.word	0x0800826b
 800823c:	08008295 	.word	0x08008295
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b03      	cmp	r3, #3
 800824a:	d107      	bne.n	800825c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800824c:	f107 030a 	add.w	r3, r7, #10
 8008250:	2202      	movs	r2, #2
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 fd33 	bl	8009cc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800825a:	e032      	b.n	80082c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 fcbd 	bl	8009bde <USBD_CtlError>
            ret = USBD_FAIL;
 8008264:	2303      	movs	r3, #3
 8008266:	75fb      	strb	r3, [r7, #23]
          break;
 8008268:	e02b      	b.n	80082c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b03      	cmp	r3, #3
 8008274:	d107      	bne.n	8008286 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008276:	f107 030d 	add.w	r3, r7, #13
 800827a:	2201      	movs	r2, #1
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 fd1e 	bl	8009cc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008284:	e01d      	b.n	80082c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 fca8 	bl	8009bde <USBD_CtlError>
            ret = USBD_FAIL;
 800828e:	2303      	movs	r3, #3
 8008290:	75fb      	strb	r3, [r7, #23]
          break;
 8008292:	e016      	b.n	80082c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b03      	cmp	r3, #3
 800829e:	d00f      	beq.n	80082c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 fc9b 	bl	8009bde <USBD_CtlError>
            ret = USBD_FAIL;
 80082a8:	2303      	movs	r3, #3
 80082aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80082ac:	e008      	b.n	80082c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 fc94 	bl	8009bde <USBD_CtlError>
          ret = USBD_FAIL;
 80082b6:	2303      	movs	r3, #3
 80082b8:	75fb      	strb	r3, [r7, #23]
          break;
 80082ba:	e002      	b.n	80082c2 <USBD_CDC_Setup+0x19e>
          break;
 80082bc:	bf00      	nop
 80082be:	e008      	b.n	80082d2 <USBD_CDC_Setup+0x1ae>
          break;
 80082c0:	bf00      	nop
      }
      break;
 80082c2:	e006      	b.n	80082d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 fc89 	bl	8009bde <USBD_CtlError>
      ret = USBD_FAIL;
 80082cc:	2303      	movs	r3, #3
 80082ce:	75fb      	strb	r3, [r7, #23]
      break;
 80082d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	32b0      	adds	r2, #176	; 0xb0
 80082fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008302:	2303      	movs	r3, #3
 8008304:	e065      	b.n	80083d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	32b0      	adds	r2, #176	; 0xb0
 8008310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008314:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008316:	78fb      	ldrb	r3, [r7, #3]
 8008318:	f003 020f 	and.w	r2, r3, #15
 800831c:	6879      	ldr	r1, [r7, #4]
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	440b      	add	r3, r1
 8008328:	3318      	adds	r3, #24
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d02f      	beq.n	8008390 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	f003 020f 	and.w	r2, r3, #15
 8008336:	6879      	ldr	r1, [r7, #4]
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	3318      	adds	r3, #24
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	f003 010f 	and.w	r1, r3, #15
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	460b      	mov	r3, r1
 8008350:	00db      	lsls	r3, r3, #3
 8008352:	440b      	add	r3, r1
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4403      	add	r3, r0
 8008358:	3348      	adds	r3, #72	; 0x48
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008360:	fb01 f303 	mul.w	r3, r1, r3
 8008364:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008366:	2b00      	cmp	r3, #0
 8008368:	d112      	bne.n	8008390 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	f003 020f 	and.w	r2, r3, #15
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	3318      	adds	r3, #24
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008382:	78f9      	ldrb	r1, [r7, #3]
 8008384:	2300      	movs	r3, #0
 8008386:	2200      	movs	r2, #0
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f005 fcb6 	bl	800dcfa <USBD_LL_Transmit>
 800838e:	e01f      	b.n	80083d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	33b0      	adds	r3, #176	; 0xb0
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d010      	beq.n	80083d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	33b0      	adds	r3, #176	; 0xb0
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80083cc:	78fa      	ldrb	r2, [r7, #3]
 80083ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	460b      	mov	r3, r1
 80083e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	32b0      	adds	r2, #176	; 0xb0
 80083f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	32b0      	adds	r2, #176	; 0xb0
 8008400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	e01a      	b.n	8008442 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f005 fcb4 	bl	800dd7e <USBD_LL_GetRxDataSize>
 8008416:	4602      	mov	r2, r0
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	33b0      	adds	r3, #176	; 0xb0
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800843c:	4611      	mov	r1, r2
 800843e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	32b0      	adds	r2, #176	; 0xb0
 800845c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008460:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008468:	2303      	movs	r3, #3
 800846a:	e025      	b.n	80084b8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	33b0      	adds	r3, #176	; 0xb0
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01a      	beq.n	80084b6 <USBD_CDC_EP0_RxReady+0x6c>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008486:	2bff      	cmp	r3, #255	; 0xff
 8008488:	d015      	beq.n	80084b6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	33b0      	adds	r3, #176	; 0xb0
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80084a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80084aa:	b292      	uxth	r2, r2
 80084ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	22ff      	movs	r2, #255	; 0xff
 80084b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80084c8:	2182      	movs	r1, #130	; 0x82
 80084ca:	4818      	ldr	r0, [pc, #96]	; (800852c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084cc:	f000 fd4f 	bl	8008f6e <USBD_GetEpDesc>
 80084d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084d2:	2101      	movs	r1, #1
 80084d4:	4815      	ldr	r0, [pc, #84]	; (800852c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084d6:	f000 fd4a 	bl	8008f6e <USBD_GetEpDesc>
 80084da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084dc:	2181      	movs	r1, #129	; 0x81
 80084de:	4813      	ldr	r0, [pc, #76]	; (800852c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084e0:	f000 fd45 	bl	8008f6e <USBD_GetEpDesc>
 80084e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2210      	movs	r2, #16
 80084f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d006      	beq.n	8008506 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008500:	711a      	strb	r2, [r3, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d006      	beq.n	800851a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008514:	711a      	strb	r2, [r3, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2243      	movs	r2, #67	; 0x43
 800851e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008520:	4b02      	ldr	r3, [pc, #8]	; (800852c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008522:	4618      	mov	r0, r3
 8008524:	3718      	adds	r7, #24
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000050 	.word	0x20000050

08008530 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008538:	2182      	movs	r1, #130	; 0x82
 800853a:	4818      	ldr	r0, [pc, #96]	; (800859c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800853c:	f000 fd17 	bl	8008f6e <USBD_GetEpDesc>
 8008540:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008542:	2101      	movs	r1, #1
 8008544:	4815      	ldr	r0, [pc, #84]	; (800859c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008546:	f000 fd12 	bl	8008f6e <USBD_GetEpDesc>
 800854a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800854c:	2181      	movs	r1, #129	; 0x81
 800854e:	4813      	ldr	r0, [pc, #76]	; (800859c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008550:	f000 fd0d 	bl	8008f6e <USBD_GetEpDesc>
 8008554:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2210      	movs	r2, #16
 8008560:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d006      	beq.n	8008576 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	2200      	movs	r2, #0
 800856c:	711a      	strb	r2, [r3, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f042 0202 	orr.w	r2, r2, #2
 8008574:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d006      	beq.n	800858a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	711a      	strb	r2, [r3, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f042 0202 	orr.w	r2, r2, #2
 8008588:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2243      	movs	r2, #67	; 0x43
 800858e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008590:	4b02      	ldr	r3, [pc, #8]	; (800859c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008592:	4618      	mov	r0, r3
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000050 	.word	0x20000050

080085a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085a8:	2182      	movs	r1, #130	; 0x82
 80085aa:	4818      	ldr	r0, [pc, #96]	; (800860c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085ac:	f000 fcdf 	bl	8008f6e <USBD_GetEpDesc>
 80085b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085b2:	2101      	movs	r1, #1
 80085b4:	4815      	ldr	r0, [pc, #84]	; (800860c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085b6:	f000 fcda 	bl	8008f6e <USBD_GetEpDesc>
 80085ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085bc:	2181      	movs	r1, #129	; 0x81
 80085be:	4813      	ldr	r0, [pc, #76]	; (800860c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085c0:	f000 fcd5 	bl	8008f6e <USBD_GetEpDesc>
 80085c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2210      	movs	r2, #16
 80085d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d006      	beq.n	80085e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2200      	movs	r2, #0
 80085dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085e0:	711a      	strb	r2, [r3, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d006      	beq.n	80085fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085f4:	711a      	strb	r2, [r3, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2243      	movs	r2, #67	; 0x43
 80085fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000050 	.word	0x20000050

08008610 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	220a      	movs	r2, #10
 800861c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800861e:	4b03      	ldr	r3, [pc, #12]	; (800862c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	2000000c 	.word	0x2000000c

08008630 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008640:	2303      	movs	r3, #3
 8008642:	e009      	b.n	8008658 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	33b0      	adds	r3, #176	; 0xb0
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	32b0      	adds	r2, #176	; 0xb0
 800867a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800867e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008686:	2303      	movs	r3, #3
 8008688:	e008      	b.n	800869c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	371c      	adds	r7, #28
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	32b0      	adds	r2, #176	; 0xb0
 80086bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e004      	b.n	80086d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
	...

080086e4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	32b0      	adds	r2, #176	; 0xb0
 80086f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80086fc:	2301      	movs	r3, #1
 80086fe:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	32b0      	adds	r2, #176	; 0xb0
 800870a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008712:	2303      	movs	r3, #3
 8008714:	e025      	b.n	8008762 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800871c:	2b00      	cmp	r3, #0
 800871e:	d11f      	bne.n	8008760 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2201      	movs	r2, #1
 8008724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008728:	4b10      	ldr	r3, [pc, #64]	; (800876c <USBD_CDC_TransmitPacket+0x88>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	f003 020f 	and.w	r2, r3, #15
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4403      	add	r3, r0
 8008742:	3318      	adds	r3, #24
 8008744:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <USBD_CDC_TransmitPacket+0x88>)
 8008748:	7819      	ldrb	r1, [r3, #0]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f005 facf 	bl	800dcfa <USBD_LL_Transmit>

    ret = USBD_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20000093 	.word	0x20000093

08008770 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	32b0      	adds	r2, #176	; 0xb0
 8008782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008786:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	32b0      	adds	r2, #176	; 0xb0
 8008792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800879a:	2303      	movs	r3, #3
 800879c:	e018      	b.n	80087d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	7c1b      	ldrb	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10a      	bne.n	80087bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087a6:	4b0c      	ldr	r3, [pc, #48]	; (80087d8 <USBD_CDC_ReceivePacket+0x68>)
 80087a8:	7819      	ldrb	r1, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f005 fac1 	bl	800dd3c <USBD_LL_PrepareReceive>
 80087ba:	e008      	b.n	80087ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <USBD_CDC_ReceivePacket+0x68>)
 80087be:	7819      	ldrb	r1, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087c6:	2340      	movs	r3, #64	; 0x40
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f005 fab7 	bl	800dd3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20000094 	.word	0x20000094

080087dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e01f      	b.n	8008834 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	79fa      	ldrb	r2, [r7, #7]
 8008826:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f005 f931 	bl	800da90 <USBD_LL_Init>
 800882e:	4603      	mov	r3, r0
 8008830:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008850:	2303      	movs	r3, #3
 8008852:	e025      	b.n	80088a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	32ae      	adds	r2, #174	; 0xae
 8008866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00f      	beq.n	8008890 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	32ae      	adds	r2, #174	; 0xae
 800887a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008880:	f107 020e 	add.w	r2, r7, #14
 8008884:	4610      	mov	r0, r2
 8008886:	4798      	blx	r3
 8008888:	4602      	mov	r2, r0
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f005 f939 	bl	800db28 <USBD_LL_Start>
 80088b6:	4603      	mov	r3, r0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d009      	beq.n	8008904 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	4611      	mov	r1, r2
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	4798      	blx	r3
 8008900:	4603      	mov	r3, r0
 8008902:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	460b      	mov	r3, r1
 8008918:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	78fa      	ldrb	r2, [r7, #3]
 8008928:	4611      	mov	r1, r2
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	4798      	blx	r3
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008934:	2303      	movs	r3, #3
 8008936:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008938:	7bfb      	ldrb	r3, [r7, #15]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	4618      	mov	r0, r3
 8008956:	f001 f908 	bl	8009b6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008968:	461a      	mov	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008976:	f003 031f 	and.w	r3, r3, #31
 800897a:	2b02      	cmp	r3, #2
 800897c:	d01a      	beq.n	80089b4 <USBD_LL_SetupStage+0x72>
 800897e:	2b02      	cmp	r3, #2
 8008980:	d822      	bhi.n	80089c8 <USBD_LL_SetupStage+0x86>
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <USBD_LL_SetupStage+0x4a>
 8008986:	2b01      	cmp	r3, #1
 8008988:	d00a      	beq.n	80089a0 <USBD_LL_SetupStage+0x5e>
 800898a:	e01d      	b.n	80089c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fb5f 	bl	8009058 <USBD_StdDevReq>
 800899a:	4603      	mov	r3, r0
 800899c:	73fb      	strb	r3, [r7, #15]
      break;
 800899e:	e020      	b.n	80089e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fbc7 	bl	800913c <USBD_StdItfReq>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73fb      	strb	r3, [r7, #15]
      break;
 80089b2:	e016      	b.n	80089e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fc29 	bl	8009214 <USBD_StdEPReq>
 80089c2:	4603      	mov	r3, r0
 80089c4:	73fb      	strb	r3, [r7, #15]
      break;
 80089c6:	e00c      	b.n	80089e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f005 f906 	bl	800dbe8 <USBD_LL_StallEP>
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]
      break;
 80089e0:	bf00      	nop
  }

  return ret;
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	460b      	mov	r3, r1
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80089fe:	7afb      	ldrb	r3, [r7, #11]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d16e      	bne.n	8008ae2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	f040 8098 	bne.w	8008b48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d913      	bls.n	8008a4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	1ad2      	subs	r2, r2, r3
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	bf28      	it	cs
 8008a3e:	4613      	movcs	r3, r2
 8008a40:	461a      	mov	r2, r3
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f001 f984 	bl	8009d52 <USBD_CtlContinueRx>
 8008a4a:	e07d      	b.n	8008b48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a52:	f003 031f 	and.w	r3, r3, #31
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d014      	beq.n	8008a84 <USBD_LL_DataOutStage+0x98>
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d81d      	bhi.n	8008a9a <USBD_LL_DataOutStage+0xae>
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <USBD_LL_DataOutStage+0x7c>
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d003      	beq.n	8008a6e <USBD_LL_DataOutStage+0x82>
 8008a66:	e018      	b.n	8008a9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	75bb      	strb	r3, [r7, #22]
            break;
 8008a6c:	e018      	b.n	8008aa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	4619      	mov	r1, r3
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 fa5e 	bl	8008f3a <USBD_CoreFindIF>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	75bb      	strb	r3, [r7, #22]
            break;
 8008a82:	e00d      	b.n	8008aa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 fa60 	bl	8008f54 <USBD_CoreFindEP>
 8008a94:	4603      	mov	r3, r0
 8008a96:	75bb      	strb	r3, [r7, #22]
            break;
 8008a98:	e002      	b.n	8008aa0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	75bb      	strb	r3, [r7, #22]
            break;
 8008a9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008aa0:	7dbb      	ldrb	r3, [r7, #22]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d119      	bne.n	8008ada <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d113      	bne.n	8008ada <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008ab2:	7dba      	ldrb	r2, [r7, #22]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	32ae      	adds	r2, #174	; 0xae
 8008ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008ac2:	7dba      	ldrb	r2, [r7, #22]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008aca:	7dba      	ldrb	r2, [r7, #22]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	32ae      	adds	r2, #174	; 0xae
 8008ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f001 f94a 	bl	8009d74 <USBD_CtlSendStatus>
 8008ae0:	e032      	b.n	8008b48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ae2:	7afb      	ldrb	r3, [r7, #11]
 8008ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	4619      	mov	r1, r3
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f000 fa31 	bl	8008f54 <USBD_CoreFindEP>
 8008af2:	4603      	mov	r3, r0
 8008af4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008af6:	7dbb      	ldrb	r3, [r7, #22]
 8008af8:	2bff      	cmp	r3, #255	; 0xff
 8008afa:	d025      	beq.n	8008b48 <USBD_LL_DataOutStage+0x15c>
 8008afc:	7dbb      	ldrb	r3, [r7, #22]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d122      	bne.n	8008b48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d117      	bne.n	8008b3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008b0e:	7dba      	ldrb	r2, [r7, #22]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	32ae      	adds	r2, #174	; 0xae
 8008b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00f      	beq.n	8008b3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008b1e:	7dba      	ldrb	r2, [r7, #22]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008b26:	7dba      	ldrb	r2, [r7, #22]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	32ae      	adds	r2, #174	; 0xae
 8008b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	7afa      	ldrb	r2, [r7, #11]
 8008b34:	4611      	mov	r1, r2
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	4798      	blx	r3
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	e000      	b.n	8008b4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b086      	sub	sp, #24
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	60f8      	str	r0, [r7, #12]
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	607a      	str	r2, [r7, #4]
 8008b5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008b60:	7afb      	ldrb	r3, [r7, #11]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d16f      	bne.n	8008c46 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3314      	adds	r3, #20
 8008b6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d15a      	bne.n	8008c2c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d914      	bls.n	8008bac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	1ad2      	subs	r2, r2, r3
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	461a      	mov	r2, r3
 8008b96:	6879      	ldr	r1, [r7, #4]
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f001 f8ac 	bl	8009cf6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f005 f8c9 	bl	800dd3c <USBD_LL_PrepareReceive>
 8008baa:	e03f      	b.n	8008c2c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	68da      	ldr	r2, [r3, #12]
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d11c      	bne.n	8008bf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d316      	bcc.n	8008bf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d20f      	bcs.n	8008bf2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f001 f88d 	bl	8009cf6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008be4:	2300      	movs	r3, #0
 8008be6:	2200      	movs	r2, #0
 8008be8:	2100      	movs	r1, #0
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f005 f8a6 	bl	800dd3c <USBD_LL_PrepareReceive>
 8008bf0:	e01c      	b.n	8008c2c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	d10f      	bne.n	8008c1e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d009      	beq.n	8008c1e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c1e:	2180      	movs	r1, #128	; 0x80
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f004 ffe1 	bl	800dbe8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f001 f8b7 	bl	8009d9a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d03a      	beq.n	8008cac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f7ff fe42 	bl	80088c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c44:	e032      	b.n	8008cac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008c46:	7afb      	ldrb	r3, [r7, #11]
 8008c48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	4619      	mov	r1, r3
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 f97f 	bl	8008f54 <USBD_CoreFindEP>
 8008c56:	4603      	mov	r3, r0
 8008c58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	2bff      	cmp	r3, #255	; 0xff
 8008c5e:	d025      	beq.n	8008cac <USBD_LL_DataInStage+0x15a>
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d122      	bne.n	8008cac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d11c      	bne.n	8008cac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008c72:	7dfa      	ldrb	r2, [r7, #23]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	32ae      	adds	r2, #174	; 0xae
 8008c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d014      	beq.n	8008cac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008c82:	7dfa      	ldrb	r2, [r7, #23]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008c8a:	7dfa      	ldrb	r2, [r7, #23]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	32ae      	adds	r2, #174	; 0xae
 8008c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	7afa      	ldrb	r2, [r7, #11]
 8008c98:	4611      	mov	r1, r2
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	4798      	blx	r3
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008ca2:	7dbb      	ldrb	r3, [r7, #22]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008ca8:	7dbb      	ldrb	r3, [r7, #22]
 8008caa:	e000      	b.n	8008cae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d014      	beq.n	8008d1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00e      	beq.n	8008d1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	6852      	ldr	r2, [r2, #4]
 8008d0a:	b2d2      	uxtb	r2, r2
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	4798      	blx	r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d1c:	2340      	movs	r3, #64	; 0x40
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2100      	movs	r1, #0
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f004 ff1b 	bl	800db5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2240      	movs	r2, #64	; 0x40
 8008d34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d38:	2340      	movs	r3, #64	; 0x40
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2180      	movs	r1, #128	; 0x80
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f004 ff0d 	bl	800db5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2240      	movs	r2, #64	; 0x40
 8008d4e:	621a      	str	r2, [r3, #32]

  return ret;
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	460b      	mov	r3, r1
 8008d64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	78fa      	ldrb	r2, [r7, #3]
 8008d6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2204      	movs	r2, #4
 8008d94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d106      	bne.n	8008dc8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d110      	bne.n	8008e0c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00b      	beq.n	8008e0c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d005      	beq.n	8008e0c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	32ae      	adds	r2, #174	; 0xae
 8008e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e01c      	b.n	8008e72 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	d115      	bne.n	8008e70 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	32ae      	adds	r2, #174	; 0xae
 8008e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00b      	beq.n	8008e70 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	32ae      	adds	r2, #174	; 0xae
 8008e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e66:	6a1b      	ldr	r3, [r3, #32]
 8008e68:	78fa      	ldrb	r2, [r7, #3]
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	460b      	mov	r3, r1
 8008e84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	32ae      	adds	r2, #174	; 0xae
 8008e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e01c      	b.n	8008ed6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	d115      	bne.n	8008ed4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	32ae      	adds	r2, #174	; 0xae
 8008eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00b      	beq.n	8008ed4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	32ae      	adds	r2, #174	; 0xae
 8008ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	78fa      	ldrb	r2, [r7, #3]
 8008ece:	4611      	mov	r1, r2
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b083      	sub	sp, #12
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00e      	beq.n	8008f30 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6852      	ldr	r2, [r2, #4]
 8008f1e:	b2d2      	uxtb	r2, r2
 8008f20:	4611      	mov	r1, r2
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	4798      	blx	r3
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f46:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b086      	sub	sp, #24
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	460b      	mov	r3, r1
 8008f78:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	885b      	ldrh	r3, [r3, #2]
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d920      	bls.n	8008fd8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f9e:	e013      	b.n	8008fc8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008fa0:	f107 030a 	add.w	r3, r7, #10
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6978      	ldr	r0, [r7, #20]
 8008fa8:	f000 f81b 	bl	8008fe2 <USBD_GetNextDesc>
 8008fac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	785b      	ldrb	r3, [r3, #1]
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	d108      	bne.n	8008fc8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	789b      	ldrb	r3, [r3, #2]
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d008      	beq.n	8008fd6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	885b      	ldrh	r3, [r3, #2]
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	897b      	ldrh	r3, [r7, #10]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d8e5      	bhi.n	8008fa0 <USBD_GetEpDesc+0x32>
 8008fd4:	e000      	b.n	8008fd8 <USBD_GetEpDesc+0x6a>
          break;
 8008fd6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008fd8:	693b      	ldr	r3, [r7, #16]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	881a      	ldrh	r2, [r3, #0]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	4413      	add	r3, r2
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4413      	add	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800900e:	68fb      	ldr	r3, [r7, #12]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800901c:	b480      	push	{r7}
 800901e:	b087      	sub	sp, #28
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	3301      	adds	r3, #1
 8009032:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800903a:	8a3b      	ldrh	r3, [r7, #16]
 800903c:	021b      	lsls	r3, r3, #8
 800903e:	b21a      	sxth	r2, r3
 8009040:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009044:	4313      	orrs	r3, r2
 8009046:	b21b      	sxth	r3, r3
 8009048:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800904a:	89fb      	ldrh	r3, [r7, #14]
}
 800904c:	4618      	mov	r0, r3
 800904e:	371c      	adds	r7, #28
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800906e:	2b40      	cmp	r3, #64	; 0x40
 8009070:	d005      	beq.n	800907e <USBD_StdDevReq+0x26>
 8009072:	2b40      	cmp	r3, #64	; 0x40
 8009074:	d857      	bhi.n	8009126 <USBD_StdDevReq+0xce>
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00f      	beq.n	800909a <USBD_StdDevReq+0x42>
 800907a:	2b20      	cmp	r3, #32
 800907c:	d153      	bne.n	8009126 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	32ae      	adds	r2, #174	; 0xae
 8009088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	4798      	blx	r3
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]
      break;
 8009098:	e04a      	b.n	8009130 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	785b      	ldrb	r3, [r3, #1]
 800909e:	2b09      	cmp	r3, #9
 80090a0:	d83b      	bhi.n	800911a <USBD_StdDevReq+0xc2>
 80090a2:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <USBD_StdDevReq+0x50>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	080090fd 	.word	0x080090fd
 80090ac:	08009111 	.word	0x08009111
 80090b0:	0800911b 	.word	0x0800911b
 80090b4:	08009107 	.word	0x08009107
 80090b8:	0800911b 	.word	0x0800911b
 80090bc:	080090db 	.word	0x080090db
 80090c0:	080090d1 	.word	0x080090d1
 80090c4:	0800911b 	.word	0x0800911b
 80090c8:	080090f3 	.word	0x080090f3
 80090cc:	080090e5 	.word	0x080090e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa3c 	bl	8009550 <USBD_GetDescriptor>
          break;
 80090d8:	e024      	b.n	8009124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fba1 	bl	8009824 <USBD_SetAddress>
          break;
 80090e2:	e01f      	b.n	8009124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090e4:	6839      	ldr	r1, [r7, #0]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fbe0 	bl	80098ac <USBD_SetConfig>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]
          break;
 80090f0:	e018      	b.n	8009124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fc83 	bl	8009a00 <USBD_GetConfig>
          break;
 80090fa:	e013      	b.n	8009124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fcb4 	bl	8009a6c <USBD_GetStatus>
          break;
 8009104:	e00e      	b.n	8009124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fce3 	bl	8009ad4 <USBD_SetFeature>
          break;
 800910e:	e009      	b.n	8009124 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fd07 	bl	8009b26 <USBD_ClrFeature>
          break;
 8009118:	e004      	b.n	8009124 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fd5e 	bl	8009bde <USBD_CtlError>
          break;
 8009122:	bf00      	nop
      }
      break;
 8009124:	e004      	b.n	8009130 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fd58 	bl	8009bde <USBD_CtlError>
      break;
 800912e:	bf00      	nop
  }

  return ret;
 8009130:	7bfb      	ldrb	r3, [r7, #15]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop

0800913c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009152:	2b40      	cmp	r3, #64	; 0x40
 8009154:	d005      	beq.n	8009162 <USBD_StdItfReq+0x26>
 8009156:	2b40      	cmp	r3, #64	; 0x40
 8009158:	d852      	bhi.n	8009200 <USBD_StdItfReq+0xc4>
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <USBD_StdItfReq+0x26>
 800915e:	2b20      	cmp	r3, #32
 8009160:	d14e      	bne.n	8009200 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009168:	b2db      	uxtb	r3, r3
 800916a:	3b01      	subs	r3, #1
 800916c:	2b02      	cmp	r3, #2
 800916e:	d840      	bhi.n	80091f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	889b      	ldrh	r3, [r3, #4]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b01      	cmp	r3, #1
 8009178:	d836      	bhi.n	80091e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	889b      	ldrh	r3, [r3, #4]
 800917e:	b2db      	uxtb	r3, r3
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff fed9 	bl	8008f3a <USBD_CoreFindIF>
 8009188:	4603      	mov	r3, r0
 800918a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	2bff      	cmp	r3, #255	; 0xff
 8009190:	d01d      	beq.n	80091ce <USBD_StdItfReq+0x92>
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d11a      	bne.n	80091ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009198:	7bba      	ldrb	r2, [r7, #14]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	32ae      	adds	r2, #174	; 0xae
 800919e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00f      	beq.n	80091c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80091a8:	7bba      	ldrb	r2, [r7, #14]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80091b0:	7bba      	ldrb	r2, [r7, #14]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	32ae      	adds	r2, #174	; 0xae
 80091b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	4798      	blx	r3
 80091c2:	4603      	mov	r3, r0
 80091c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091c6:	e004      	b.n	80091d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80091c8:	2303      	movs	r3, #3
 80091ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091cc:	e001      	b.n	80091d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80091ce:	2303      	movs	r3, #3
 80091d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	88db      	ldrh	r3, [r3, #6]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d110      	bne.n	80091fc <USBD_StdItfReq+0xc0>
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10d      	bne.n	80091fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fdc7 	bl	8009d74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091e6:	e009      	b.n	80091fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fcf7 	bl	8009bde <USBD_CtlError>
          break;
 80091f0:	e004      	b.n	80091fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fcf2 	bl	8009bde <USBD_CtlError>
          break;
 80091fa:	e000      	b.n	80091fe <USBD_StdItfReq+0xc2>
          break;
 80091fc:	bf00      	nop
      }
      break;
 80091fe:	e004      	b.n	800920a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fceb 	bl	8009bde <USBD_CtlError>
      break;
 8009208:	bf00      	nop
  }

  return ret;
 800920a:	7bfb      	ldrb	r3, [r7, #15]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	889b      	ldrh	r3, [r3, #4]
 8009226:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009230:	2b40      	cmp	r3, #64	; 0x40
 8009232:	d007      	beq.n	8009244 <USBD_StdEPReq+0x30>
 8009234:	2b40      	cmp	r3, #64	; 0x40
 8009236:	f200 817f 	bhi.w	8009538 <USBD_StdEPReq+0x324>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d02a      	beq.n	8009294 <USBD_StdEPReq+0x80>
 800923e:	2b20      	cmp	r3, #32
 8009240:	f040 817a 	bne.w	8009538 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009244:	7bbb      	ldrb	r3, [r7, #14]
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff fe83 	bl	8008f54 <USBD_CoreFindEP>
 800924e:	4603      	mov	r3, r0
 8009250:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009252:	7b7b      	ldrb	r3, [r7, #13]
 8009254:	2bff      	cmp	r3, #255	; 0xff
 8009256:	f000 8174 	beq.w	8009542 <USBD_StdEPReq+0x32e>
 800925a:	7b7b      	ldrb	r3, [r7, #13]
 800925c:	2b00      	cmp	r3, #0
 800925e:	f040 8170 	bne.w	8009542 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009262:	7b7a      	ldrb	r2, [r7, #13]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800926a:	7b7a      	ldrb	r2, [r7, #13]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	32ae      	adds	r2, #174	; 0xae
 8009270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 8163 	beq.w	8009542 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800927c:	7b7a      	ldrb	r2, [r7, #13]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	32ae      	adds	r2, #174	; 0xae
 8009282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
 800928e:	4603      	mov	r3, r0
 8009290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009292:	e156      	b.n	8009542 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	785b      	ldrb	r3, [r3, #1]
 8009298:	2b03      	cmp	r3, #3
 800929a:	d008      	beq.n	80092ae <USBD_StdEPReq+0x9a>
 800929c:	2b03      	cmp	r3, #3
 800929e:	f300 8145 	bgt.w	800952c <USBD_StdEPReq+0x318>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 809b 	beq.w	80093de <USBD_StdEPReq+0x1ca>
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d03c      	beq.n	8009326 <USBD_StdEPReq+0x112>
 80092ac:	e13e      	b.n	800952c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d002      	beq.n	80092c0 <USBD_StdEPReq+0xac>
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d016      	beq.n	80092ec <USBD_StdEPReq+0xd8>
 80092be:	e02c      	b.n	800931a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00d      	beq.n	80092e2 <USBD_StdEPReq+0xce>
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	2b80      	cmp	r3, #128	; 0x80
 80092ca:	d00a      	beq.n	80092e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f004 fc89 	bl	800dbe8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092d6:	2180      	movs	r1, #128	; 0x80
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f004 fc85 	bl	800dbe8 <USBD_LL_StallEP>
 80092de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092e0:	e020      	b.n	8009324 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fc7a 	bl	8009bde <USBD_CtlError>
              break;
 80092ea:	e01b      	b.n	8009324 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	885b      	ldrh	r3, [r3, #2]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10e      	bne.n	8009312 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00b      	beq.n	8009312 <USBD_StdEPReq+0xfe>
 80092fa:	7bbb      	ldrb	r3, [r7, #14]
 80092fc:	2b80      	cmp	r3, #128	; 0x80
 80092fe:	d008      	beq.n	8009312 <USBD_StdEPReq+0xfe>
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	88db      	ldrh	r3, [r3, #6]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d104      	bne.n	8009312 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009308:	7bbb      	ldrb	r3, [r7, #14]
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f004 fc6b 	bl	800dbe8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fd2e 	bl	8009d74 <USBD_CtlSendStatus>

              break;
 8009318:	e004      	b.n	8009324 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fc5e 	bl	8009bde <USBD_CtlError>
              break;
 8009322:	bf00      	nop
          }
          break;
 8009324:	e107      	b.n	8009536 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b02      	cmp	r3, #2
 8009330:	d002      	beq.n	8009338 <USBD_StdEPReq+0x124>
 8009332:	2b03      	cmp	r3, #3
 8009334:	d016      	beq.n	8009364 <USBD_StdEPReq+0x150>
 8009336:	e04b      	b.n	80093d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00d      	beq.n	800935a <USBD_StdEPReq+0x146>
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b80      	cmp	r3, #128	; 0x80
 8009342:	d00a      	beq.n	800935a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f004 fc4d 	bl	800dbe8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800934e:	2180      	movs	r1, #128	; 0x80
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f004 fc49 	bl	800dbe8 <USBD_LL_StallEP>
 8009356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009358:	e040      	b.n	80093dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fc3e 	bl	8009bde <USBD_CtlError>
              break;
 8009362:	e03b      	b.n	80093dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	885b      	ldrh	r3, [r3, #2]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d136      	bne.n	80093da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009372:	2b00      	cmp	r3, #0
 8009374:	d004      	beq.n	8009380 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009376:	7bbb      	ldrb	r3, [r7, #14]
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f004 fc53 	bl	800dc26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fcf7 	bl	8009d74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7ff fde2 	bl	8008f54 <USBD_CoreFindEP>
 8009390:	4603      	mov	r3, r0
 8009392:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009394:	7b7b      	ldrb	r3, [r7, #13]
 8009396:	2bff      	cmp	r3, #255	; 0xff
 8009398:	d01f      	beq.n	80093da <USBD_StdEPReq+0x1c6>
 800939a:	7b7b      	ldrb	r3, [r7, #13]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d11c      	bne.n	80093da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80093a0:	7b7a      	ldrb	r2, [r7, #13]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80093a8:	7b7a      	ldrb	r2, [r7, #13]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	32ae      	adds	r2, #174	; 0xae
 80093ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d010      	beq.n	80093da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093b8:	7b7a      	ldrb	r2, [r7, #13]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	32ae      	adds	r2, #174	; 0xae
 80093be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	4798      	blx	r3
 80093ca:	4603      	mov	r3, r0
 80093cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80093ce:	e004      	b.n	80093da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fc03 	bl	8009bde <USBD_CtlError>
              break;
 80093d8:	e000      	b.n	80093dc <USBD_StdEPReq+0x1c8>
              break;
 80093da:	bf00      	nop
          }
          break;
 80093dc:	e0ab      	b.n	8009536 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d002      	beq.n	80093f0 <USBD_StdEPReq+0x1dc>
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d032      	beq.n	8009454 <USBD_StdEPReq+0x240>
 80093ee:	e097      	b.n	8009520 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d007      	beq.n	8009406 <USBD_StdEPReq+0x1f2>
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b80      	cmp	r3, #128	; 0x80
 80093fa:	d004      	beq.n	8009406 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fbed 	bl	8009bde <USBD_CtlError>
                break;
 8009404:	e091      	b.n	800952a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800940a:	2b00      	cmp	r3, #0
 800940c:	da0b      	bge.n	8009426 <USBD_StdEPReq+0x212>
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	3310      	adds	r3, #16
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	4413      	add	r3, r2
 8009422:	3304      	adds	r3, #4
 8009424:	e00b      	b.n	800943e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009426:	7bbb      	ldrb	r3, [r7, #14]
 8009428:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	4413      	add	r3, r2
 800943c:	3304      	adds	r3, #4
 800943e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2202      	movs	r2, #2
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fc37 	bl	8009cc0 <USBD_CtlSendData>
              break;
 8009452:	e06a      	b.n	800952a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009458:	2b00      	cmp	r3, #0
 800945a:	da11      	bge.n	8009480 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800945c:	7bbb      	ldrb	r3, [r7, #14]
 800945e:	f003 020f 	and.w	r2, r3, #15
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	440b      	add	r3, r1
 800946e:	3324      	adds	r3, #36	; 0x24
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d117      	bne.n	80094a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fbb0 	bl	8009bde <USBD_CtlError>
                  break;
 800947e:	e054      	b.n	800952a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	f003 020f 	and.w	r2, r3, #15
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	440b      	add	r3, r1
 8009492:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d104      	bne.n	80094a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fb9d 	bl	8009bde <USBD_CtlError>
                  break;
 80094a4:	e041      	b.n	800952a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	da0b      	bge.n	80094c6 <USBD_StdEPReq+0x2b2>
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	3310      	adds	r3, #16
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	4413      	add	r3, r2
 80094c2:	3304      	adds	r3, #4
 80094c4:	e00b      	b.n	80094de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
 80094c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094cc:	4613      	mov	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	4413      	add	r3, r2
 80094dc:	3304      	adds	r3, #4
 80094de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <USBD_StdEPReq+0x2d8>
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b80      	cmp	r3, #128	; 0x80
 80094ea:	d103      	bne.n	80094f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	e00e      	b.n	8009512 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f004 fbb3 	bl	800dc64 <USBD_LL_IsStallEP>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2201      	movs	r2, #1
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	e002      	b.n	8009512 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	2202      	movs	r2, #2
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fbd1 	bl	8009cc0 <USBD_CtlSendData>
              break;
 800951e:	e004      	b.n	800952a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fb5b 	bl	8009bde <USBD_CtlError>
              break;
 8009528:	bf00      	nop
          }
          break;
 800952a:	e004      	b.n	8009536 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fb55 	bl	8009bde <USBD_CtlError>
          break;
 8009534:	bf00      	nop
      }
      break;
 8009536:	e005      	b.n	8009544 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fb4f 	bl	8009bde <USBD_CtlError>
      break;
 8009540:	e000      	b.n	8009544 <USBD_StdEPReq+0x330>
      break;
 8009542:	bf00      	nop
  }

  return ret;
 8009544:	7bfb      	ldrb	r3, [r7, #15]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	885b      	ldrh	r3, [r3, #2]
 800956a:	0a1b      	lsrs	r3, r3, #8
 800956c:	b29b      	uxth	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	2b06      	cmp	r3, #6
 8009572:	f200 8128 	bhi.w	80097c6 <USBD_GetDescriptor+0x276>
 8009576:	a201      	add	r2, pc, #4	; (adr r2, 800957c <USBD_GetDescriptor+0x2c>)
 8009578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957c:	08009599 	.word	0x08009599
 8009580:	080095b1 	.word	0x080095b1
 8009584:	080095f1 	.word	0x080095f1
 8009588:	080097c7 	.word	0x080097c7
 800958c:	080097c7 	.word	0x080097c7
 8009590:	08009767 	.word	0x08009767
 8009594:	08009793 	.word	0x08009793
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	7c12      	ldrb	r2, [r2, #16]
 80095a4:	f107 0108 	add.w	r1, r7, #8
 80095a8:	4610      	mov	r0, r2
 80095aa:	4798      	blx	r3
 80095ac:	60f8      	str	r0, [r7, #12]
      break;
 80095ae:	e112      	b.n	80097d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	7c1b      	ldrb	r3, [r3, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10d      	bne.n	80095d4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c0:	f107 0208 	add.w	r2, r7, #8
 80095c4:	4610      	mov	r0, r2
 80095c6:	4798      	blx	r3
 80095c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	3301      	adds	r3, #1
 80095ce:	2202      	movs	r2, #2
 80095d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095d2:	e100      	b.n	80097d6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	f107 0208 	add.w	r2, r7, #8
 80095e0:	4610      	mov	r0, r2
 80095e2:	4798      	blx	r3
 80095e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3301      	adds	r3, #1
 80095ea:	2202      	movs	r2, #2
 80095ec:	701a      	strb	r2, [r3, #0]
      break;
 80095ee:	e0f2      	b.n	80097d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	885b      	ldrh	r3, [r3, #2]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b05      	cmp	r3, #5
 80095f8:	f200 80ac 	bhi.w	8009754 <USBD_GetDescriptor+0x204>
 80095fc:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <USBD_GetDescriptor+0xb4>)
 80095fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009602:	bf00      	nop
 8009604:	0800961d 	.word	0x0800961d
 8009608:	08009651 	.word	0x08009651
 800960c:	08009685 	.word	0x08009685
 8009610:	080096b9 	.word	0x080096b9
 8009614:	080096ed 	.word	0x080096ed
 8009618:	08009721 	.word	0x08009721
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00b      	beq.n	8009640 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	7c12      	ldrb	r2, [r2, #16]
 8009634:	f107 0108 	add.w	r1, r7, #8
 8009638:	4610      	mov	r0, r2
 800963a:	4798      	blx	r3
 800963c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800963e:	e091      	b.n	8009764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 facb 	bl	8009bde <USBD_CtlError>
            err++;
 8009648:	7afb      	ldrb	r3, [r7, #11]
 800964a:	3301      	adds	r3, #1
 800964c:	72fb      	strb	r3, [r7, #11]
          break;
 800964e:	e089      	b.n	8009764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00b      	beq.n	8009674 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	7c12      	ldrb	r2, [r2, #16]
 8009668:	f107 0108 	add.w	r1, r7, #8
 800966c:	4610      	mov	r0, r2
 800966e:	4798      	blx	r3
 8009670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009672:	e077      	b.n	8009764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fab1 	bl	8009bde <USBD_CtlError>
            err++;
 800967c:	7afb      	ldrb	r3, [r7, #11]
 800967e:	3301      	adds	r3, #1
 8009680:	72fb      	strb	r3, [r7, #11]
          break;
 8009682:	e06f      	b.n	8009764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00b      	beq.n	80096a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	7c12      	ldrb	r2, [r2, #16]
 800969c:	f107 0108 	add.w	r1, r7, #8
 80096a0:	4610      	mov	r0, r2
 80096a2:	4798      	blx	r3
 80096a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096a6:	e05d      	b.n	8009764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096a8:	6839      	ldr	r1, [r7, #0]
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fa97 	bl	8009bde <USBD_CtlError>
            err++;
 80096b0:	7afb      	ldrb	r3, [r7, #11]
 80096b2:	3301      	adds	r3, #1
 80096b4:	72fb      	strb	r3, [r7, #11]
          break;
 80096b6:	e055      	b.n	8009764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00b      	beq.n	80096dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	7c12      	ldrb	r2, [r2, #16]
 80096d0:	f107 0108 	add.w	r1, r7, #8
 80096d4:	4610      	mov	r0, r2
 80096d6:	4798      	blx	r3
 80096d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096da:	e043      	b.n	8009764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096dc:	6839      	ldr	r1, [r7, #0]
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fa7d 	bl	8009bde <USBD_CtlError>
            err++;
 80096e4:	7afb      	ldrb	r3, [r7, #11]
 80096e6:	3301      	adds	r3, #1
 80096e8:	72fb      	strb	r3, [r7, #11]
          break;
 80096ea:	e03b      	b.n	8009764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00b      	beq.n	8009710 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	7c12      	ldrb	r2, [r2, #16]
 8009704:	f107 0108 	add.w	r1, r7, #8
 8009708:	4610      	mov	r0, r2
 800970a:	4798      	blx	r3
 800970c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800970e:	e029      	b.n	8009764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa63 	bl	8009bde <USBD_CtlError>
            err++;
 8009718:	7afb      	ldrb	r3, [r7, #11]
 800971a:	3301      	adds	r3, #1
 800971c:	72fb      	strb	r3, [r7, #11]
          break;
 800971e:	e021      	b.n	8009764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00b      	beq.n	8009744 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	7c12      	ldrb	r2, [r2, #16]
 8009738:	f107 0108 	add.w	r1, r7, #8
 800973c:	4610      	mov	r0, r2
 800973e:	4798      	blx	r3
 8009740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009742:	e00f      	b.n	8009764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fa49 	bl	8009bde <USBD_CtlError>
            err++;
 800974c:	7afb      	ldrb	r3, [r7, #11]
 800974e:	3301      	adds	r3, #1
 8009750:	72fb      	strb	r3, [r7, #11]
          break;
 8009752:	e007      	b.n	8009764 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fa41 	bl	8009bde <USBD_CtlError>
          err++;
 800975c:	7afb      	ldrb	r3, [r7, #11]
 800975e:	3301      	adds	r3, #1
 8009760:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009762:	bf00      	nop
      }
      break;
 8009764:	e037      	b.n	80097d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	7c1b      	ldrb	r3, [r3, #16]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d109      	bne.n	8009782 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009776:	f107 0208 	add.w	r2, r7, #8
 800977a:	4610      	mov	r0, r2
 800977c:	4798      	blx	r3
 800977e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009780:	e029      	b.n	80097d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fa2a 	bl	8009bde <USBD_CtlError>
        err++;
 800978a:	7afb      	ldrb	r3, [r7, #11]
 800978c:	3301      	adds	r3, #1
 800978e:	72fb      	strb	r3, [r7, #11]
      break;
 8009790:	e021      	b.n	80097d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	7c1b      	ldrb	r3, [r3, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10d      	bne.n	80097b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a2:	f107 0208 	add.w	r2, r7, #8
 80097a6:	4610      	mov	r0, r2
 80097a8:	4798      	blx	r3
 80097aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	3301      	adds	r3, #1
 80097b0:	2207      	movs	r2, #7
 80097b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097b4:	e00f      	b.n	80097d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fa10 	bl	8009bde <USBD_CtlError>
        err++;
 80097be:	7afb      	ldrb	r3, [r7, #11]
 80097c0:	3301      	adds	r3, #1
 80097c2:	72fb      	strb	r3, [r7, #11]
      break;
 80097c4:	e007      	b.n	80097d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fa08 	bl	8009bde <USBD_CtlError>
      err++;
 80097ce:	7afb      	ldrb	r3, [r7, #11]
 80097d0:	3301      	adds	r3, #1
 80097d2:	72fb      	strb	r3, [r7, #11]
      break;
 80097d4:	bf00      	nop
  }

  if (err != 0U)
 80097d6:	7afb      	ldrb	r3, [r7, #11]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d11e      	bne.n	800981a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	88db      	ldrh	r3, [r3, #6]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d016      	beq.n	8009812 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80097e4:	893b      	ldrh	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00e      	beq.n	8009808 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	88da      	ldrh	r2, [r3, #6]
 80097ee:	893b      	ldrh	r3, [r7, #8]
 80097f0:	4293      	cmp	r3, r2
 80097f2:	bf28      	it	cs
 80097f4:	4613      	movcs	r3, r2
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097fa:	893b      	ldrh	r3, [r7, #8]
 80097fc:	461a      	mov	r2, r3
 80097fe:	68f9      	ldr	r1, [r7, #12]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fa5d 	bl	8009cc0 <USBD_CtlSendData>
 8009806:	e009      	b.n	800981c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f9e7 	bl	8009bde <USBD_CtlError>
 8009810:	e004      	b.n	800981c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 faae 	bl	8009d74 <USBD_CtlSendStatus>
 8009818:	e000      	b.n	800981c <USBD_GetDescriptor+0x2cc>
    return;
 800981a:	bf00      	nop
  }
}
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop

08009824 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	889b      	ldrh	r3, [r3, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d131      	bne.n	800989a <USBD_SetAddress+0x76>
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	88db      	ldrh	r3, [r3, #6]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d12d      	bne.n	800989a <USBD_SetAddress+0x76>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	885b      	ldrh	r3, [r3, #2]
 8009842:	2b7f      	cmp	r3, #127	; 0x7f
 8009844:	d829      	bhi.n	800989a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	885b      	ldrh	r3, [r3, #2]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009850:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b03      	cmp	r3, #3
 800985c:	d104      	bne.n	8009868 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f9bc 	bl	8009bde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009866:	e01d      	b.n	80098a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	7bfa      	ldrb	r2, [r7, #15]
 800986c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f004 fa21 	bl	800dcbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fa7a 	bl	8009d74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d004      	beq.n	8009890 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2202      	movs	r2, #2
 800988a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800988e:	e009      	b.n	80098a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009898:	e004      	b.n	80098a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f99e 	bl	8009bde <USBD_CtlError>
  }
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	885b      	ldrh	r3, [r3, #2]
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	4b4e      	ldr	r3, [pc, #312]	; (80099fc <USBD_SetConfig+0x150>)
 80098c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098c4:	4b4d      	ldr	r3, [pc, #308]	; (80099fc <USBD_SetConfig+0x150>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d905      	bls.n	80098d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f985 	bl	8009bde <USBD_CtlError>
    return USBD_FAIL;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e08c      	b.n	80099f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d002      	beq.n	80098ea <USBD_SetConfig+0x3e>
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d029      	beq.n	800993c <USBD_SetConfig+0x90>
 80098e8:	e075      	b.n	80099d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80098ea:	4b44      	ldr	r3, [pc, #272]	; (80099fc <USBD_SetConfig+0x150>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d020      	beq.n	8009934 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80098f2:	4b42      	ldr	r3, [pc, #264]	; (80099fc <USBD_SetConfig+0x150>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098fc:	4b3f      	ldr	r3, [pc, #252]	; (80099fc <USBD_SetConfig+0x150>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	4619      	mov	r1, r3
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f7fe ffe7 	bl	80088d6 <USBD_SetClassConfig>
 8009908:	4603      	mov	r3, r0
 800990a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800990c:	7bfb      	ldrb	r3, [r7, #15]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d008      	beq.n	8009924 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f962 	bl	8009bde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009922:	e065      	b.n	80099f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fa25 	bl	8009d74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2203      	movs	r2, #3
 800992e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009932:	e05d      	b.n	80099f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fa1d 	bl	8009d74 <USBD_CtlSendStatus>
      break;
 800993a:	e059      	b.n	80099f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800993c:	4b2f      	ldr	r3, [pc, #188]	; (80099fc <USBD_SetConfig+0x150>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d112      	bne.n	800996a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800994c:	4b2b      	ldr	r3, [pc, #172]	; (80099fc <USBD_SetConfig+0x150>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009956:	4b29      	ldr	r3, [pc, #164]	; (80099fc <USBD_SetConfig+0x150>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f7fe ffd6 	bl	800890e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fa06 	bl	8009d74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009968:	e042      	b.n	80099f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800996a:	4b24      	ldr	r3, [pc, #144]	; (80099fc <USBD_SetConfig+0x150>)
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	429a      	cmp	r2, r3
 8009976:	d02a      	beq.n	80099ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	b2db      	uxtb	r3, r3
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7fe ffc4 	bl	800890e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009986:	4b1d      	ldr	r3, [pc, #116]	; (80099fc <USBD_SetConfig+0x150>)
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009990:	4b1a      	ldr	r3, [pc, #104]	; (80099fc <USBD_SetConfig+0x150>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7fe ff9d 	bl	80088d6 <USBD_SetClassConfig>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00f      	beq.n	80099c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f918 	bl	8009bde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	4619      	mov	r1, r3
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7fe ffa9 	bl	800890e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80099c4:	e014      	b.n	80099f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f9d4 	bl	8009d74 <USBD_CtlSendStatus>
      break;
 80099cc:	e010      	b.n	80099f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f9d0 	bl	8009d74 <USBD_CtlSendStatus>
      break;
 80099d4:	e00c      	b.n	80099f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f900 	bl	8009bde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099de:	4b07      	ldr	r3, [pc, #28]	; (80099fc <USBD_SetConfig+0x150>)
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7fe ff92 	bl	800890e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80099ea:	2303      	movs	r3, #3
 80099ec:	73fb      	strb	r3, [r7, #15]
      break;
 80099ee:	bf00      	nop
  }

  return ret;
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	200003d4 	.word	0x200003d4

08009a00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	88db      	ldrh	r3, [r3, #6]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d004      	beq.n	8009a1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f8e2 	bl	8009bde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a1a:	e023      	b.n	8009a64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	dc02      	bgt.n	8009a2e <USBD_GetConfig+0x2e>
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	dc03      	bgt.n	8009a34 <USBD_GetConfig+0x34>
 8009a2c:	e015      	b.n	8009a5a <USBD_GetConfig+0x5a>
 8009a2e:	2b03      	cmp	r3, #3
 8009a30:	d00b      	beq.n	8009a4a <USBD_GetConfig+0x4a>
 8009a32:	e012      	b.n	8009a5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	2201      	movs	r2, #1
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f93c 	bl	8009cc0 <USBD_CtlSendData>
        break;
 8009a48:	e00c      	b.n	8009a64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	2201      	movs	r2, #1
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f934 	bl	8009cc0 <USBD_CtlSendData>
        break;
 8009a58:	e004      	b.n	8009a64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f8be 	bl	8009bde <USBD_CtlError>
        break;
 8009a62:	bf00      	nop
}
 8009a64:	bf00      	nop
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d81e      	bhi.n	8009ac2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	88db      	ldrh	r3, [r3, #6]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d004      	beq.n	8009a96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f8a5 	bl	8009bde <USBD_CtlError>
        break;
 8009a94:	e01a      	b.n	8009acc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d005      	beq.n	8009ab2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	f043 0202 	orr.w	r2, r3, #2
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	330c      	adds	r3, #12
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f900 	bl	8009cc0 <USBD_CtlSendData>
      break;
 8009ac0:	e004      	b.n	8009acc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f88a 	bl	8009bde <USBD_CtlError>
      break;
 8009aca:	bf00      	nop
  }
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	885b      	ldrh	r3, [r3, #2]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d107      	bne.n	8009af6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f940 	bl	8009d74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009af4:	e013      	b.n	8009b1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	885b      	ldrh	r3, [r3, #2]
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d10b      	bne.n	8009b16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	889b      	ldrh	r3, [r3, #4]
 8009b02:	0a1b      	lsrs	r3, r3, #8
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f930 	bl	8009d74 <USBD_CtlSendStatus>
}
 8009b14:	e003      	b.n	8009b1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f860 	bl	8009bde <USBD_CtlError>
}
 8009b1e:	bf00      	nop
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b082      	sub	sp, #8
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d80b      	bhi.n	8009b56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	885b      	ldrh	r3, [r3, #2]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d10c      	bne.n	8009b60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f910 	bl	8009d74 <USBD_CtlSendStatus>
      }
      break;
 8009b54:	e004      	b.n	8009b60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f840 	bl	8009bde <USBD_CtlError>
      break;
 8009b5e:	e000      	b.n	8009b62 <USBD_ClrFeature+0x3c>
      break;
 8009b60:	bf00      	nop
  }
}
 8009b62:	bf00      	nop
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	781a      	ldrb	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	3301      	adds	r3, #1
 8009b84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	781a      	ldrb	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3301      	adds	r3, #1
 8009b92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff fa41 	bl	800901c <SWAPBYTE>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3301      	adds	r3, #1
 8009bac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f7ff fa34 	bl	800901c <SWAPBYTE>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff fa27 	bl	800901c <SWAPBYTE>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	80da      	strh	r2, [r3, #6]
}
 8009bd6:	bf00      	nop
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b082      	sub	sp, #8
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009be8:	2180      	movs	r1, #128	; 0x80
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f003 fffc 	bl	800dbe8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f003 fff8 	bl	800dbe8 <USBD_LL_StallEP>
}
 8009bf8:	bf00      	nop
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d036      	beq.n	8009c84 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009c1a:	6938      	ldr	r0, [r7, #16]
 8009c1c:	f000 f836 	bl	8009c8c <USBD_GetLen>
 8009c20:	4603      	mov	r3, r0
 8009c22:	3301      	adds	r3, #1
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	4413      	add	r3, r2
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	7812      	ldrb	r2, [r2, #0]
 8009c38:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	4413      	add	r3, r2
 8009c46:	2203      	movs	r2, #3
 8009c48:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c50:	e013      	b.n	8009c7a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	4413      	add	r3, r2
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	7812      	ldrb	r2, [r2, #0]
 8009c5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	3301      	adds	r3, #1
 8009c62:	613b      	str	r3, [r7, #16]
    idx++;
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	3301      	adds	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	4413      	add	r3, r2
 8009c70:	2200      	movs	r2, #0
 8009c72:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c74:	7dfb      	ldrb	r3, [r7, #23]
 8009c76:	3301      	adds	r3, #1
 8009c78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1e7      	bne.n	8009c52 <USBD_GetString+0x52>
 8009c82:	e000      	b.n	8009c86 <USBD_GetString+0x86>
    return;
 8009c84:	bf00      	nop
  }
}
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c9c:	e005      	b.n	8009caa <USBD_GetLen+0x1e>
  {
    len++;
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1f5      	bne.n	8009c9e <USBD_GetLen+0x12>
  }

  return len;
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f004 f807 	bl	800dcfa <USBD_LL_Transmit>

  return USBD_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b084      	sub	sp, #16
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	60f8      	str	r0, [r7, #12]
 8009cfe:	60b9      	str	r1, [r7, #8]
 8009d00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	2100      	movs	r1, #0
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f003 fff6 	bl	800dcfa <USBD_LL_Transmit>

  return USBD_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2203      	movs	r2, #3
 8009d28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	2100      	movs	r1, #0
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f003 fffa 	bl	800dd3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	60b9      	str	r1, [r7, #8]
 8009d5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	2100      	movs	r1, #0
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f003 ffe9 	bl	800dd3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2204      	movs	r2, #4
 8009d80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d84:	2300      	movs	r3, #0
 8009d86:	2200      	movs	r2, #0
 8009d88:	2100      	movs	r1, #0
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f003 ffb5 	bl	800dcfa <USBD_LL_Transmit>

  return USBD_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2205      	movs	r2, #5
 8009da6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009daa:	2300      	movs	r3, #0
 8009dac:	2200      	movs	r2, #0
 8009dae:	2100      	movs	r1, #0
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f003 ffc3 	bl	800dd3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <__NVIC_SetPriority>:
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	6039      	str	r1, [r7, #0]
 8009dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	db0a      	blt.n	8009dea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	490c      	ldr	r1, [pc, #48]	; (8009e0c <__NVIC_SetPriority+0x4c>)
 8009dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dde:	0112      	lsls	r2, r2, #4
 8009de0:	b2d2      	uxtb	r2, r2
 8009de2:	440b      	add	r3, r1
 8009de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009de8:	e00a      	b.n	8009e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	4908      	ldr	r1, [pc, #32]	; (8009e10 <__NVIC_SetPriority+0x50>)
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	f003 030f 	and.w	r3, r3, #15
 8009df6:	3b04      	subs	r3, #4
 8009df8:	0112      	lsls	r2, r2, #4
 8009dfa:	b2d2      	uxtb	r2, r2
 8009dfc:	440b      	add	r3, r1
 8009dfe:	761a      	strb	r2, [r3, #24]
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	e000e100 	.word	0xe000e100
 8009e10:	e000ed00 	.word	0xe000ed00

08009e14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009e14:	b580      	push	{r7, lr}
 8009e16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009e18:	4b05      	ldr	r3, [pc, #20]	; (8009e30 <SysTick_Handler+0x1c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009e1c:	f002 f918 	bl	800c050 <xTaskGetSchedulerState>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d001      	beq.n	8009e2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009e26:	f003 f847 	bl	800ceb8 <xPortSysTickHandler>
  }
}
 8009e2a:	bf00      	nop
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	e000e010 	.word	0xe000e010

08009e34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009e34:	b580      	push	{r7, lr}
 8009e36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009e38:	2100      	movs	r1, #0
 8009e3a:	f06f 0004 	mvn.w	r0, #4
 8009e3e:	f7ff ffbf 	bl	8009dc0 <__NVIC_SetPriority>
#endif
}
 8009e42:	bf00      	nop
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e4e:	f3ef 8305 	mrs	r3, IPSR
 8009e52:	603b      	str	r3, [r7, #0]
  return(result);
 8009e54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d003      	beq.n	8009e62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009e5a:	f06f 0305 	mvn.w	r3, #5
 8009e5e:	607b      	str	r3, [r7, #4]
 8009e60:	e00c      	b.n	8009e7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e62:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <osKernelInitialize+0x44>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d105      	bne.n	8009e76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009e6a:	4b08      	ldr	r3, [pc, #32]	; (8009e8c <osKernelInitialize+0x44>)
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	607b      	str	r3, [r7, #4]
 8009e74:	e002      	b.n	8009e7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009e76:	f04f 33ff 	mov.w	r3, #4294967295
 8009e7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e7c:	687b      	ldr	r3, [r7, #4]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	200003d8 	.word	0x200003d8

08009e90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e96:	f3ef 8305 	mrs	r3, IPSR
 8009e9a:	603b      	str	r3, [r7, #0]
  return(result);
 8009e9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <osKernelStart+0x1a>
    stat = osErrorISR;
 8009ea2:	f06f 0305 	mvn.w	r3, #5
 8009ea6:	607b      	str	r3, [r7, #4]
 8009ea8:	e010      	b.n	8009ecc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009eaa:	4b0b      	ldr	r3, [pc, #44]	; (8009ed8 <osKernelStart+0x48>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d109      	bne.n	8009ec6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009eb2:	f7ff ffbf 	bl	8009e34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009eb6:	4b08      	ldr	r3, [pc, #32]	; (8009ed8 <osKernelStart+0x48>)
 8009eb8:	2202      	movs	r2, #2
 8009eba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ebc:	f001 fc80 	bl	800b7c0 <vTaskStartScheduler>
      stat = osOK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	607b      	str	r3, [r7, #4]
 8009ec4:	e002      	b.n	8009ecc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ecc:	687b      	ldr	r3, [r7, #4]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	200003d8 	.word	0x200003d8

08009edc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b08e      	sub	sp, #56	; 0x38
 8009ee0:	af04      	add	r7, sp, #16
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009eec:	f3ef 8305 	mrs	r3, IPSR
 8009ef0:	617b      	str	r3, [r7, #20]
  return(result);
 8009ef2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d17e      	bne.n	8009ff6 <osThreadNew+0x11a>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d07b      	beq.n	8009ff6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009efe:	2380      	movs	r3, #128	; 0x80
 8009f00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009f02:	2318      	movs	r3, #24
 8009f04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009f06:	2300      	movs	r3, #0
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d045      	beq.n	8009fa2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <osThreadNew+0x48>
        name = attr->name;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d008      	beq.n	8009f4a <osThreadNew+0x6e>
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	2b38      	cmp	r3, #56	; 0x38
 8009f3c:	d805      	bhi.n	8009f4a <osThreadNew+0x6e>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <osThreadNew+0x72>
        return (NULL);
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	e054      	b.n	8009ff8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	695b      	ldr	r3, [r3, #20]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	695b      	ldr	r3, [r3, #20]
 8009f5a:	089b      	lsrs	r3, r3, #2
 8009f5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00e      	beq.n	8009f84 <osThreadNew+0xa8>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	2b5b      	cmp	r3, #91	; 0x5b
 8009f6c:	d90a      	bls.n	8009f84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d006      	beq.n	8009f84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d002      	beq.n	8009f84 <osThreadNew+0xa8>
        mem = 1;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	61bb      	str	r3, [r7, #24]
 8009f82:	e010      	b.n	8009fa6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10c      	bne.n	8009fa6 <osThreadNew+0xca>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d108      	bne.n	8009fa6 <osThreadNew+0xca>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d104      	bne.n	8009fa6 <osThreadNew+0xca>
          mem = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	61bb      	str	r3, [r7, #24]
 8009fa0:	e001      	b.n	8009fa6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d110      	bne.n	8009fce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fb4:	9202      	str	r2, [sp, #8]
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	6a3a      	ldr	r2, [r7, #32]
 8009fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f001 f8ae 	bl	800b124 <xTaskCreateStatic>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	613b      	str	r3, [r7, #16]
 8009fcc:	e013      	b.n	8009ff6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d110      	bne.n	8009ff6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	f107 0310 	add.w	r3, r7, #16
 8009fdc:	9301      	str	r3, [sp, #4]
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f001 f8f9 	bl	800b1de <xTaskCreate>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d001      	beq.n	8009ff6 <osThreadNew+0x11a>
            hTask = NULL;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ff6:	693b      	ldr	r3, [r7, #16]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3728      	adds	r7, #40	; 0x28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a008:	f3ef 8305 	mrs	r3, IPSR
 800a00c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a00e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a010:	2b00      	cmp	r3, #0
 800a012:	d003      	beq.n	800a01c <osDelay+0x1c>
    stat = osErrorISR;
 800a014:	f06f 0305 	mvn.w	r3, #5
 800a018:	60fb      	str	r3, [r7, #12]
 800a01a:	e007      	b.n	800a02c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d002      	beq.n	800a02c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f001 fa1e 	bl	800b468 <vTaskDelay>
    }
  }

  return (stat);
 800a02c:	68fb      	ldr	r3, [r7, #12]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a036:	b580      	push	{r7, lr}
 800a038:	b088      	sub	sp, #32
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a03e:	2300      	movs	r3, #0
 800a040:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a042:	f3ef 8305 	mrs	r3, IPSR
 800a046:	60bb      	str	r3, [r7, #8]
  return(result);
 800a048:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d174      	bne.n	800a138 <osMutexNew+0x102>
    if (attr != NULL) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d003      	beq.n	800a05c <osMutexNew+0x26>
      type = attr->attr_bits;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	61bb      	str	r3, [r7, #24]
 800a05a:	e001      	b.n	800a060 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a05c:	2300      	movs	r3, #0
 800a05e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <osMutexNew+0x3a>
      rmtx = 1U;
 800a06a:	2301      	movs	r3, #1
 800a06c:	617b      	str	r3, [r7, #20]
 800a06e:	e001      	b.n	800a074 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	f003 0308 	and.w	r3, r3, #8
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d15c      	bne.n	800a138 <osMutexNew+0x102>
      mem = -1;
 800a07e:	f04f 33ff 	mov.w	r3, #4294967295
 800a082:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d015      	beq.n	800a0b6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d006      	beq.n	800a0a0 <osMutexNew+0x6a>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	2b4f      	cmp	r3, #79	; 0x4f
 800a098:	d902      	bls.n	800a0a0 <osMutexNew+0x6a>
          mem = 1;
 800a09a:	2301      	movs	r3, #1
 800a09c:	613b      	str	r3, [r7, #16]
 800a09e:	e00c      	b.n	800a0ba <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d108      	bne.n	800a0ba <osMutexNew+0x84>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d104      	bne.n	800a0ba <osMutexNew+0x84>
            mem = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	613b      	str	r3, [r7, #16]
 800a0b4:	e001      	b.n	800a0ba <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d112      	bne.n	800a0e6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d007      	beq.n	800a0d6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	2004      	movs	r0, #4
 800a0ce:	f000 fb02 	bl	800a6d6 <xQueueCreateMutexStatic>
 800a0d2:	61f8      	str	r0, [r7, #28]
 800a0d4:	e016      	b.n	800a104 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	2001      	movs	r0, #1
 800a0de:	f000 fafa 	bl	800a6d6 <xQueueCreateMutexStatic>
 800a0e2:	61f8      	str	r0, [r7, #28]
 800a0e4:	e00e      	b.n	800a104 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10b      	bne.n	800a104 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a0f2:	2004      	movs	r0, #4
 800a0f4:	f000 fad7 	bl	800a6a6 <xQueueCreateMutex>
 800a0f8:	61f8      	str	r0, [r7, #28]
 800a0fa:	e003      	b.n	800a104 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	f000 fad2 	bl	800a6a6 <xQueueCreateMutex>
 800a102:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00c      	beq.n	800a124 <osMutexNew+0xee>
        if (attr != NULL) {
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d003      	beq.n	800a118 <osMutexNew+0xe2>
          name = attr->name;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	e001      	b.n	800a11c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a118:	2300      	movs	r3, #0
 800a11a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a11c:	68f9      	ldr	r1, [r7, #12]
 800a11e:	69f8      	ldr	r0, [r7, #28]
 800a120:	f000 ffa2 	bl	800b068 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d006      	beq.n	800a138 <osMutexNew+0x102>
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d003      	beq.n	800a138 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	f043 0301 	orr.w	r3, r3, #1
 800a136:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a138:	69fb      	ldr	r3, [r7, #28]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3720      	adds	r7, #32
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a142:	b580      	push	{r7, lr}
 800a144:	b08a      	sub	sp, #40	; 0x28
 800a146:	af02      	add	r7, sp, #8
 800a148:	60f8      	str	r0, [r7, #12]
 800a14a:	60b9      	str	r1, [r7, #8]
 800a14c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a152:	f3ef 8305 	mrs	r3, IPSR
 800a156:	613b      	str	r3, [r7, #16]
  return(result);
 800a158:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d15f      	bne.n	800a21e <osMessageQueueNew+0xdc>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d05c      	beq.n	800a21e <osMessageQueueNew+0xdc>
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d059      	beq.n	800a21e <osMessageQueueNew+0xdc>
    mem = -1;
 800a16a:	f04f 33ff 	mov.w	r3, #4294967295
 800a16e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d029      	beq.n	800a1ca <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d012      	beq.n	800a1a4 <osMessageQueueNew+0x62>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	2b4f      	cmp	r3, #79	; 0x4f
 800a184:	d90e      	bls.n	800a1a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00a      	beq.n	800a1a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	695a      	ldr	r2, [r3, #20]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	68b9      	ldr	r1, [r7, #8]
 800a196:	fb01 f303 	mul.w	r3, r1, r3
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d302      	bcc.n	800a1a4 <osMessageQueueNew+0x62>
        mem = 1;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	61bb      	str	r3, [r7, #24]
 800a1a2:	e014      	b.n	800a1ce <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d110      	bne.n	800a1ce <osMessageQueueNew+0x8c>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10c      	bne.n	800a1ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d108      	bne.n	800a1ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d104      	bne.n	800a1ce <osMessageQueueNew+0x8c>
          mem = 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	61bb      	str	r3, [r7, #24]
 800a1c8:	e001      	b.n	800a1ce <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d10b      	bne.n	800a1ec <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691a      	ldr	r2, [r3, #16]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	2100      	movs	r1, #0
 800a1de:	9100      	str	r1, [sp, #0]
 800a1e0:	68b9      	ldr	r1, [r7, #8]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 f970 	bl	800a4c8 <xQueueGenericCreateStatic>
 800a1e8:	61f8      	str	r0, [r7, #28]
 800a1ea:	e008      	b.n	800a1fe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d105      	bne.n	800a1fe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	68b9      	ldr	r1, [r7, #8]
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 f9de 	bl	800a5b8 <xQueueGenericCreate>
 800a1fc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00c      	beq.n	800a21e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	617b      	str	r3, [r7, #20]
 800a210:	e001      	b.n	800a216 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a216:	6979      	ldr	r1, [r7, #20]
 800a218:	69f8      	ldr	r0, [r7, #28]
 800a21a:	f000 ff25 	bl	800b068 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a21e:	69fb      	ldr	r3, [r7, #28]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3720      	adds	r7, #32
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4a07      	ldr	r2, [pc, #28]	; (800a254 <vApplicationGetIdleTaskMemory+0x2c>)
 800a238:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	4a06      	ldr	r2, [pc, #24]	; (800a258 <vApplicationGetIdleTaskMemory+0x30>)
 800a23e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2280      	movs	r2, #128	; 0x80
 800a244:	601a      	str	r2, [r3, #0]
}
 800a246:	bf00      	nop
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	200003dc 	.word	0x200003dc
 800a258:	20000438 	.word	0x20000438

0800a25c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	4a07      	ldr	r2, [pc, #28]	; (800a288 <vApplicationGetTimerTaskMemory+0x2c>)
 800a26c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	4a06      	ldr	r2, [pc, #24]	; (800a28c <vApplicationGetTimerTaskMemory+0x30>)
 800a272:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a27a:	601a      	str	r2, [r3, #0]
}
 800a27c:	bf00      	nop
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	20000638 	.word	0x20000638
 800a28c:	20000694 	.word	0x20000694

0800a290 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f103 0208 	add.w	r2, r3, #8
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f103 0208 	add.w	r2, r3, #8
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f103 0208 	add.w	r2, r3, #8
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a2de:	bf00      	nop
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b085      	sub	sp, #20
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	601a      	str	r2, [r3, #0]
}
 800a326:	bf00      	nop
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a332:	b480      	push	{r7}
 800a334:	b085      	sub	sp, #20
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a348:	d103      	bne.n	800a352 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	60fb      	str	r3, [r7, #12]
 800a350:	e00c      	b.n	800a36c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	3308      	adds	r3, #8
 800a356:	60fb      	str	r3, [r7, #12]
 800a358:	e002      	b.n	800a360 <vListInsert+0x2e>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d2f6      	bcs.n	800a35a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	685a      	ldr	r2, [r3, #4]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	683a      	ldr	r2, [r7, #0]
 800a386:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	1c5a      	adds	r2, r3, #1
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	601a      	str	r2, [r3, #0]
}
 800a398:	bf00      	nop
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	6892      	ldr	r2, [r2, #8]
 800a3ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6852      	ldr	r2, [r2, #4]
 800a3c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d103      	bne.n	800a3d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	689a      	ldr	r2, [r3, #8]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	1e5a      	subs	r2, r3, #1
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10a      	bne.n	800a422 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a422:	f002 fcb7 	bl	800cd94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a42e:	68f9      	ldr	r1, [r7, #12]
 800a430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a432:	fb01 f303 	mul.w	r3, r1, r3
 800a436:	441a      	add	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a452:	3b01      	subs	r3, #1
 800a454:	68f9      	ldr	r1, [r7, #12]
 800a456:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a458:	fb01 f303 	mul.w	r3, r1, r3
 800a45c:	441a      	add	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	22ff      	movs	r2, #255	; 0xff
 800a466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	22ff      	movs	r2, #255	; 0xff
 800a46e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d114      	bne.n	800a4a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d01a      	beq.n	800a4b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3310      	adds	r3, #16
 800a484:	4618      	mov	r0, r3
 800a486:	f001 fc25 	bl	800bcd4 <xTaskRemoveFromEventList>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d012      	beq.n	800a4b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a490:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <xQueueGenericReset+0xcc>)
 800a492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	e009      	b.n	800a4b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3310      	adds	r3, #16
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff fef2 	bl	800a290 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3324      	adds	r3, #36	; 0x24
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7ff feed 	bl	800a290 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4b6:	f002 fc9d 	bl	800cdf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4ba:	2301      	movs	r3, #1
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	e000ed04 	.word	0xe000ed04

0800a4c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08e      	sub	sp, #56	; 0x38
 800a4cc:	af02      	add	r7, sp, #8
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10a      	bne.n	800a4f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10a      	bne.n	800a50e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a50a:	bf00      	nop
 800a50c:	e7fe      	b.n	800a50c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <xQueueGenericCreateStatic+0x52>
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d001      	beq.n	800a51e <xQueueGenericCreateStatic+0x56>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e000      	b.n	800a520 <xQueueGenericCreateStatic+0x58>
 800a51e:	2300      	movs	r3, #0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	623b      	str	r3, [r7, #32]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d102      	bne.n	800a546 <xQueueGenericCreateStatic+0x7e>
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <xQueueGenericCreateStatic+0x82>
 800a546:	2301      	movs	r3, #1
 800a548:	e000      	b.n	800a54c <xQueueGenericCreateStatic+0x84>
 800a54a:	2300      	movs	r3, #0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10a      	bne.n	800a566 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	61fb      	str	r3, [r7, #28]
}
 800a562:	bf00      	nop
 800a564:	e7fe      	b.n	800a564 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a566:	2350      	movs	r3, #80	; 0x50
 800a568:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2b50      	cmp	r3, #80	; 0x50
 800a56e:	d00a      	beq.n	800a586 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	61bb      	str	r3, [r7, #24]
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a586:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00d      	beq.n	800a5ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a594:	2201      	movs	r2, #1
 800a596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a59a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	68b9      	ldr	r1, [r7, #8]
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f000 f83f 	bl	800a62c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3730      	adds	r7, #48	; 0x30
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08a      	sub	sp, #40	; 0x28
 800a5bc:	af02      	add	r7, sp, #8
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10a      	bne.n	800a5e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	613b      	str	r3, [r7, #16]
}
 800a5de:	bf00      	nop
 800a5e0:	e7fe      	b.n	800a5e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	fb02 f303 	mul.w	r3, r2, r3
 800a5ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	3350      	adds	r3, #80	; 0x50
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f002 fcf1 	bl	800cfd8 <pvPortMalloc>
 800a5f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d011      	beq.n	800a622 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	3350      	adds	r3, #80	; 0x50
 800a606:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a610:	79fa      	ldrb	r2, [r7, #7]
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	4613      	mov	r3, r2
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	68b9      	ldr	r1, [r7, #8]
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f000 f805 	bl	800a62c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a622:	69bb      	ldr	r3, [r7, #24]
	}
 800a624:	4618      	mov	r0, r3
 800a626:	3720      	adds	r7, #32
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d103      	bne.n	800a648 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	e002      	b.n	800a64e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a65a:	2101      	movs	r1, #1
 800a65c:	69b8      	ldr	r0, [r7, #24]
 800a65e:	f7ff fecb 	bl	800a3f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	78fa      	ldrb	r2, [r7, #3]
 800a666:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a66a:	bf00      	nop
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00e      	beq.n	800a69e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a692:	2300      	movs	r3, #0
 800a694:	2200      	movs	r2, #0
 800a696:	2100      	movs	r1, #0
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f837 	bl	800a70c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a69e:	bf00      	nop
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b086      	sub	sp, #24
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	617b      	str	r3, [r7, #20]
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a6b8:	79fb      	ldrb	r3, [r7, #7]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	6939      	ldr	r1, [r7, #16]
 800a6be:	6978      	ldr	r0, [r7, #20]
 800a6c0:	f7ff ff7a 	bl	800a5b8 <xQueueGenericCreate>
 800a6c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f7ff ffd3 	bl	800a672 <prvInitialiseMutex>

		return xNewQueue;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
	}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3718      	adds	r7, #24
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b088      	sub	sp, #32
 800a6da:	af02      	add	r7, sp, #8
 800a6dc:	4603      	mov	r3, r0
 800a6de:	6039      	str	r1, [r7, #0]
 800a6e0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	617b      	str	r3, [r7, #20]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	6939      	ldr	r1, [r7, #16]
 800a6f4:	6978      	ldr	r0, [r7, #20]
 800a6f6:	f7ff fee7 	bl	800a4c8 <xQueueGenericCreateStatic>
 800a6fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f7ff ffb8 	bl	800a672 <prvInitialiseMutex>

		return xNewQueue;
 800a702:	68fb      	ldr	r3, [r7, #12]
	}
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08e      	sub	sp, #56	; 0x38
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a71a:	2300      	movs	r3, #0
 800a71c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10a      	bne.n	800a73e <xQueueGenericSend+0x32>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a73a:	bf00      	nop
 800a73c:	e7fe      	b.n	800a73c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d103      	bne.n	800a74c <xQueueGenericSend+0x40>
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d101      	bne.n	800a750 <xQueueGenericSend+0x44>
 800a74c:	2301      	movs	r3, #1
 800a74e:	e000      	b.n	800a752 <xQueueGenericSend+0x46>
 800a750:	2300      	movs	r3, #0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10a      	bne.n	800a76c <xQueueGenericSend+0x60>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a768:	bf00      	nop
 800a76a:	e7fe      	b.n	800a76a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d103      	bne.n	800a77a <xQueueGenericSend+0x6e>
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a776:	2b01      	cmp	r3, #1
 800a778:	d101      	bne.n	800a77e <xQueueGenericSend+0x72>
 800a77a:	2301      	movs	r3, #1
 800a77c:	e000      	b.n	800a780 <xQueueGenericSend+0x74>
 800a77e:	2300      	movs	r3, #0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10a      	bne.n	800a79a <xQueueGenericSend+0x8e>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	623b      	str	r3, [r7, #32]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a79a:	f001 fc59 	bl	800c050 <xTaskGetSchedulerState>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d102      	bne.n	800a7aa <xQueueGenericSend+0x9e>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d101      	bne.n	800a7ae <xQueueGenericSend+0xa2>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e000      	b.n	800a7b0 <xQueueGenericSend+0xa4>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10a      	bne.n	800a7ca <xQueueGenericSend+0xbe>
	__asm volatile
 800a7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	61fb      	str	r3, [r7, #28]
}
 800a7c6:	bf00      	nop
 800a7c8:	e7fe      	b.n	800a7c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7ca:	f002 fae3 	bl	800cd94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d302      	bcc.n	800a7e0 <xQueueGenericSend+0xd4>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d129      	bne.n	800a834 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	68b9      	ldr	r1, [r7, #8]
 800a7e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7e6:	f000 fb2f 	bl	800ae48 <prvCopyDataToQueue>
 800a7ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d010      	beq.n	800a816 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	3324      	adds	r3, #36	; 0x24
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f001 fa6b 	bl	800bcd4 <xTaskRemoveFromEventList>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d013      	beq.n	800a82c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a804:	4b3f      	ldr	r3, [pc, #252]	; (800a904 <xQueueGenericSend+0x1f8>)
 800a806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	e00a      	b.n	800a82c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d007      	beq.n	800a82c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a81c:	4b39      	ldr	r3, [pc, #228]	; (800a904 <xQueueGenericSend+0x1f8>)
 800a81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a82c:	f002 fae2 	bl	800cdf4 <vPortExitCritical>
				return pdPASS;
 800a830:	2301      	movs	r3, #1
 800a832:	e063      	b.n	800a8fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d103      	bne.n	800a842 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a83a:	f002 fadb 	bl	800cdf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a83e:	2300      	movs	r3, #0
 800a840:	e05c      	b.n	800a8fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a844:	2b00      	cmp	r3, #0
 800a846:	d106      	bne.n	800a856 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a848:	f107 0314 	add.w	r3, r7, #20
 800a84c:	4618      	mov	r0, r3
 800a84e:	f001 faa5 	bl	800bd9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a852:	2301      	movs	r3, #1
 800a854:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a856:	f002 facd 	bl	800cdf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a85a:	f001 f817 	bl	800b88c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a85e:	f002 fa99 	bl	800cd94 <vPortEnterCritical>
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a868:	b25b      	sxtb	r3, r3
 800a86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86e:	d103      	bne.n	800a878 <xQueueGenericSend+0x16c>
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	2200      	movs	r2, #0
 800a874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a87e:	b25b      	sxtb	r3, r3
 800a880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a884:	d103      	bne.n	800a88e <xQueueGenericSend+0x182>
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a88e:	f002 fab1 	bl	800cdf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a892:	1d3a      	adds	r2, r7, #4
 800a894:	f107 0314 	add.w	r3, r7, #20
 800a898:	4611      	mov	r1, r2
 800a89a:	4618      	mov	r0, r3
 800a89c:	f001 fa94 	bl	800bdc8 <xTaskCheckForTimeOut>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d124      	bne.n	800a8f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8a8:	f000 fbc6 	bl	800b038 <prvIsQueueFull>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d018      	beq.n	800a8e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	3310      	adds	r3, #16
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f001 f9ba 	bl	800bc34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8c2:	f000 fb51 	bl	800af68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8c6:	f000 ffef 	bl	800b8a8 <xTaskResumeAll>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f47f af7c 	bne.w	800a7ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a8d2:	4b0c      	ldr	r3, [pc, #48]	; (800a904 <xQueueGenericSend+0x1f8>)
 800a8d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d8:	601a      	str	r2, [r3, #0]
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	e772      	b.n	800a7ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a8e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8e6:	f000 fb3f 	bl	800af68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8ea:	f000 ffdd 	bl	800b8a8 <xTaskResumeAll>
 800a8ee:	e76c      	b.n	800a7ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a8f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8f2:	f000 fb39 	bl	800af68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8f6:	f000 ffd7 	bl	800b8a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a8fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3738      	adds	r7, #56	; 0x38
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	e000ed04 	.word	0xe000ed04

0800a908 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b090      	sub	sp, #64	; 0x40
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
 800a914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10a      	bne.n	800a936 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a932:	bf00      	nop
 800a934:	e7fe      	b.n	800a934 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d103      	bne.n	800a944 <xQueueGenericSendFromISR+0x3c>
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <xQueueGenericSendFromISR+0x40>
 800a944:	2301      	movs	r3, #1
 800a946:	e000      	b.n	800a94a <xQueueGenericSendFromISR+0x42>
 800a948:	2300      	movs	r3, #0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10a      	bne.n	800a964 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a960:	bf00      	nop
 800a962:	e7fe      	b.n	800a962 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	2b02      	cmp	r3, #2
 800a968:	d103      	bne.n	800a972 <xQueueGenericSendFromISR+0x6a>
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d101      	bne.n	800a976 <xQueueGenericSendFromISR+0x6e>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <xQueueGenericSendFromISR+0x70>
 800a976:	2300      	movs	r3, #0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10a      	bne.n	800a992 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	623b      	str	r3, [r7, #32]
}
 800a98e:	bf00      	nop
 800a990:	e7fe      	b.n	800a990 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a992:	f002 fae1 	bl	800cf58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a996:	f3ef 8211 	mrs	r2, BASEPRI
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	61fa      	str	r2, [r7, #28]
 800a9ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d302      	bcc.n	800a9c4 <xQueueGenericSendFromISR+0xbc>
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d12f      	bne.n	800aa24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9d4:	683a      	ldr	r2, [r7, #0]
 800a9d6:	68b9      	ldr	r1, [r7, #8]
 800a9d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9da:	f000 fa35 	bl	800ae48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e6:	d112      	bne.n	800aa0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d016      	beq.n	800aa1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f2:	3324      	adds	r3, #36	; 0x24
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f001 f96d 	bl	800bcd4 <xTaskRemoveFromEventList>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00e      	beq.n	800aa1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00b      	beq.n	800aa1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	e007      	b.n	800aa1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa12:	3301      	adds	r3, #1
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	b25a      	sxtb	r2, r3
 800aa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aa22:	e001      	b.n	800aa28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa24:	2300      	movs	r3, #0
 800aa26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3740      	adds	r7, #64	; 0x40
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
	...

0800aa40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08c      	sub	sp, #48	; 0x30
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10a      	bne.n	800aa70 <xQueueReceive+0x30>
	__asm volatile
 800aa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5e:	f383 8811 	msr	BASEPRI, r3
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	623b      	str	r3, [r7, #32]
}
 800aa6c:	bf00      	nop
 800aa6e:	e7fe      	b.n	800aa6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d103      	bne.n	800aa7e <xQueueReceive+0x3e>
 800aa76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d101      	bne.n	800aa82 <xQueueReceive+0x42>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e000      	b.n	800aa84 <xQueueReceive+0x44>
 800aa82:	2300      	movs	r3, #0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10a      	bne.n	800aa9e <xQueueReceive+0x5e>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	61fb      	str	r3, [r7, #28]
}
 800aa9a:	bf00      	nop
 800aa9c:	e7fe      	b.n	800aa9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa9e:	f001 fad7 	bl	800c050 <xTaskGetSchedulerState>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d102      	bne.n	800aaae <xQueueReceive+0x6e>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d101      	bne.n	800aab2 <xQueueReceive+0x72>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e000      	b.n	800aab4 <xQueueReceive+0x74>
 800aab2:	2300      	movs	r3, #0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <xQueueReceive+0x8e>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	61bb      	str	r3, [r7, #24]
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aace:	f002 f961 	bl	800cd94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d01f      	beq.n	800ab1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aade:	68b9      	ldr	r1, [r7, #8]
 800aae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aae2:	f000 fa1b 	bl	800af1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	1e5a      	subs	r2, r3, #1
 800aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00f      	beq.n	800ab16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf8:	3310      	adds	r3, #16
 800aafa:	4618      	mov	r0, r3
 800aafc:	f001 f8ea 	bl	800bcd4 <xTaskRemoveFromEventList>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d007      	beq.n	800ab16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab06:	4b3d      	ldr	r3, [pc, #244]	; (800abfc <xQueueReceive+0x1bc>)
 800ab08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab16:	f002 f96d 	bl	800cdf4 <vPortExitCritical>
				return pdPASS;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e069      	b.n	800abf2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d103      	bne.n	800ab2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab24:	f002 f966 	bl	800cdf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e062      	b.n	800abf2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d106      	bne.n	800ab40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab32:	f107 0310 	add.w	r3, r7, #16
 800ab36:	4618      	mov	r0, r3
 800ab38:	f001 f930 	bl	800bd9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab40:	f002 f958 	bl	800cdf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab44:	f000 fea2 	bl	800b88c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab48:	f002 f924 	bl	800cd94 <vPortEnterCritical>
 800ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab52:	b25b      	sxtb	r3, r3
 800ab54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab58:	d103      	bne.n	800ab62 <xQueueReceive+0x122>
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab68:	b25b      	sxtb	r3, r3
 800ab6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6e:	d103      	bne.n	800ab78 <xQueueReceive+0x138>
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab78:	f002 f93c 	bl	800cdf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab7c:	1d3a      	adds	r2, r7, #4
 800ab7e:	f107 0310 	add.w	r3, r7, #16
 800ab82:	4611      	mov	r1, r2
 800ab84:	4618      	mov	r0, r3
 800ab86:	f001 f91f 	bl	800bdc8 <xTaskCheckForTimeOut>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d123      	bne.n	800abd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab92:	f000 fa3b 	bl	800b00c <prvIsQueueEmpty>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d017      	beq.n	800abcc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	3324      	adds	r3, #36	; 0x24
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	4611      	mov	r1, r2
 800aba4:	4618      	mov	r0, r3
 800aba6:	f001 f845 	bl	800bc34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abac:	f000 f9dc 	bl	800af68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abb0:	f000 fe7a 	bl	800b8a8 <xTaskResumeAll>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d189      	bne.n	800aace <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800abba:	4b10      	ldr	r3, [pc, #64]	; (800abfc <xQueueReceive+0x1bc>)
 800abbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abc0:	601a      	str	r2, [r3, #0]
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	e780      	b.n	800aace <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abce:	f000 f9cb 	bl	800af68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abd2:	f000 fe69 	bl	800b8a8 <xTaskResumeAll>
 800abd6:	e77a      	b.n	800aace <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abda:	f000 f9c5 	bl	800af68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abde:	f000 fe63 	bl	800b8a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abe4:	f000 fa12 	bl	800b00c <prvIsQueueEmpty>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	f43f af6f 	beq.w	800aace <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3730      	adds	r7, #48	; 0x30
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	e000ed04 	.word	0xe000ed04

0800ac00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b08e      	sub	sp, #56	; 0x38
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac12:	2300      	movs	r3, #0
 800ac14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10a      	bne.n	800ac32 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	623b      	str	r3, [r7, #32]
}
 800ac2e:	bf00      	nop
 800ac30:	e7fe      	b.n	800ac30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00a      	beq.n	800ac50 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	61fb      	str	r3, [r7, #28]
}
 800ac4c:	bf00      	nop
 800ac4e:	e7fe      	b.n	800ac4e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac50:	f001 f9fe 	bl	800c050 <xTaskGetSchedulerState>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d102      	bne.n	800ac60 <xQueueSemaphoreTake+0x60>
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d101      	bne.n	800ac64 <xQueueSemaphoreTake+0x64>
 800ac60:	2301      	movs	r3, #1
 800ac62:	e000      	b.n	800ac66 <xQueueSemaphoreTake+0x66>
 800ac64:	2300      	movs	r3, #0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10a      	bne.n	800ac80 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ac6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6e:	f383 8811 	msr	BASEPRI, r3
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	61bb      	str	r3, [r7, #24]
}
 800ac7c:	bf00      	nop
 800ac7e:	e7fe      	b.n	800ac7e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac80:	f002 f888 	bl	800cd94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac88:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d024      	beq.n	800acda <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac92:	1e5a      	subs	r2, r3, #1
 800ac94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d104      	bne.n	800acaa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aca0:	f001 fb4c 	bl	800c33c <pvTaskIncrementMutexHeldCount>
 800aca4:	4602      	mov	r2, r0
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00f      	beq.n	800acd2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb4:	3310      	adds	r3, #16
 800acb6:	4618      	mov	r0, r3
 800acb8:	f001 f80c 	bl	800bcd4 <xTaskRemoveFromEventList>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d007      	beq.n	800acd2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acc2:	4b54      	ldr	r3, [pc, #336]	; (800ae14 <xQueueSemaphoreTake+0x214>)
 800acc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc8:	601a      	str	r2, [r3, #0]
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acd2:	f002 f88f 	bl	800cdf4 <vPortExitCritical>
				return pdPASS;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e097      	b.n	800ae0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d111      	bne.n	800ad04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ace0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00a      	beq.n	800acfc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	617b      	str	r3, [r7, #20]
}
 800acf8:	bf00      	nop
 800acfa:	e7fe      	b.n	800acfa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800acfc:	f002 f87a 	bl	800cdf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad00:	2300      	movs	r3, #0
 800ad02:	e082      	b.n	800ae0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d106      	bne.n	800ad18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad0a:	f107 030c 	add.w	r3, r7, #12
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f001 f844 	bl	800bd9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad14:	2301      	movs	r3, #1
 800ad16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad18:	f002 f86c 	bl	800cdf4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad1c:	f000 fdb6 	bl	800b88c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad20:	f002 f838 	bl	800cd94 <vPortEnterCritical>
 800ad24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad2a:	b25b      	sxtb	r3, r3
 800ad2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad30:	d103      	bne.n	800ad3a <xQueueSemaphoreTake+0x13a>
 800ad32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad40:	b25b      	sxtb	r3, r3
 800ad42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad46:	d103      	bne.n	800ad50 <xQueueSemaphoreTake+0x150>
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad50:	f002 f850 	bl	800cdf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad54:	463a      	mov	r2, r7
 800ad56:	f107 030c 	add.w	r3, r7, #12
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f001 f833 	bl	800bdc8 <xTaskCheckForTimeOut>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d132      	bne.n	800adce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad6a:	f000 f94f 	bl	800b00c <prvIsQueueEmpty>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d026      	beq.n	800adc2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d109      	bne.n	800ad90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ad7c:	f002 f80a 	bl	800cd94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f001 f981 	bl	800c08c <xTaskPriorityInherit>
 800ad8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ad8c:	f002 f832 	bl	800cdf4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	3324      	adds	r3, #36	; 0x24
 800ad94:	683a      	ldr	r2, [r7, #0]
 800ad96:	4611      	mov	r1, r2
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f000 ff4b 	bl	800bc34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ada0:	f000 f8e2 	bl	800af68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ada4:	f000 fd80 	bl	800b8a8 <xTaskResumeAll>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f47f af68 	bne.w	800ac80 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800adb0:	4b18      	ldr	r3, [pc, #96]	; (800ae14 <xQueueSemaphoreTake+0x214>)
 800adb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adb6:	601a      	str	r2, [r3, #0]
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	e75e      	b.n	800ac80 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800adc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adc4:	f000 f8d0 	bl	800af68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adc8:	f000 fd6e 	bl	800b8a8 <xTaskResumeAll>
 800adcc:	e758      	b.n	800ac80 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800adce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800add0:	f000 f8ca 	bl	800af68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800add4:	f000 fd68 	bl	800b8a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800add8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adda:	f000 f917 	bl	800b00c <prvIsQueueEmpty>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f43f af4d 	beq.w	800ac80 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ade6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00d      	beq.n	800ae08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800adec:	f001 ffd2 	bl	800cd94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800adf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adf2:	f000 f811 	bl	800ae18 <prvGetDisinheritPriorityAfterTimeout>
 800adf6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adfe:	4618      	mov	r0, r3
 800ae00:	f001 fa1a 	bl	800c238 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae04:	f001 fff6 	bl	800cdf4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3738      	adds	r7, #56	; 0x38
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	e000ed04 	.word	0xe000ed04

0800ae18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d006      	beq.n	800ae36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	e001      	b.n	800ae3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ae36:	2300      	movs	r3, #0
 800ae38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
	}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae54:	2300      	movs	r3, #0
 800ae56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10d      	bne.n	800ae82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d14d      	bne.n	800af0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f001 f972 	bl	800c15c <xTaskPriorityDisinherit>
 800ae78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	609a      	str	r2, [r3, #8]
 800ae80:	e043      	b.n	800af0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d119      	bne.n	800aebc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6858      	ldr	r0, [r3, #4]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae90:	461a      	mov	r2, r3
 800ae92:	68b9      	ldr	r1, [r7, #8]
 800ae94:	f002 fff8 	bl	800de88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea0:	441a      	add	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d32b      	bcc.n	800af0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	605a      	str	r2, [r3, #4]
 800aeba:	e026      	b.n	800af0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	68d8      	ldr	r0, [r3, #12]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec4:	461a      	mov	r2, r3
 800aec6:	68b9      	ldr	r1, [r7, #8]
 800aec8:	f002 ffde 	bl	800de88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	68da      	ldr	r2, [r3, #12]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed4:	425b      	negs	r3, r3
 800aed6:	441a      	add	r2, r3
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	68da      	ldr	r2, [r3, #12]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d207      	bcs.n	800aef8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	689a      	ldr	r2, [r3, #8]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef0:	425b      	negs	r3, r3
 800aef2:	441a      	add	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d105      	bne.n	800af0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d002      	beq.n	800af0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	3b01      	subs	r3, #1
 800af08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	1c5a      	adds	r2, r3, #1
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af12:	697b      	ldr	r3, [r7, #20]
}
 800af14:	4618      	mov	r0, r3
 800af16:	3718      	adds	r7, #24
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d018      	beq.n	800af60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	68da      	ldr	r2, [r3, #12]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af36:	441a      	add	r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	68da      	ldr	r2, [r3, #12]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	429a      	cmp	r2, r3
 800af46:	d303      	bcc.n	800af50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68d9      	ldr	r1, [r3, #12]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af58:	461a      	mov	r2, r3
 800af5a:	6838      	ldr	r0, [r7, #0]
 800af5c:	f002 ff94 	bl	800de88 <memcpy>
	}
}
 800af60:	bf00      	nop
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af70:	f001 ff10 	bl	800cd94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af7c:	e011      	b.n	800afa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af82:	2b00      	cmp	r3, #0
 800af84:	d012      	beq.n	800afac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3324      	adds	r3, #36	; 0x24
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 fea2 	bl	800bcd4 <xTaskRemoveFromEventList>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d001      	beq.n	800af9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af96:	f000 ff79 	bl	800be8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
 800af9c:	3b01      	subs	r3, #1
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	dce9      	bgt.n	800af7e <prvUnlockQueue+0x16>
 800afaa:	e000      	b.n	800afae <prvUnlockQueue+0x46>
					break;
 800afac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	22ff      	movs	r2, #255	; 0xff
 800afb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800afb6:	f001 ff1d 	bl	800cdf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afba:	f001 feeb 	bl	800cd94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afc6:	e011      	b.n	800afec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d012      	beq.n	800aff6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3310      	adds	r3, #16
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 fe7d 	bl	800bcd4 <xTaskRemoveFromEventList>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afe0:	f000 ff54 	bl	800be8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	3b01      	subs	r3, #1
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	dce9      	bgt.n	800afc8 <prvUnlockQueue+0x60>
 800aff4:	e000      	b.n	800aff8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aff6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	22ff      	movs	r2, #255	; 0xff
 800affc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b000:	f001 fef8 	bl	800cdf4 <vPortExitCritical>
}
 800b004:	bf00      	nop
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b014:	f001 febe 	bl	800cd94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d102      	bne.n	800b026 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b020:	2301      	movs	r3, #1
 800b022:	60fb      	str	r3, [r7, #12]
 800b024:	e001      	b.n	800b02a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b026:	2300      	movs	r3, #0
 800b028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b02a:	f001 fee3 	bl	800cdf4 <vPortExitCritical>

	return xReturn;
 800b02e:	68fb      	ldr	r3, [r7, #12]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b040:	f001 fea8 	bl	800cd94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d102      	bne.n	800b056 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b050:	2301      	movs	r3, #1
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	e001      	b.n	800b05a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b056:	2300      	movs	r3, #0
 800b058:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b05a:	f001 fecb 	bl	800cdf4 <vPortExitCritical>

	return xReturn;
 800b05e:	68fb      	ldr	r3, [r7, #12]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b072:	2300      	movs	r3, #0
 800b074:	60fb      	str	r3, [r7, #12]
 800b076:	e014      	b.n	800b0a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b078:	4a0f      	ldr	r2, [pc, #60]	; (800b0b8 <vQueueAddToRegistry+0x50>)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10b      	bne.n	800b09c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b084:	490c      	ldr	r1, [pc, #48]	; (800b0b8 <vQueueAddToRegistry+0x50>)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	683a      	ldr	r2, [r7, #0]
 800b08a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b08e:	4a0a      	ldr	r2, [pc, #40]	; (800b0b8 <vQueueAddToRegistry+0x50>)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	4413      	add	r3, r2
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b09a:	e006      	b.n	800b0aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	60fb      	str	r3, [r7, #12]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2b07      	cmp	r3, #7
 800b0a6:	d9e7      	bls.n	800b078 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0a8:	bf00      	nop
 800b0aa:	bf00      	nop
 800b0ac:	3714      	adds	r7, #20
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	20000a94 	.word	0x20000a94

0800b0bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0cc:	f001 fe62 	bl	800cd94 <vPortEnterCritical>
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0d6:	b25b      	sxtb	r3, r3
 800b0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0dc:	d103      	bne.n	800b0e6 <vQueueWaitForMessageRestricted+0x2a>
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ec:	b25b      	sxtb	r3, r3
 800b0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f2:	d103      	bne.n	800b0fc <vQueueWaitForMessageRestricted+0x40>
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0fc:	f001 fe7a 	bl	800cdf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b104:	2b00      	cmp	r3, #0
 800b106:	d106      	bne.n	800b116 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	3324      	adds	r3, #36	; 0x24
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	68b9      	ldr	r1, [r7, #8]
 800b110:	4618      	mov	r0, r3
 800b112:	f000 fdb3 	bl	800bc7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b116:	6978      	ldr	r0, [r7, #20]
 800b118:	f7ff ff26 	bl	800af68 <prvUnlockQueue>
	}
 800b11c:	bf00      	nop
 800b11e:	3718      	adds	r7, #24
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08e      	sub	sp, #56	; 0x38
 800b128:	af04      	add	r7, sp, #16
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
 800b130:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b134:	2b00      	cmp	r3, #0
 800b136:	d10a      	bne.n	800b14e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	623b      	str	r3, [r7, #32]
}
 800b14a:	bf00      	nop
 800b14c:	e7fe      	b.n	800b14c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10a      	bne.n	800b16a <xTaskCreateStatic+0x46>
	__asm volatile
 800b154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b158:	f383 8811 	msr	BASEPRI, r3
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	61fb      	str	r3, [r7, #28]
}
 800b166:	bf00      	nop
 800b168:	e7fe      	b.n	800b168 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b16a:	235c      	movs	r3, #92	; 0x5c
 800b16c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	2b5c      	cmp	r3, #92	; 0x5c
 800b172:	d00a      	beq.n	800b18a <xTaskCreateStatic+0x66>
	__asm volatile
 800b174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b178:	f383 8811 	msr	BASEPRI, r3
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	f3bf 8f4f 	dsb	sy
 800b184:	61bb      	str	r3, [r7, #24]
}
 800b186:	bf00      	nop
 800b188:	e7fe      	b.n	800b188 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b18a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d01e      	beq.n	800b1d0 <xTaskCreateStatic+0xac>
 800b192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b194:	2b00      	cmp	r3, #0
 800b196:	d01b      	beq.n	800b1d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	2202      	movs	r2, #2
 800b1a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9303      	str	r3, [sp, #12]
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b0:	9302      	str	r3, [sp, #8]
 800b1b2:	f107 0314 	add.w	r3, r7, #20
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	68b9      	ldr	r1, [r7, #8]
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f000 f850 	bl	800b268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1ca:	f000 f8dd 	bl	800b388 <prvAddNewTaskToReadyList>
 800b1ce:	e001      	b.n	800b1d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1d4:	697b      	ldr	r3, [r7, #20]
	}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3728      	adds	r7, #40	; 0x28
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b08c      	sub	sp, #48	; 0x30
 800b1e2:	af04      	add	r7, sp, #16
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	60b9      	str	r1, [r7, #8]
 800b1e8:	603b      	str	r3, [r7, #0]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1ee:	88fb      	ldrh	r3, [r7, #6]
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f001 fef0 	bl	800cfd8 <pvPortMalloc>
 800b1f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00e      	beq.n	800b21e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b200:	205c      	movs	r0, #92	; 0x5c
 800b202:	f001 fee9 	bl	800cfd8 <pvPortMalloc>
 800b206:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	631a      	str	r2, [r3, #48]	; 0x30
 800b214:	e005      	b.n	800b222 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b216:	6978      	ldr	r0, [r7, #20]
 800b218:	f001 ffaa 	bl	800d170 <vPortFree>
 800b21c:	e001      	b.n	800b222 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d017      	beq.n	800b258 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b230:	88fa      	ldrh	r2, [r7, #6]
 800b232:	2300      	movs	r3, #0
 800b234:	9303      	str	r3, [sp, #12]
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	9302      	str	r3, [sp, #8]
 800b23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23c:	9301      	str	r3, [sp, #4]
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	68b9      	ldr	r1, [r7, #8]
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f000 f80e 	bl	800b268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b24c:	69f8      	ldr	r0, [r7, #28]
 800b24e:	f000 f89b 	bl	800b388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b252:	2301      	movs	r3, #1
 800b254:	61bb      	str	r3, [r7, #24]
 800b256:	e002      	b.n	800b25e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b258:	f04f 33ff 	mov.w	r3, #4294967295
 800b25c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b25e:	69bb      	ldr	r3, [r7, #24]
	}
 800b260:	4618      	mov	r0, r3
 800b262:	3720      	adds	r7, #32
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	461a      	mov	r2, r3
 800b280:	21a5      	movs	r1, #165	; 0xa5
 800b282:	f002 fe0f 	bl	800dea4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b290:	3b01      	subs	r3, #1
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	f023 0307 	bic.w	r3, r3, #7
 800b29e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	f003 0307 	and.w	r3, r3, #7
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00a      	beq.n	800b2c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	617b      	str	r3, [r7, #20]
}
 800b2bc:	bf00      	nop
 800b2be:	e7fe      	b.n	800b2be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d01f      	beq.n	800b306 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	61fb      	str	r3, [r7, #28]
 800b2ca:	e012      	b.n	800b2f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	7819      	ldrb	r1, [r3, #0]
 800b2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	4413      	add	r3, r2
 800b2da:	3334      	adds	r3, #52	; 0x34
 800b2dc:	460a      	mov	r2, r1
 800b2de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d006      	beq.n	800b2fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	61fb      	str	r3, [r7, #28]
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	2b0f      	cmp	r3, #15
 800b2f6:	d9e9      	bls.n	800b2cc <prvInitialiseNewTask+0x64>
 800b2f8:	e000      	b.n	800b2fc <prvInitialiseNewTask+0x94>
			{
				break;
 800b2fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b304:	e003      	b.n	800b30e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b310:	2b37      	cmp	r3, #55	; 0x37
 800b312:	d901      	bls.n	800b318 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b314:	2337      	movs	r3, #55	; 0x37
 800b316:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b31c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b322:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b326:	2200      	movs	r2, #0
 800b328:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	3304      	adds	r3, #4
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fe ffce 	bl	800a2d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b336:	3318      	adds	r3, #24
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fe ffc9 	bl	800a2d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b352:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b356:	2200      	movs	r2, #0
 800b358:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	68f9      	ldr	r1, [r7, #12]
 800b366:	69b8      	ldr	r0, [r7, #24]
 800b368:	f001 fbe6 	bl	800cb38 <pxPortInitialiseStack>
 800b36c:	4602      	mov	r2, r0
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b374:	2b00      	cmp	r3, #0
 800b376:	d002      	beq.n	800b37e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b37c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b37e:	bf00      	nop
 800b380:	3720      	adds	r7, #32
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
	...

0800b388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b390:	f001 fd00 	bl	800cd94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b394:	4b2d      	ldr	r3, [pc, #180]	; (800b44c <prvAddNewTaskToReadyList+0xc4>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3301      	adds	r3, #1
 800b39a:	4a2c      	ldr	r2, [pc, #176]	; (800b44c <prvAddNewTaskToReadyList+0xc4>)
 800b39c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b39e:	4b2c      	ldr	r3, [pc, #176]	; (800b450 <prvAddNewTaskToReadyList+0xc8>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d109      	bne.n	800b3ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3a6:	4a2a      	ldr	r2, [pc, #168]	; (800b450 <prvAddNewTaskToReadyList+0xc8>)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3ac:	4b27      	ldr	r3, [pc, #156]	; (800b44c <prvAddNewTaskToReadyList+0xc4>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d110      	bne.n	800b3d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3b4:	f000 fd8e 	bl	800bed4 <prvInitialiseTaskLists>
 800b3b8:	e00d      	b.n	800b3d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3ba:	4b26      	ldr	r3, [pc, #152]	; (800b454 <prvAddNewTaskToReadyList+0xcc>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d109      	bne.n	800b3d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3c2:	4b23      	ldr	r3, [pc, #140]	; (800b450 <prvAddNewTaskToReadyList+0xc8>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d802      	bhi.n	800b3d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3d0:	4a1f      	ldr	r2, [pc, #124]	; (800b450 <prvAddNewTaskToReadyList+0xc8>)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3d6:	4b20      	ldr	r3, [pc, #128]	; (800b458 <prvAddNewTaskToReadyList+0xd0>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	4a1e      	ldr	r2, [pc, #120]	; (800b458 <prvAddNewTaskToReadyList+0xd0>)
 800b3de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3e0:	4b1d      	ldr	r3, [pc, #116]	; (800b458 <prvAddNewTaskToReadyList+0xd0>)
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ec:	4b1b      	ldr	r3, [pc, #108]	; (800b45c <prvAddNewTaskToReadyList+0xd4>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d903      	bls.n	800b3fc <prvAddNewTaskToReadyList+0x74>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	4a18      	ldr	r2, [pc, #96]	; (800b45c <prvAddNewTaskToReadyList+0xd4>)
 800b3fa:	6013      	str	r3, [r2, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b400:	4613      	mov	r3, r2
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	4413      	add	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4a15      	ldr	r2, [pc, #84]	; (800b460 <prvAddNewTaskToReadyList+0xd8>)
 800b40a:	441a      	add	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3304      	adds	r3, #4
 800b410:	4619      	mov	r1, r3
 800b412:	4610      	mov	r0, r2
 800b414:	f7fe ff69 	bl	800a2ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b418:	f001 fcec 	bl	800cdf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b41c:	4b0d      	ldr	r3, [pc, #52]	; (800b454 <prvAddNewTaskToReadyList+0xcc>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00e      	beq.n	800b442 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b424:	4b0a      	ldr	r3, [pc, #40]	; (800b450 <prvAddNewTaskToReadyList+0xc8>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42e:	429a      	cmp	r2, r3
 800b430:	d207      	bcs.n	800b442 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b432:	4b0c      	ldr	r3, [pc, #48]	; (800b464 <prvAddNewTaskToReadyList+0xdc>)
 800b434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b438:	601a      	str	r2, [r3, #0]
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b442:	bf00      	nop
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	20000fa8 	.word	0x20000fa8
 800b450:	20000ad4 	.word	0x20000ad4
 800b454:	20000fb4 	.word	0x20000fb4
 800b458:	20000fc4 	.word	0x20000fc4
 800b45c:	20000fb0 	.word	0x20000fb0
 800b460:	20000ad8 	.word	0x20000ad8
 800b464:	e000ed04 	.word	0xe000ed04

0800b468 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b470:	2300      	movs	r3, #0
 800b472:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d017      	beq.n	800b4aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b47a:	4b13      	ldr	r3, [pc, #76]	; (800b4c8 <vTaskDelay+0x60>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00a      	beq.n	800b498 <vTaskDelay+0x30>
	__asm volatile
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	60bb      	str	r3, [r7, #8]
}
 800b494:	bf00      	nop
 800b496:	e7fe      	b.n	800b496 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b498:	f000 f9f8 	bl	800b88c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b49c:	2100      	movs	r1, #0
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 ffa8 	bl	800c3f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4a4:	f000 fa00 	bl	800b8a8 <xTaskResumeAll>
 800b4a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d107      	bne.n	800b4c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b4b0:	4b06      	ldr	r3, [pc, #24]	; (800b4cc <vTaskDelay+0x64>)
 800b4b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4c0:	bf00      	nop
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20000fd0 	.word	0x20000fd0
 800b4cc:	e000ed04 	.word	0xe000ed04

0800b4d0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b4d8:	f001 fc5c 	bl	800cd94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d102      	bne.n	800b4e8 <vTaskSuspend+0x18>
 800b4e2:	4b30      	ldr	r3, [pc, #192]	; (800b5a4 <vTaskSuspend+0xd4>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	e000      	b.n	800b4ea <vTaskSuspend+0x1a>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3304      	adds	r3, #4
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7fe ff57 	bl	800a3a4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d004      	beq.n	800b508 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3318      	adds	r3, #24
 800b502:	4618      	mov	r0, r3
 800b504:	f7fe ff4e 	bl	800a3a4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	3304      	adds	r3, #4
 800b50c:	4619      	mov	r1, r3
 800b50e:	4826      	ldr	r0, [pc, #152]	; (800b5a8 <vTaskSuspend+0xd8>)
 800b510:	f7fe feeb 	bl	800a2ea <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d103      	bne.n	800b528 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b528:	f001 fc64 	bl	800cdf4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b52c:	4b1f      	ldr	r3, [pc, #124]	; (800b5ac <vTaskSuspend+0xdc>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d005      	beq.n	800b540 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b534:	f001 fc2e 	bl	800cd94 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b538:	f000 fd6a 	bl	800c010 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b53c:	f001 fc5a 	bl	800cdf4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b540:	4b18      	ldr	r3, [pc, #96]	; (800b5a4 <vTaskSuspend+0xd4>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	429a      	cmp	r2, r3
 800b548:	d127      	bne.n	800b59a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800b54a:	4b18      	ldr	r3, [pc, #96]	; (800b5ac <vTaskSuspend+0xdc>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d017      	beq.n	800b582 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b552:	4b17      	ldr	r3, [pc, #92]	; (800b5b0 <vTaskSuspend+0xe0>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00a      	beq.n	800b570 <vTaskSuspend+0xa0>
	__asm volatile
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	60bb      	str	r3, [r7, #8]
}
 800b56c:	bf00      	nop
 800b56e:	e7fe      	b.n	800b56e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800b570:	4b10      	ldr	r3, [pc, #64]	; (800b5b4 <vTaskSuspend+0xe4>)
 800b572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b580:	e00b      	b.n	800b59a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b582:	4b09      	ldr	r3, [pc, #36]	; (800b5a8 <vTaskSuspend+0xd8>)
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <vTaskSuspend+0xe8>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d103      	bne.n	800b596 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800b58e:	4b05      	ldr	r3, [pc, #20]	; (800b5a4 <vTaskSuspend+0xd4>)
 800b590:	2200      	movs	r2, #0
 800b592:	601a      	str	r2, [r3, #0]
	}
 800b594:	e001      	b.n	800b59a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800b596:	f000 faef 	bl	800bb78 <vTaskSwitchContext>
	}
 800b59a:	bf00      	nop
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20000ad4 	.word	0x20000ad4
 800b5a8:	20000f94 	.word	0x20000f94
 800b5ac:	20000fb4 	.word	0x20000fb4
 800b5b0:	20000fd0 	.word	0x20000fd0
 800b5b4:	e000ed04 	.word	0xe000ed04
 800b5b8:	20000fa8 	.word	0x20000fa8

0800b5bc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b5bc:	b480      	push	{r7}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10a      	bne.n	800b5e8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	60fb      	str	r3, [r7, #12]
}
 800b5e4:	bf00      	nop
 800b5e6:	e7fe      	b.n	800b5e6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	4a0a      	ldr	r2, [pc, #40]	; (800b618 <prvTaskIsTaskSuspended+0x5c>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d10a      	bne.n	800b608 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f6:	4a09      	ldr	r2, [pc, #36]	; (800b61c <prvTaskIsTaskSuspended+0x60>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d005      	beq.n	800b608 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800b604:	2301      	movs	r3, #1
 800b606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b608:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b60a:	4618      	mov	r0, r3
 800b60c:	371c      	adds	r7, #28
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	20000f94 	.word	0x20000f94
 800b61c:	20000f68 	.word	0x20000f68

0800b620 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10a      	bne.n	800b648 <vTaskResume+0x28>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	60bb      	str	r3, [r7, #8]
}
 800b644:	bf00      	nop
 800b646:	e7fe      	b.n	800b646 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800b648:	4b20      	ldr	r3, [pc, #128]	; (800b6cc <vTaskResume+0xac>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d038      	beq.n	800b6c4 <vTaskResume+0xa4>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d035      	beq.n	800b6c4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800b658:	f001 fb9c 	bl	800cd94 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f7ff ffad 	bl	800b5bc <prvTaskIsTaskSuspended>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d02b      	beq.n	800b6c0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	3304      	adds	r3, #4
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fe fe99 	bl	800a3a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b676:	4b16      	ldr	r3, [pc, #88]	; (800b6d0 <vTaskResume+0xb0>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d903      	bls.n	800b686 <vTaskResume+0x66>
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b682:	4a13      	ldr	r2, [pc, #76]	; (800b6d0 <vTaskResume+0xb0>)
 800b684:	6013      	str	r3, [r2, #0]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68a:	4613      	mov	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4413      	add	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4a10      	ldr	r2, [pc, #64]	; (800b6d4 <vTaskResume+0xb4>)
 800b694:	441a      	add	r2, r3
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	3304      	adds	r3, #4
 800b69a:	4619      	mov	r1, r3
 800b69c:	4610      	mov	r0, r2
 800b69e:	f7fe fe24 	bl	800a2ea <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a6:	4b09      	ldr	r3, [pc, #36]	; (800b6cc <vTaskResume+0xac>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d307      	bcc.n	800b6c0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b6b0:	4b09      	ldr	r3, [pc, #36]	; (800b6d8 <vTaskResume+0xb8>)
 800b6b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b6c0:	f001 fb98 	bl	800cdf4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6c4:	bf00      	nop
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	20000ad4 	.word	0x20000ad4
 800b6d0:	20000fb0 	.word	0x20000fb0
 800b6d4:	20000ad8 	.word	0x20000ad8
 800b6d8:	e000ed04 	.word	0xe000ed04

0800b6dc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b08a      	sub	sp, #40	; 0x28
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10a      	bne.n	800b708 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	61bb      	str	r3, [r7, #24]
}
 800b704:	bf00      	nop
 800b706:	e7fe      	b.n	800b706 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b708:	f001 fc26 	bl	800cf58 <vPortValidateInterruptPriority>
	__asm volatile
 800b70c:	f3ef 8211 	mrs	r2, BASEPRI
 800b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	617a      	str	r2, [r7, #20]
 800b722:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b724:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b726:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b728:	6a38      	ldr	r0, [r7, #32]
 800b72a:	f7ff ff47 	bl	800b5bc <prvTaskIsTaskSuspended>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d030      	beq.n	800b796 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b734:	4b1d      	ldr	r3, [pc, #116]	; (800b7ac <xTaskResumeFromISR+0xd0>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d126      	bne.n	800b78a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b73c:	6a3b      	ldr	r3, [r7, #32]
 800b73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b740:	4b1b      	ldr	r3, [pc, #108]	; (800b7b0 <xTaskResumeFromISR+0xd4>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b746:	429a      	cmp	r2, r3
 800b748:	d301      	bcc.n	800b74e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800b74a:	2301      	movs	r3, #1
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b74e:	6a3b      	ldr	r3, [r7, #32]
 800b750:	3304      	adds	r3, #4
 800b752:	4618      	mov	r0, r3
 800b754:	f7fe fe26 	bl	800a3a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b758:	6a3b      	ldr	r3, [r7, #32]
 800b75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75c:	4b15      	ldr	r3, [pc, #84]	; (800b7b4 <xTaskResumeFromISR+0xd8>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	429a      	cmp	r2, r3
 800b762:	d903      	bls.n	800b76c <xTaskResumeFromISR+0x90>
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b768:	4a12      	ldr	r2, [pc, #72]	; (800b7b4 <xTaskResumeFromISR+0xd8>)
 800b76a:	6013      	str	r3, [r2, #0]
 800b76c:	6a3b      	ldr	r3, [r7, #32]
 800b76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b770:	4613      	mov	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4413      	add	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	4a0f      	ldr	r2, [pc, #60]	; (800b7b8 <xTaskResumeFromISR+0xdc>)
 800b77a:	441a      	add	r2, r3
 800b77c:	6a3b      	ldr	r3, [r7, #32]
 800b77e:	3304      	adds	r3, #4
 800b780:	4619      	mov	r1, r3
 800b782:	4610      	mov	r0, r2
 800b784:	f7fe fdb1 	bl	800a2ea <vListInsertEnd>
 800b788:	e005      	b.n	800b796 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b78a:	6a3b      	ldr	r3, [r7, #32]
 800b78c:	3318      	adds	r3, #24
 800b78e:	4619      	mov	r1, r3
 800b790:	480a      	ldr	r0, [pc, #40]	; (800b7bc <xTaskResumeFromISR+0xe0>)
 800b792:	f7fe fdaa 	bl	800a2ea <vListInsertEnd>
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f383 8811 	msr	BASEPRI, r3
}
 800b7a0:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3728      	adds	r7, #40	; 0x28
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	20000fd0 	.word	0x20000fd0
 800b7b0:	20000ad4 	.word	0x20000ad4
 800b7b4:	20000fb0 	.word	0x20000fb0
 800b7b8:	20000ad8 	.word	0x20000ad8
 800b7bc:	20000f68 	.word	0x20000f68

0800b7c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b08a      	sub	sp, #40	; 0x28
 800b7c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7ce:	463a      	mov	r2, r7
 800b7d0:	1d39      	adds	r1, r7, #4
 800b7d2:	f107 0308 	add.w	r3, r7, #8
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fe fd26 	bl	800a228 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	9202      	str	r2, [sp, #8]
 800b7e4:	9301      	str	r3, [sp, #4]
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	460a      	mov	r2, r1
 800b7ee:	4921      	ldr	r1, [pc, #132]	; (800b874 <vTaskStartScheduler+0xb4>)
 800b7f0:	4821      	ldr	r0, [pc, #132]	; (800b878 <vTaskStartScheduler+0xb8>)
 800b7f2:	f7ff fc97 	bl	800b124 <xTaskCreateStatic>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	4a20      	ldr	r2, [pc, #128]	; (800b87c <vTaskStartScheduler+0xbc>)
 800b7fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7fc:	4b1f      	ldr	r3, [pc, #124]	; (800b87c <vTaskStartScheduler+0xbc>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b804:	2301      	movs	r3, #1
 800b806:	617b      	str	r3, [r7, #20]
 800b808:	e001      	b.n	800b80e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b80a:	2300      	movs	r3, #0
 800b80c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d102      	bne.n	800b81a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b814:	f000 fe42 	bl	800c49c <xTimerCreateTimerTask>
 800b818:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d116      	bne.n	800b84e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	613b      	str	r3, [r7, #16]
}
 800b832:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b834:	4b12      	ldr	r3, [pc, #72]	; (800b880 <vTaskStartScheduler+0xc0>)
 800b836:	f04f 32ff 	mov.w	r2, #4294967295
 800b83a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b83c:	4b11      	ldr	r3, [pc, #68]	; (800b884 <vTaskStartScheduler+0xc4>)
 800b83e:	2201      	movs	r2, #1
 800b840:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b842:	4b11      	ldr	r3, [pc, #68]	; (800b888 <vTaskStartScheduler+0xc8>)
 800b844:	2200      	movs	r2, #0
 800b846:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b848:	f001 fa02 	bl	800cc50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b84c:	e00e      	b.n	800b86c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b854:	d10a      	bne.n	800b86c <vTaskStartScheduler+0xac>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	60fb      	str	r3, [r7, #12]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <vTaskStartScheduler+0xaa>
}
 800b86c:	bf00      	nop
 800b86e:	3718      	adds	r7, #24
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	0800e950 	.word	0x0800e950
 800b878:	0800bea5 	.word	0x0800bea5
 800b87c:	20000fcc 	.word	0x20000fcc
 800b880:	20000fc8 	.word	0x20000fc8
 800b884:	20000fb4 	.word	0x20000fb4
 800b888:	20000fac 	.word	0x20000fac

0800b88c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b88c:	b480      	push	{r7}
 800b88e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b890:	4b04      	ldr	r3, [pc, #16]	; (800b8a4 <vTaskSuspendAll+0x18>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	4a03      	ldr	r2, [pc, #12]	; (800b8a4 <vTaskSuspendAll+0x18>)
 800b898:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b89a:	bf00      	nop
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	20000fd0 	.word	0x20000fd0

0800b8a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8b6:	4b42      	ldr	r3, [pc, #264]	; (800b9c0 <xTaskResumeAll+0x118>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10a      	bne.n	800b8d4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	603b      	str	r3, [r7, #0]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8d4:	f001 fa5e 	bl	800cd94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8d8:	4b39      	ldr	r3, [pc, #228]	; (800b9c0 <xTaskResumeAll+0x118>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	4a38      	ldr	r2, [pc, #224]	; (800b9c0 <xTaskResumeAll+0x118>)
 800b8e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8e2:	4b37      	ldr	r3, [pc, #220]	; (800b9c0 <xTaskResumeAll+0x118>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d162      	bne.n	800b9b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8ea:	4b36      	ldr	r3, [pc, #216]	; (800b9c4 <xTaskResumeAll+0x11c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d05e      	beq.n	800b9b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8f2:	e02f      	b.n	800b954 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f4:	4b34      	ldr	r3, [pc, #208]	; (800b9c8 <xTaskResumeAll+0x120>)
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	3318      	adds	r3, #24
 800b900:	4618      	mov	r0, r3
 800b902:	f7fe fd4f 	bl	800a3a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	3304      	adds	r3, #4
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fe fd4a 	bl	800a3a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b914:	4b2d      	ldr	r3, [pc, #180]	; (800b9cc <xTaskResumeAll+0x124>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d903      	bls.n	800b924 <xTaskResumeAll+0x7c>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b920:	4a2a      	ldr	r2, [pc, #168]	; (800b9cc <xTaskResumeAll+0x124>)
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b928:	4613      	mov	r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4413      	add	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4a27      	ldr	r2, [pc, #156]	; (800b9d0 <xTaskResumeAll+0x128>)
 800b932:	441a      	add	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	3304      	adds	r3, #4
 800b938:	4619      	mov	r1, r3
 800b93a:	4610      	mov	r0, r2
 800b93c:	f7fe fcd5 	bl	800a2ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b944:	4b23      	ldr	r3, [pc, #140]	; (800b9d4 <xTaskResumeAll+0x12c>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d302      	bcc.n	800b954 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b94e:	4b22      	ldr	r3, [pc, #136]	; (800b9d8 <xTaskResumeAll+0x130>)
 800b950:	2201      	movs	r2, #1
 800b952:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b954:	4b1c      	ldr	r3, [pc, #112]	; (800b9c8 <xTaskResumeAll+0x120>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d1cb      	bne.n	800b8f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b962:	f000 fb55 	bl	800c010 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b966:	4b1d      	ldr	r3, [pc, #116]	; (800b9dc <xTaskResumeAll+0x134>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d010      	beq.n	800b994 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b972:	f000 f847 	bl	800ba04 <xTaskIncrementTick>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b97c:	4b16      	ldr	r3, [pc, #88]	; (800b9d8 <xTaskResumeAll+0x130>)
 800b97e:	2201      	movs	r2, #1
 800b980:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	3b01      	subs	r3, #1
 800b986:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1f1      	bne.n	800b972 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b98e:	4b13      	ldr	r3, [pc, #76]	; (800b9dc <xTaskResumeAll+0x134>)
 800b990:	2200      	movs	r2, #0
 800b992:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b994:	4b10      	ldr	r3, [pc, #64]	; (800b9d8 <xTaskResumeAll+0x130>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d009      	beq.n	800b9b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b99c:	2301      	movs	r3, #1
 800b99e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9a0:	4b0f      	ldr	r3, [pc, #60]	; (800b9e0 <xTaskResumeAll+0x138>)
 800b9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9b0:	f001 fa20 	bl	800cdf4 <vPortExitCritical>

	return xAlreadyYielded;
 800b9b4:	68bb      	ldr	r3, [r7, #8]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	20000fd0 	.word	0x20000fd0
 800b9c4:	20000fa8 	.word	0x20000fa8
 800b9c8:	20000f68 	.word	0x20000f68
 800b9cc:	20000fb0 	.word	0x20000fb0
 800b9d0:	20000ad8 	.word	0x20000ad8
 800b9d4:	20000ad4 	.word	0x20000ad4
 800b9d8:	20000fbc 	.word	0x20000fbc
 800b9dc:	20000fb8 	.word	0x20000fb8
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b9ea:	4b05      	ldr	r3, [pc, #20]	; (800ba00 <xTaskGetTickCount+0x1c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b9f0:	687b      	ldr	r3, [r7, #4]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	20000fac 	.word	0x20000fac

0800ba04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba0e:	4b4f      	ldr	r3, [pc, #316]	; (800bb4c <xTaskIncrementTick+0x148>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f040 808f 	bne.w	800bb36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba18:	4b4d      	ldr	r3, [pc, #308]	; (800bb50 <xTaskIncrementTick+0x14c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba20:	4a4b      	ldr	r2, [pc, #300]	; (800bb50 <xTaskIncrementTick+0x14c>)
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d120      	bne.n	800ba6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba2c:	4b49      	ldr	r3, [pc, #292]	; (800bb54 <xTaskIncrementTick+0x150>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00a      	beq.n	800ba4c <xTaskIncrementTick+0x48>
	__asm volatile
 800ba36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	603b      	str	r3, [r7, #0]
}
 800ba48:	bf00      	nop
 800ba4a:	e7fe      	b.n	800ba4a <xTaskIncrementTick+0x46>
 800ba4c:	4b41      	ldr	r3, [pc, #260]	; (800bb54 <xTaskIncrementTick+0x150>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	60fb      	str	r3, [r7, #12]
 800ba52:	4b41      	ldr	r3, [pc, #260]	; (800bb58 <xTaskIncrementTick+0x154>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a3f      	ldr	r2, [pc, #252]	; (800bb54 <xTaskIncrementTick+0x150>)
 800ba58:	6013      	str	r3, [r2, #0]
 800ba5a:	4a3f      	ldr	r2, [pc, #252]	; (800bb58 <xTaskIncrementTick+0x154>)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6013      	str	r3, [r2, #0]
 800ba60:	4b3e      	ldr	r3, [pc, #248]	; (800bb5c <xTaskIncrementTick+0x158>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	3301      	adds	r3, #1
 800ba66:	4a3d      	ldr	r2, [pc, #244]	; (800bb5c <xTaskIncrementTick+0x158>)
 800ba68:	6013      	str	r3, [r2, #0]
 800ba6a:	f000 fad1 	bl	800c010 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba6e:	4b3c      	ldr	r3, [pc, #240]	; (800bb60 <xTaskIncrementTick+0x15c>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	693a      	ldr	r2, [r7, #16]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d349      	bcc.n	800bb0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba78:	4b36      	ldr	r3, [pc, #216]	; (800bb54 <xTaskIncrementTick+0x150>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d104      	bne.n	800ba8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba82:	4b37      	ldr	r3, [pc, #220]	; (800bb60 <xTaskIncrementTick+0x15c>)
 800ba84:	f04f 32ff 	mov.w	r2, #4294967295
 800ba88:	601a      	str	r2, [r3, #0]
					break;
 800ba8a:	e03f      	b.n	800bb0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba8c:	4b31      	ldr	r3, [pc, #196]	; (800bb54 <xTaskIncrementTick+0x150>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d203      	bcs.n	800baac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800baa4:	4a2e      	ldr	r2, [pc, #184]	; (800bb60 <xTaskIncrementTick+0x15c>)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800baaa:	e02f      	b.n	800bb0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	3304      	adds	r3, #4
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fe fc77 	bl	800a3a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baba:	2b00      	cmp	r3, #0
 800babc:	d004      	beq.n	800bac8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	3318      	adds	r3, #24
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fe fc6e 	bl	800a3a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bacc:	4b25      	ldr	r3, [pc, #148]	; (800bb64 <xTaskIncrementTick+0x160>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d903      	bls.n	800badc <xTaskIncrementTick+0xd8>
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad8:	4a22      	ldr	r2, [pc, #136]	; (800bb64 <xTaskIncrementTick+0x160>)
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae0:	4613      	mov	r3, r2
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	4413      	add	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4a1f      	ldr	r2, [pc, #124]	; (800bb68 <xTaskIncrementTick+0x164>)
 800baea:	441a      	add	r2, r3
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	3304      	adds	r3, #4
 800baf0:	4619      	mov	r1, r3
 800baf2:	4610      	mov	r0, r2
 800baf4:	f7fe fbf9 	bl	800a2ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafc:	4b1b      	ldr	r3, [pc, #108]	; (800bb6c <xTaskIncrementTick+0x168>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d3b8      	bcc.n	800ba78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb06:	2301      	movs	r3, #1
 800bb08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb0a:	e7b5      	b.n	800ba78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb0c:	4b17      	ldr	r3, [pc, #92]	; (800bb6c <xTaskIncrementTick+0x168>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb12:	4915      	ldr	r1, [pc, #84]	; (800bb68 <xTaskIncrementTick+0x164>)
 800bb14:	4613      	mov	r3, r2
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	4413      	add	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	440b      	add	r3, r1
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d901      	bls.n	800bb28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bb24:	2301      	movs	r3, #1
 800bb26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb28:	4b11      	ldr	r3, [pc, #68]	; (800bb70 <xTaskIncrementTick+0x16c>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d007      	beq.n	800bb40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bb30:	2301      	movs	r3, #1
 800bb32:	617b      	str	r3, [r7, #20]
 800bb34:	e004      	b.n	800bb40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb36:	4b0f      	ldr	r3, [pc, #60]	; (800bb74 <xTaskIncrementTick+0x170>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	4a0d      	ldr	r2, [pc, #52]	; (800bb74 <xTaskIncrementTick+0x170>)
 800bb3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb40:	697b      	ldr	r3, [r7, #20]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20000fd0 	.word	0x20000fd0
 800bb50:	20000fac 	.word	0x20000fac
 800bb54:	20000f60 	.word	0x20000f60
 800bb58:	20000f64 	.word	0x20000f64
 800bb5c:	20000fc0 	.word	0x20000fc0
 800bb60:	20000fc8 	.word	0x20000fc8
 800bb64:	20000fb0 	.word	0x20000fb0
 800bb68:	20000ad8 	.word	0x20000ad8
 800bb6c:	20000ad4 	.word	0x20000ad4
 800bb70:	20000fbc 	.word	0x20000fbc
 800bb74:	20000fb8 	.word	0x20000fb8

0800bb78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb7e:	4b28      	ldr	r3, [pc, #160]	; (800bc20 <vTaskSwitchContext+0xa8>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb86:	4b27      	ldr	r3, [pc, #156]	; (800bc24 <vTaskSwitchContext+0xac>)
 800bb88:	2201      	movs	r2, #1
 800bb8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb8c:	e041      	b.n	800bc12 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bb8e:	4b25      	ldr	r3, [pc, #148]	; (800bc24 <vTaskSwitchContext+0xac>)
 800bb90:	2200      	movs	r2, #0
 800bb92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb94:	4b24      	ldr	r3, [pc, #144]	; (800bc28 <vTaskSwitchContext+0xb0>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	60fb      	str	r3, [r7, #12]
 800bb9a:	e010      	b.n	800bbbe <vTaskSwitchContext+0x46>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10a      	bne.n	800bbb8 <vTaskSwitchContext+0x40>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	607b      	str	r3, [r7, #4]
}
 800bbb4:	bf00      	nop
 800bbb6:	e7fe      	b.n	800bbb6 <vTaskSwitchContext+0x3e>
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	491b      	ldr	r1, [pc, #108]	; (800bc2c <vTaskSwitchContext+0xb4>)
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	4413      	add	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	440b      	add	r3, r1
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d0e4      	beq.n	800bb9c <vTaskSwitchContext+0x24>
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4a13      	ldr	r2, [pc, #76]	; (800bc2c <vTaskSwitchContext+0xb4>)
 800bbde:	4413      	add	r3, r2
 800bbe0:	60bb      	str	r3, [r7, #8]
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	685a      	ldr	r2, [r3, #4]
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	605a      	str	r2, [r3, #4]
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	685a      	ldr	r2, [r3, #4]
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	3308      	adds	r3, #8
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d104      	bne.n	800bc02 <vTaskSwitchContext+0x8a>
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	685a      	ldr	r2, [r3, #4]
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	605a      	str	r2, [r3, #4]
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	4a09      	ldr	r2, [pc, #36]	; (800bc30 <vTaskSwitchContext+0xb8>)
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	4a06      	ldr	r2, [pc, #24]	; (800bc28 <vTaskSwitchContext+0xb0>)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6013      	str	r3, [r2, #0]
}
 800bc12:	bf00      	nop
 800bc14:	3714      	adds	r7, #20
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	20000fd0 	.word	0x20000fd0
 800bc24:	20000fbc 	.word	0x20000fbc
 800bc28:	20000fb0 	.word	0x20000fb0
 800bc2c:	20000ad8 	.word	0x20000ad8
 800bc30:	20000ad4 	.word	0x20000ad4

0800bc34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d10a      	bne.n	800bc5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc48:	f383 8811 	msr	BASEPRI, r3
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	60fb      	str	r3, [r7, #12]
}
 800bc56:	bf00      	nop
 800bc58:	e7fe      	b.n	800bc58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc5a:	4b07      	ldr	r3, [pc, #28]	; (800bc78 <vTaskPlaceOnEventList+0x44>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3318      	adds	r3, #24
 800bc60:	4619      	mov	r1, r3
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7fe fb65 	bl	800a332 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc68:	2101      	movs	r1, #1
 800bc6a:	6838      	ldr	r0, [r7, #0]
 800bc6c:	f000 fbc2 	bl	800c3f4 <prvAddCurrentTaskToDelayedList>
}
 800bc70:	bf00      	nop
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	20000ad4 	.word	0x20000ad4

0800bc7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10a      	bne.n	800bca4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	617b      	str	r3, [r7, #20]
}
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bca4:	4b0a      	ldr	r3, [pc, #40]	; (800bcd0 <vTaskPlaceOnEventListRestricted+0x54>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3318      	adds	r3, #24
 800bcaa:	4619      	mov	r1, r3
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f7fe fb1c 	bl	800a2ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d002      	beq.n	800bcbe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bcb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bcbe:	6879      	ldr	r1, [r7, #4]
 800bcc0:	68b8      	ldr	r0, [r7, #8]
 800bcc2:	f000 fb97 	bl	800c3f4 <prvAddCurrentTaskToDelayedList>
	}
 800bcc6:	bf00      	nop
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	20000ad4 	.word	0x20000ad4

0800bcd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b086      	sub	sp, #24
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10a      	bne.n	800bd00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcee:	f383 8811 	msr	BASEPRI, r3
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	f3bf 8f4f 	dsb	sy
 800bcfa:	60fb      	str	r3, [r7, #12]
}
 800bcfc:	bf00      	nop
 800bcfe:	e7fe      	b.n	800bcfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	3318      	adds	r3, #24
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7fe fb4d 	bl	800a3a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd0a:	4b1e      	ldr	r3, [pc, #120]	; (800bd84 <xTaskRemoveFromEventList+0xb0>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d11d      	bne.n	800bd4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	3304      	adds	r3, #4
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fe fb44 	bl	800a3a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd20:	4b19      	ldr	r3, [pc, #100]	; (800bd88 <xTaskRemoveFromEventList+0xb4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d903      	bls.n	800bd30 <xTaskRemoveFromEventList+0x5c>
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2c:	4a16      	ldr	r2, [pc, #88]	; (800bd88 <xTaskRemoveFromEventList+0xb4>)
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd34:	4613      	mov	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4413      	add	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4a13      	ldr	r2, [pc, #76]	; (800bd8c <xTaskRemoveFromEventList+0xb8>)
 800bd3e:	441a      	add	r2, r3
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	3304      	adds	r3, #4
 800bd44:	4619      	mov	r1, r3
 800bd46:	4610      	mov	r0, r2
 800bd48:	f7fe facf 	bl	800a2ea <vListInsertEnd>
 800bd4c:	e005      	b.n	800bd5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	3318      	adds	r3, #24
 800bd52:	4619      	mov	r1, r3
 800bd54:	480e      	ldr	r0, [pc, #56]	; (800bd90 <xTaskRemoveFromEventList+0xbc>)
 800bd56:	f7fe fac8 	bl	800a2ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5e:	4b0d      	ldr	r3, [pc, #52]	; (800bd94 <xTaskRemoveFromEventList+0xc0>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d905      	bls.n	800bd74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	; (800bd98 <xTaskRemoveFromEventList+0xc4>)
 800bd6e:	2201      	movs	r2, #1
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	e001      	b.n	800bd78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bd74:	2300      	movs	r3, #0
 800bd76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd78:	697b      	ldr	r3, [r7, #20]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3718      	adds	r7, #24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	20000fd0 	.word	0x20000fd0
 800bd88:	20000fb0 	.word	0x20000fb0
 800bd8c:	20000ad8 	.word	0x20000ad8
 800bd90:	20000f68 	.word	0x20000f68
 800bd94:	20000ad4 	.word	0x20000ad4
 800bd98:	20000fbc 	.word	0x20000fbc

0800bd9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bda4:	4b06      	ldr	r3, [pc, #24]	; (800bdc0 <vTaskInternalSetTimeOutState+0x24>)
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bdac:	4b05      	ldr	r3, [pc, #20]	; (800bdc4 <vTaskInternalSetTimeOutState+0x28>)
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	605a      	str	r2, [r3, #4]
}
 800bdb4:	bf00      	nop
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr
 800bdc0:	20000fc0 	.word	0x20000fc0
 800bdc4:	20000fac 	.word	0x20000fac

0800bdc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d10a      	bne.n	800bdee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bddc:	f383 8811 	msr	BASEPRI, r3
 800bde0:	f3bf 8f6f 	isb	sy
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	613b      	str	r3, [r7, #16]
}
 800bdea:	bf00      	nop
 800bdec:	e7fe      	b.n	800bdec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10a      	bne.n	800be0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	60fb      	str	r3, [r7, #12]
}
 800be06:	bf00      	nop
 800be08:	e7fe      	b.n	800be08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800be0a:	f000 ffc3 	bl	800cd94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be0e:	4b1d      	ldr	r3, [pc, #116]	; (800be84 <xTaskCheckForTimeOut+0xbc>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	69ba      	ldr	r2, [r7, #24]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be26:	d102      	bne.n	800be2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be28:	2300      	movs	r3, #0
 800be2a:	61fb      	str	r3, [r7, #28]
 800be2c:	e023      	b.n	800be76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	4b15      	ldr	r3, [pc, #84]	; (800be88 <xTaskCheckForTimeOut+0xc0>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	429a      	cmp	r2, r3
 800be38:	d007      	beq.n	800be4a <xTaskCheckForTimeOut+0x82>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	69ba      	ldr	r2, [r7, #24]
 800be40:	429a      	cmp	r2, r3
 800be42:	d302      	bcc.n	800be4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be44:	2301      	movs	r3, #1
 800be46:	61fb      	str	r3, [r7, #28]
 800be48:	e015      	b.n	800be76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	429a      	cmp	r2, r3
 800be52:	d20b      	bcs.n	800be6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	1ad2      	subs	r2, r2, r3
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7ff ff9b 	bl	800bd9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be66:	2300      	movs	r3, #0
 800be68:	61fb      	str	r3, [r7, #28]
 800be6a:	e004      	b.n	800be76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	2200      	movs	r2, #0
 800be70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be72:	2301      	movs	r3, #1
 800be74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be76:	f000 ffbd 	bl	800cdf4 <vPortExitCritical>

	return xReturn;
 800be7a:	69fb      	ldr	r3, [r7, #28]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3720      	adds	r7, #32
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	20000fac 	.word	0x20000fac
 800be88:	20000fc0 	.word	0x20000fc0

0800be8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be8c:	b480      	push	{r7}
 800be8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be90:	4b03      	ldr	r3, [pc, #12]	; (800bea0 <vTaskMissedYield+0x14>)
 800be92:	2201      	movs	r2, #1
 800be94:	601a      	str	r2, [r3, #0]
}
 800be96:	bf00      	nop
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	20000fbc 	.word	0x20000fbc

0800bea4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800beac:	f000 f852 	bl	800bf54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800beb0:	4b06      	ldr	r3, [pc, #24]	; (800becc <prvIdleTask+0x28>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d9f9      	bls.n	800beac <prvIdleTask+0x8>
			{
				taskYIELD();
 800beb8:	4b05      	ldr	r3, [pc, #20]	; (800bed0 <prvIdleTask+0x2c>)
 800beba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bec8:	e7f0      	b.n	800beac <prvIdleTask+0x8>
 800beca:	bf00      	nop
 800becc:	20000ad8 	.word	0x20000ad8
 800bed0:	e000ed04 	.word	0xe000ed04

0800bed4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800beda:	2300      	movs	r3, #0
 800bedc:	607b      	str	r3, [r7, #4]
 800bede:	e00c      	b.n	800befa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	4613      	mov	r3, r2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	4413      	add	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4a12      	ldr	r2, [pc, #72]	; (800bf34 <prvInitialiseTaskLists+0x60>)
 800beec:	4413      	add	r3, r2
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fe f9ce 	bl	800a290 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	3301      	adds	r3, #1
 800bef8:	607b      	str	r3, [r7, #4]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b37      	cmp	r3, #55	; 0x37
 800befe:	d9ef      	bls.n	800bee0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf00:	480d      	ldr	r0, [pc, #52]	; (800bf38 <prvInitialiseTaskLists+0x64>)
 800bf02:	f7fe f9c5 	bl	800a290 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf06:	480d      	ldr	r0, [pc, #52]	; (800bf3c <prvInitialiseTaskLists+0x68>)
 800bf08:	f7fe f9c2 	bl	800a290 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf0c:	480c      	ldr	r0, [pc, #48]	; (800bf40 <prvInitialiseTaskLists+0x6c>)
 800bf0e:	f7fe f9bf 	bl	800a290 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf12:	480c      	ldr	r0, [pc, #48]	; (800bf44 <prvInitialiseTaskLists+0x70>)
 800bf14:	f7fe f9bc 	bl	800a290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf18:	480b      	ldr	r0, [pc, #44]	; (800bf48 <prvInitialiseTaskLists+0x74>)
 800bf1a:	f7fe f9b9 	bl	800a290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf1e:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <prvInitialiseTaskLists+0x78>)
 800bf20:	4a05      	ldr	r2, [pc, #20]	; (800bf38 <prvInitialiseTaskLists+0x64>)
 800bf22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf24:	4b0a      	ldr	r3, [pc, #40]	; (800bf50 <prvInitialiseTaskLists+0x7c>)
 800bf26:	4a05      	ldr	r2, [pc, #20]	; (800bf3c <prvInitialiseTaskLists+0x68>)
 800bf28:	601a      	str	r2, [r3, #0]
}
 800bf2a:	bf00      	nop
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	20000ad8 	.word	0x20000ad8
 800bf38:	20000f38 	.word	0x20000f38
 800bf3c:	20000f4c 	.word	0x20000f4c
 800bf40:	20000f68 	.word	0x20000f68
 800bf44:	20000f7c 	.word	0x20000f7c
 800bf48:	20000f94 	.word	0x20000f94
 800bf4c:	20000f60 	.word	0x20000f60
 800bf50:	20000f64 	.word	0x20000f64

0800bf54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf5a:	e019      	b.n	800bf90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf5c:	f000 ff1a 	bl	800cd94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf60:	4b10      	ldr	r3, [pc, #64]	; (800bfa4 <prvCheckTasksWaitingTermination+0x50>)
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fe fa19 	bl	800a3a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf72:	4b0d      	ldr	r3, [pc, #52]	; (800bfa8 <prvCheckTasksWaitingTermination+0x54>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	3b01      	subs	r3, #1
 800bf78:	4a0b      	ldr	r2, [pc, #44]	; (800bfa8 <prvCheckTasksWaitingTermination+0x54>)
 800bf7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf7c:	4b0b      	ldr	r3, [pc, #44]	; (800bfac <prvCheckTasksWaitingTermination+0x58>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	4a0a      	ldr	r2, [pc, #40]	; (800bfac <prvCheckTasksWaitingTermination+0x58>)
 800bf84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf86:	f000 ff35 	bl	800cdf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f810 	bl	800bfb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf90:	4b06      	ldr	r3, [pc, #24]	; (800bfac <prvCheckTasksWaitingTermination+0x58>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1e1      	bne.n	800bf5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf98:	bf00      	nop
 800bf9a:	bf00      	nop
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20000f7c 	.word	0x20000f7c
 800bfa8:	20000fa8 	.word	0x20000fa8
 800bfac:	20000f90 	.word	0x20000f90

0800bfb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d108      	bne.n	800bfd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f001 f8d2 	bl	800d170 <vPortFree>
				vPortFree( pxTCB );
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f001 f8cf 	bl	800d170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bfd2:	e018      	b.n	800c006 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d103      	bne.n	800bfe6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f001 f8c6 	bl	800d170 <vPortFree>
	}
 800bfe4:	e00f      	b.n	800c006 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d00a      	beq.n	800c006 <prvDeleteTCB+0x56>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	60fb      	str	r3, [r7, #12]
}
 800c002:	bf00      	nop
 800c004:	e7fe      	b.n	800c004 <prvDeleteTCB+0x54>
	}
 800c006:	bf00      	nop
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
	...

0800c010 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c016:	4b0c      	ldr	r3, [pc, #48]	; (800c048 <prvResetNextTaskUnblockTime+0x38>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d104      	bne.n	800c02a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c020:	4b0a      	ldr	r3, [pc, #40]	; (800c04c <prvResetNextTaskUnblockTime+0x3c>)
 800c022:	f04f 32ff 	mov.w	r2, #4294967295
 800c026:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c028:	e008      	b.n	800c03c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c02a:	4b07      	ldr	r3, [pc, #28]	; (800c048 <prvResetNextTaskUnblockTime+0x38>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	4a04      	ldr	r2, [pc, #16]	; (800c04c <prvResetNextTaskUnblockTime+0x3c>)
 800c03a:	6013      	str	r3, [r2, #0]
}
 800c03c:	bf00      	nop
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	20000f60 	.word	0x20000f60
 800c04c:	20000fc8 	.word	0x20000fc8

0800c050 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c056:	4b0b      	ldr	r3, [pc, #44]	; (800c084 <xTaskGetSchedulerState+0x34>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d102      	bne.n	800c064 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c05e:	2301      	movs	r3, #1
 800c060:	607b      	str	r3, [r7, #4]
 800c062:	e008      	b.n	800c076 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c064:	4b08      	ldr	r3, [pc, #32]	; (800c088 <xTaskGetSchedulerState+0x38>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d102      	bne.n	800c072 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c06c:	2302      	movs	r3, #2
 800c06e:	607b      	str	r3, [r7, #4]
 800c070:	e001      	b.n	800c076 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c072:	2300      	movs	r3, #0
 800c074:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c076:	687b      	ldr	r3, [r7, #4]
	}
 800c078:	4618      	mov	r0, r3
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr
 800c084:	20000fb4 	.word	0x20000fb4
 800c088:	20000fd0 	.word	0x20000fd0

0800c08c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c098:	2300      	movs	r3, #0
 800c09a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d051      	beq.n	800c146 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a6:	4b2a      	ldr	r3, [pc, #168]	; (800c150 <xTaskPriorityInherit+0xc4>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d241      	bcs.n	800c134 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	699b      	ldr	r3, [r3, #24]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	db06      	blt.n	800c0c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0b8:	4b25      	ldr	r3, [pc, #148]	; (800c150 <xTaskPriorityInherit+0xc4>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	6959      	ldr	r1, [r3, #20]
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	4a1f      	ldr	r2, [pc, #124]	; (800c154 <xTaskPriorityInherit+0xc8>)
 800c0d8:	4413      	add	r3, r2
 800c0da:	4299      	cmp	r1, r3
 800c0dc:	d122      	bne.n	800c124 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fe f95e 	bl	800a3a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0e8:	4b19      	ldr	r3, [pc, #100]	; (800c150 <xTaskPriorityInherit+0xc4>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f6:	4b18      	ldr	r3, [pc, #96]	; (800c158 <xTaskPriorityInherit+0xcc>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d903      	bls.n	800c106 <xTaskPriorityInherit+0x7a>
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c102:	4a15      	ldr	r2, [pc, #84]	; (800c158 <xTaskPriorityInherit+0xcc>)
 800c104:	6013      	str	r3, [r2, #0]
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10a:	4613      	mov	r3, r2
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	4413      	add	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4a10      	ldr	r2, [pc, #64]	; (800c154 <xTaskPriorityInherit+0xc8>)
 800c114:	441a      	add	r2, r3
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	3304      	adds	r3, #4
 800c11a:	4619      	mov	r1, r3
 800c11c:	4610      	mov	r0, r2
 800c11e:	f7fe f8e4 	bl	800a2ea <vListInsertEnd>
 800c122:	e004      	b.n	800c12e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c124:	4b0a      	ldr	r3, [pc, #40]	; (800c150 <xTaskPriorityInherit+0xc4>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c12e:	2301      	movs	r3, #1
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	e008      	b.n	800c146 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c138:	4b05      	ldr	r3, [pc, #20]	; (800c150 <xTaskPriorityInherit+0xc4>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13e:	429a      	cmp	r2, r3
 800c140:	d201      	bcs.n	800c146 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c142:	2301      	movs	r3, #1
 800c144:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c146:	68fb      	ldr	r3, [r7, #12]
	}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20000ad4 	.word	0x20000ad4
 800c154:	20000ad8 	.word	0x20000ad8
 800c158:	20000fb0 	.word	0x20000fb0

0800c15c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c168:	2300      	movs	r3, #0
 800c16a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d056      	beq.n	800c220 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c172:	4b2e      	ldr	r3, [pc, #184]	; (800c22c <xTaskPriorityDisinherit+0xd0>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	693a      	ldr	r2, [r7, #16]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d00a      	beq.n	800c192 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	60fb      	str	r3, [r7, #12]
}
 800c18e:	bf00      	nop
 800c190:	e7fe      	b.n	800c190 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10a      	bne.n	800c1b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	60bb      	str	r3, [r7, #8]
}
 800c1ac:	bf00      	nop
 800c1ae:	e7fe      	b.n	800c1ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1b4:	1e5a      	subs	r2, r3, #1
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d02c      	beq.n	800c220 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d128      	bne.n	800c220 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fe f8e6 	bl	800a3a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f0:	4b0f      	ldr	r3, [pc, #60]	; (800c230 <xTaskPriorityDisinherit+0xd4>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d903      	bls.n	800c200 <xTaskPriorityDisinherit+0xa4>
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fc:	4a0c      	ldr	r2, [pc, #48]	; (800c230 <xTaskPriorityDisinherit+0xd4>)
 800c1fe:	6013      	str	r3, [r2, #0]
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c204:	4613      	mov	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4413      	add	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4a09      	ldr	r2, [pc, #36]	; (800c234 <xTaskPriorityDisinherit+0xd8>)
 800c20e:	441a      	add	r2, r3
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	3304      	adds	r3, #4
 800c214:	4619      	mov	r1, r3
 800c216:	4610      	mov	r0, r2
 800c218:	f7fe f867 	bl	800a2ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c21c:	2301      	movs	r3, #1
 800c21e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c220:	697b      	ldr	r3, [r7, #20]
	}
 800c222:	4618      	mov	r0, r3
 800c224:	3718      	adds	r7, #24
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	20000ad4 	.word	0x20000ad4
 800c230:	20000fb0 	.word	0x20000fb0
 800c234:	20000ad8 	.word	0x20000ad8

0800c238 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b088      	sub	sp, #32
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c246:	2301      	movs	r3, #1
 800c248:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d06a      	beq.n	800c326 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10a      	bne.n	800c26e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	60fb      	str	r3, [r7, #12]
}
 800c26a:	bf00      	nop
 800c26c:	e7fe      	b.n	800c26c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	429a      	cmp	r2, r3
 800c276:	d902      	bls.n	800c27e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	61fb      	str	r3, [r7, #28]
 800c27c:	e002      	b.n	800c284 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c282:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c288:	69fa      	ldr	r2, [r7, #28]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d04b      	beq.n	800c326 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	429a      	cmp	r2, r3
 800c296:	d146      	bne.n	800c326 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c298:	4b25      	ldr	r3, [pc, #148]	; (800c330 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	69ba      	ldr	r2, [r7, #24]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d10a      	bne.n	800c2b8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	60bb      	str	r3, [r7, #8]
}
 800c2b4:	bf00      	nop
 800c2b6:	e7fe      	b.n	800c2b6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	69fa      	ldr	r2, [r7, #28]
 800c2c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	699b      	ldr	r3, [r3, #24]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	db04      	blt.n	800c2d6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	6959      	ldr	r1, [r3, #20]
 800c2da:	693a      	ldr	r2, [r7, #16]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	4413      	add	r3, r2
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	4a13      	ldr	r2, [pc, #76]	; (800c334 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c2e6:	4413      	add	r3, r2
 800c2e8:	4299      	cmp	r1, r3
 800c2ea:	d11c      	bne.n	800c326 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7fe f857 	bl	800a3a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2fa:	4b0f      	ldr	r3, [pc, #60]	; (800c338 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d903      	bls.n	800c30a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c306:	4a0c      	ldr	r2, [pc, #48]	; (800c338 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c308:	6013      	str	r3, [r2, #0]
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c30e:	4613      	mov	r3, r2
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	4a07      	ldr	r2, [pc, #28]	; (800c334 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c318:	441a      	add	r2, r3
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	3304      	adds	r3, #4
 800c31e:	4619      	mov	r1, r3
 800c320:	4610      	mov	r0, r2
 800c322:	f7fd ffe2 	bl	800a2ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c326:	bf00      	nop
 800c328:	3720      	adds	r7, #32
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	20000ad4 	.word	0x20000ad4
 800c334:	20000ad8 	.word	0x20000ad8
 800c338:	20000fb0 	.word	0x20000fb0

0800c33c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c33c:	b480      	push	{r7}
 800c33e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c340:	4b07      	ldr	r3, [pc, #28]	; (800c360 <pvTaskIncrementMutexHeldCount+0x24>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d004      	beq.n	800c352 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c348:	4b05      	ldr	r3, [pc, #20]	; (800c360 <pvTaskIncrementMutexHeldCount+0x24>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c34e:	3201      	adds	r2, #1
 800c350:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c352:	4b03      	ldr	r3, [pc, #12]	; (800c360 <pvTaskIncrementMutexHeldCount+0x24>)
 800c354:	681b      	ldr	r3, [r3, #0]
	}
 800c356:	4618      	mov	r0, r3
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr
 800c360:	20000ad4 	.word	0x20000ad4

0800c364 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c36e:	f000 fd11 	bl	800cd94 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c372:	4b1e      	ldr	r3, [pc, #120]	; (800c3ec <ulTaskNotifyTake+0x88>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d113      	bne.n	800c3a4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c37c:	4b1b      	ldr	r3, [pc, #108]	; (800c3ec <ulTaskNotifyTake+0x88>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2201      	movs	r2, #1
 800c382:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00b      	beq.n	800c3a4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c38c:	2101      	movs	r1, #1
 800c38e:	6838      	ldr	r0, [r7, #0]
 800c390:	f000 f830 	bl	800c3f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c394:	4b16      	ldr	r3, [pc, #88]	; (800c3f0 <ulTaskNotifyTake+0x8c>)
 800c396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c39a:	601a      	str	r2, [r3, #0]
 800c39c:	f3bf 8f4f 	dsb	sy
 800c3a0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c3a4:	f000 fd26 	bl	800cdf4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c3a8:	f000 fcf4 	bl	800cd94 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c3ac:	4b0f      	ldr	r3, [pc, #60]	; (800c3ec <ulTaskNotifyTake+0x88>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3b2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00c      	beq.n	800c3d4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d004      	beq.n	800c3ca <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c3c0:	4b0a      	ldr	r3, [pc, #40]	; (800c3ec <ulTaskNotifyTake+0x88>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	655a      	str	r2, [r3, #84]	; 0x54
 800c3c8:	e004      	b.n	800c3d4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c3ca:	4b08      	ldr	r3, [pc, #32]	; (800c3ec <ulTaskNotifyTake+0x88>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	3a01      	subs	r2, #1
 800c3d2:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3d4:	4b05      	ldr	r3, [pc, #20]	; (800c3ec <ulTaskNotifyTake+0x88>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c3de:	f000 fd09 	bl	800cdf4 <vPortExitCritical>

		return ulReturn;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
	}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	20000ad4 	.word	0x20000ad4
 800c3f0:	e000ed04 	.word	0xe000ed04

0800c3f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3fe:	4b21      	ldr	r3, [pc, #132]	; (800c484 <prvAddCurrentTaskToDelayedList+0x90>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c404:	4b20      	ldr	r3, [pc, #128]	; (800c488 <prvAddCurrentTaskToDelayedList+0x94>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	3304      	adds	r3, #4
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fd ffca 	bl	800a3a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c416:	d10a      	bne.n	800c42e <prvAddCurrentTaskToDelayedList+0x3a>
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d007      	beq.n	800c42e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c41e:	4b1a      	ldr	r3, [pc, #104]	; (800c488 <prvAddCurrentTaskToDelayedList+0x94>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3304      	adds	r3, #4
 800c424:	4619      	mov	r1, r3
 800c426:	4819      	ldr	r0, [pc, #100]	; (800c48c <prvAddCurrentTaskToDelayedList+0x98>)
 800c428:	f7fd ff5f 	bl	800a2ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c42c:	e026      	b.n	800c47c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4413      	add	r3, r2
 800c434:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c436:	4b14      	ldr	r3, [pc, #80]	; (800c488 <prvAddCurrentTaskToDelayedList+0x94>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c43e:	68ba      	ldr	r2, [r7, #8]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	429a      	cmp	r2, r3
 800c444:	d209      	bcs.n	800c45a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c446:	4b12      	ldr	r3, [pc, #72]	; (800c490 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	4b0f      	ldr	r3, [pc, #60]	; (800c488 <prvAddCurrentTaskToDelayedList+0x94>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	3304      	adds	r3, #4
 800c450:	4619      	mov	r1, r3
 800c452:	4610      	mov	r0, r2
 800c454:	f7fd ff6d 	bl	800a332 <vListInsert>
}
 800c458:	e010      	b.n	800c47c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c45a:	4b0e      	ldr	r3, [pc, #56]	; (800c494 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	4b0a      	ldr	r3, [pc, #40]	; (800c488 <prvAddCurrentTaskToDelayedList+0x94>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	3304      	adds	r3, #4
 800c464:	4619      	mov	r1, r3
 800c466:	4610      	mov	r0, r2
 800c468:	f7fd ff63 	bl	800a332 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c46c:	4b0a      	ldr	r3, [pc, #40]	; (800c498 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	429a      	cmp	r2, r3
 800c474:	d202      	bcs.n	800c47c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c476:	4a08      	ldr	r2, [pc, #32]	; (800c498 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	6013      	str	r3, [r2, #0]
}
 800c47c:	bf00      	nop
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	20000fac 	.word	0x20000fac
 800c488:	20000ad4 	.word	0x20000ad4
 800c48c:	20000f94 	.word	0x20000f94
 800c490:	20000f64 	.word	0x20000f64
 800c494:	20000f60 	.word	0x20000f60
 800c498:	20000fc8 	.word	0x20000fc8

0800c49c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b08a      	sub	sp, #40	; 0x28
 800c4a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c4a6:	f000 fb07 	bl	800cab8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c4aa:	4b1c      	ldr	r3, [pc, #112]	; (800c51c <xTimerCreateTimerTask+0x80>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d021      	beq.n	800c4f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c4ba:	1d3a      	adds	r2, r7, #4
 800c4bc:	f107 0108 	add.w	r1, r7, #8
 800c4c0:	f107 030c 	add.w	r3, r7, #12
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fd fec9 	bl	800a25c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c4ca:	6879      	ldr	r1, [r7, #4]
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	9202      	str	r2, [sp, #8]
 800c4d2:	9301      	str	r3, [sp, #4]
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	2300      	movs	r3, #0
 800c4da:	460a      	mov	r2, r1
 800c4dc:	4910      	ldr	r1, [pc, #64]	; (800c520 <xTimerCreateTimerTask+0x84>)
 800c4de:	4811      	ldr	r0, [pc, #68]	; (800c524 <xTimerCreateTimerTask+0x88>)
 800c4e0:	f7fe fe20 	bl	800b124 <xTaskCreateStatic>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	4a10      	ldr	r2, [pc, #64]	; (800c528 <xTimerCreateTimerTask+0x8c>)
 800c4e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c4ea:	4b0f      	ldr	r3, [pc, #60]	; (800c528 <xTimerCreateTimerTask+0x8c>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d001      	beq.n	800c4f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10a      	bne.n	800c512 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	613b      	str	r3, [r7, #16]
}
 800c50e:	bf00      	nop
 800c510:	e7fe      	b.n	800c510 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c512:	697b      	ldr	r3, [r7, #20]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3718      	adds	r7, #24
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	20001004 	.word	0x20001004
 800c520:	0800e958 	.word	0x0800e958
 800c524:	0800c661 	.word	0x0800c661
 800c528:	20001008 	.word	0x20001008

0800c52c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b08a      	sub	sp, #40	; 0x28
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	607a      	str	r2, [r7, #4]
 800c538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c53a:	2300      	movs	r3, #0
 800c53c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10a      	bne.n	800c55a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c548:	f383 8811 	msr	BASEPRI, r3
 800c54c:	f3bf 8f6f 	isb	sy
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	623b      	str	r3, [r7, #32]
}
 800c556:	bf00      	nop
 800c558:	e7fe      	b.n	800c558 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c55a:	4b1a      	ldr	r3, [pc, #104]	; (800c5c4 <xTimerGenericCommand+0x98>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d02a      	beq.n	800c5b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	2b05      	cmp	r3, #5
 800c572:	dc18      	bgt.n	800c5a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c574:	f7ff fd6c 	bl	800c050 <xTaskGetSchedulerState>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d109      	bne.n	800c592 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c57e:	4b11      	ldr	r3, [pc, #68]	; (800c5c4 <xTimerGenericCommand+0x98>)
 800c580:	6818      	ldr	r0, [r3, #0]
 800c582:	f107 0110 	add.w	r1, r7, #16
 800c586:	2300      	movs	r3, #0
 800c588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c58a:	f7fe f8bf 	bl	800a70c <xQueueGenericSend>
 800c58e:	6278      	str	r0, [r7, #36]	; 0x24
 800c590:	e012      	b.n	800c5b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c592:	4b0c      	ldr	r3, [pc, #48]	; (800c5c4 <xTimerGenericCommand+0x98>)
 800c594:	6818      	ldr	r0, [r3, #0]
 800c596:	f107 0110 	add.w	r1, r7, #16
 800c59a:	2300      	movs	r3, #0
 800c59c:	2200      	movs	r2, #0
 800c59e:	f7fe f8b5 	bl	800a70c <xQueueGenericSend>
 800c5a2:	6278      	str	r0, [r7, #36]	; 0x24
 800c5a4:	e008      	b.n	800c5b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c5a6:	4b07      	ldr	r3, [pc, #28]	; (800c5c4 <xTimerGenericCommand+0x98>)
 800c5a8:	6818      	ldr	r0, [r3, #0]
 800c5aa:	f107 0110 	add.w	r1, r7, #16
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	f7fe f9a9 	bl	800a908 <xQueueGenericSendFromISR>
 800c5b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3728      	adds	r7, #40	; 0x28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20001004 	.word	0x20001004

0800c5c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b088      	sub	sp, #32
 800c5cc:	af02      	add	r7, sp, #8
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d2:	4b22      	ldr	r3, [pc, #136]	; (800c65c <prvProcessExpiredTimer+0x94>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	3304      	adds	r3, #4
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fd fedf 	bl	800a3a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5ec:	f003 0304 	and.w	r3, r3, #4
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d022      	beq.n	800c63a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	699a      	ldr	r2, [r3, #24]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	18d1      	adds	r1, r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	6978      	ldr	r0, [r7, #20]
 800c602:	f000 f8d1 	bl	800c7a8 <prvInsertTimerInActiveList>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01f      	beq.n	800c64c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c60c:	2300      	movs	r3, #0
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	2300      	movs	r3, #0
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	2100      	movs	r1, #0
 800c616:	6978      	ldr	r0, [r7, #20]
 800c618:	f7ff ff88 	bl	800c52c <xTimerGenericCommand>
 800c61c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d113      	bne.n	800c64c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	60fb      	str	r3, [r7, #12]
}
 800c636:	bf00      	nop
 800c638:	e7fe      	b.n	800c638 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c640:	f023 0301 	bic.w	r3, r3, #1
 800c644:	b2da      	uxtb	r2, r3
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	6a1b      	ldr	r3, [r3, #32]
 800c650:	6978      	ldr	r0, [r7, #20]
 800c652:	4798      	blx	r3
}
 800c654:	bf00      	nop
 800c656:	3718      	adds	r7, #24
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	20000ffc 	.word	0x20000ffc

0800c660 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c668:	f107 0308 	add.w	r3, r7, #8
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 f857 	bl	800c720 <prvGetNextExpireTime>
 800c672:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	4619      	mov	r1, r3
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f000 f803 	bl	800c684 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c67e:	f000 f8d5 	bl	800c82c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c682:	e7f1      	b.n	800c668 <prvTimerTask+0x8>

0800c684 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c68e:	f7ff f8fd 	bl	800b88c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c692:	f107 0308 	add.w	r3, r7, #8
 800c696:	4618      	mov	r0, r3
 800c698:	f000 f866 	bl	800c768 <prvSampleTimeNow>
 800c69c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d130      	bne.n	800c706 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d10a      	bne.n	800c6c0 <prvProcessTimerOrBlockTask+0x3c>
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d806      	bhi.n	800c6c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c6b2:	f7ff f8f9 	bl	800b8a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c6b6:	68f9      	ldr	r1, [r7, #12]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7ff ff85 	bl	800c5c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c6be:	e024      	b.n	800c70a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d008      	beq.n	800c6d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c6c6:	4b13      	ldr	r3, [pc, #76]	; (800c714 <prvProcessTimerOrBlockTask+0x90>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d101      	bne.n	800c6d4 <prvProcessTimerOrBlockTask+0x50>
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e000      	b.n	800c6d6 <prvProcessTimerOrBlockTask+0x52>
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c6d8:	4b0f      	ldr	r3, [pc, #60]	; (800c718 <prvProcessTimerOrBlockTask+0x94>)
 800c6da:	6818      	ldr	r0, [r3, #0]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	683a      	ldr	r2, [r7, #0]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	f7fe fce9 	bl	800b0bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c6ea:	f7ff f8dd 	bl	800b8a8 <xTaskResumeAll>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d10a      	bne.n	800c70a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6f4:	4b09      	ldr	r3, [pc, #36]	; (800c71c <prvProcessTimerOrBlockTask+0x98>)
 800c6f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6fa:	601a      	str	r2, [r3, #0]
 800c6fc:	f3bf 8f4f 	dsb	sy
 800c700:	f3bf 8f6f 	isb	sy
}
 800c704:	e001      	b.n	800c70a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c706:	f7ff f8cf 	bl	800b8a8 <xTaskResumeAll>
}
 800c70a:	bf00      	nop
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	20001000 	.word	0x20001000
 800c718:	20001004 	.word	0x20001004
 800c71c:	e000ed04 	.word	0xe000ed04

0800c720 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c728:	4b0e      	ldr	r3, [pc, #56]	; (800c764 <prvGetNextExpireTime+0x44>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d101      	bne.n	800c736 <prvGetNextExpireTime+0x16>
 800c732:	2201      	movs	r2, #1
 800c734:	e000      	b.n	800c738 <prvGetNextExpireTime+0x18>
 800c736:	2200      	movs	r2, #0
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d105      	bne.n	800c750 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c744:	4b07      	ldr	r3, [pc, #28]	; (800c764 <prvGetNextExpireTime+0x44>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	60fb      	str	r3, [r7, #12]
 800c74e:	e001      	b.n	800c754 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c750:	2300      	movs	r3, #0
 800c752:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c754:	68fb      	ldr	r3, [r7, #12]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3714      	adds	r7, #20
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	20000ffc 	.word	0x20000ffc

0800c768 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c770:	f7ff f938 	bl	800b9e4 <xTaskGetTickCount>
 800c774:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c776:	4b0b      	ldr	r3, [pc, #44]	; (800c7a4 <prvSampleTimeNow+0x3c>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d205      	bcs.n	800c78c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c780:	f000 f936 	bl	800c9f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	601a      	str	r2, [r3, #0]
 800c78a:	e002      	b.n	800c792 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c792:	4a04      	ldr	r2, [pc, #16]	; (800c7a4 <prvSampleTimeNow+0x3c>)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c798:	68fb      	ldr	r3, [r7, #12]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	2000100c 	.word	0x2000100c

0800c7a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b086      	sub	sp, #24
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
 800c7b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d812      	bhi.n	800c7f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	1ad2      	subs	r2, r2, r3
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d302      	bcc.n	800c7e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	617b      	str	r3, [r7, #20]
 800c7e0:	e01b      	b.n	800c81a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c7e2:	4b10      	ldr	r3, [pc, #64]	; (800c824 <prvInsertTimerInActiveList+0x7c>)
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	f7fd fda0 	bl	800a332 <vListInsert>
 800c7f2:	e012      	b.n	800c81a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d206      	bcs.n	800c80a <prvInsertTimerInActiveList+0x62>
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	429a      	cmp	r2, r3
 800c802:	d302      	bcc.n	800c80a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c804:	2301      	movs	r3, #1
 800c806:	617b      	str	r3, [r7, #20]
 800c808:	e007      	b.n	800c81a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c80a:	4b07      	ldr	r3, [pc, #28]	; (800c828 <prvInsertTimerInActiveList+0x80>)
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	3304      	adds	r3, #4
 800c812:	4619      	mov	r1, r3
 800c814:	4610      	mov	r0, r2
 800c816:	f7fd fd8c 	bl	800a332 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c81a:	697b      	ldr	r3, [r7, #20]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	20001000 	.word	0x20001000
 800c828:	20000ffc 	.word	0x20000ffc

0800c82c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b08e      	sub	sp, #56	; 0x38
 800c830:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c832:	e0ca      	b.n	800c9ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	da18      	bge.n	800c86c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c83a:	1d3b      	adds	r3, r7, #4
 800c83c:	3304      	adds	r3, #4
 800c83e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10a      	bne.n	800c85c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	61fb      	str	r3, [r7, #28]
}
 800c858:	bf00      	nop
 800c85a:	e7fe      	b.n	800c85a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c862:	6850      	ldr	r0, [r2, #4]
 800c864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c866:	6892      	ldr	r2, [r2, #8]
 800c868:	4611      	mov	r1, r2
 800c86a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f2c0 80aa 	blt.w	800c9c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87a:	695b      	ldr	r3, [r3, #20]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d004      	beq.n	800c88a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	3304      	adds	r3, #4
 800c884:	4618      	mov	r0, r3
 800c886:	f7fd fd8d 	bl	800a3a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c88a:	463b      	mov	r3, r7
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7ff ff6b 	bl	800c768 <prvSampleTimeNow>
 800c892:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2b09      	cmp	r3, #9
 800c898:	f200 8097 	bhi.w	800c9ca <prvProcessReceivedCommands+0x19e>
 800c89c:	a201      	add	r2, pc, #4	; (adr r2, 800c8a4 <prvProcessReceivedCommands+0x78>)
 800c89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a2:	bf00      	nop
 800c8a4:	0800c8cd 	.word	0x0800c8cd
 800c8a8:	0800c8cd 	.word	0x0800c8cd
 800c8ac:	0800c8cd 	.word	0x0800c8cd
 800c8b0:	0800c941 	.word	0x0800c941
 800c8b4:	0800c955 	.word	0x0800c955
 800c8b8:	0800c99f 	.word	0x0800c99f
 800c8bc:	0800c8cd 	.word	0x0800c8cd
 800c8c0:	0800c8cd 	.word	0x0800c8cd
 800c8c4:	0800c941 	.word	0x0800c941
 800c8c8:	0800c955 	.word	0x0800c955
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8d2:	f043 0301 	orr.w	r3, r3, #1
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c8de:	68ba      	ldr	r2, [r7, #8]
 800c8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	18d1      	adds	r1, r2, r3
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ec:	f7ff ff5c 	bl	800c7a8 <prvInsertTimerInActiveList>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d069      	beq.n	800c9ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f8:	6a1b      	ldr	r3, [r3, #32]
 800c8fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c904:	f003 0304 	and.w	r3, r3, #4
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d05e      	beq.n	800c9ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c90c:	68ba      	ldr	r2, [r7, #8]
 800c90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c910:	699b      	ldr	r3, [r3, #24]
 800c912:	441a      	add	r2, r3
 800c914:	2300      	movs	r3, #0
 800c916:	9300      	str	r3, [sp, #0]
 800c918:	2300      	movs	r3, #0
 800c91a:	2100      	movs	r1, #0
 800c91c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c91e:	f7ff fe05 	bl	800c52c <xTimerGenericCommand>
 800c922:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c924:	6a3b      	ldr	r3, [r7, #32]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d14f      	bne.n	800c9ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	61bb      	str	r3, [r7, #24]
}
 800c93c:	bf00      	nop
 800c93e:	e7fe      	b.n	800c93e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c946:	f023 0301 	bic.w	r3, r3, #1
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c952:	e03a      	b.n	800c9ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c95a:	f043 0301 	orr.w	r3, r3, #1
 800c95e:	b2da      	uxtb	r2, r3
 800c960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d10a      	bne.n	800c98a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c978:	f383 8811 	msr	BASEPRI, r3
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	f3bf 8f4f 	dsb	sy
 800c984:	617b      	str	r3, [r7, #20]
}
 800c986:	bf00      	nop
 800c988:	e7fe      	b.n	800c988 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98c:	699a      	ldr	r2, [r3, #24]
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	18d1      	adds	r1, r2, r3
 800c992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c998:	f7ff ff06 	bl	800c7a8 <prvInsertTimerInActiveList>
					break;
 800c99c:	e015      	b.n	800c9ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9a4:	f003 0302 	and.w	r3, r3, #2
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d103      	bne.n	800c9b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c9ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9ae:	f000 fbdf 	bl	800d170 <vPortFree>
 800c9b2:	e00a      	b.n	800c9ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ba:	f023 0301 	bic.w	r3, r3, #1
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c9c6:	e000      	b.n	800c9ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c9c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9ca:	4b08      	ldr	r3, [pc, #32]	; (800c9ec <prvProcessReceivedCommands+0x1c0>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	1d39      	adds	r1, r7, #4
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7fe f834 	bl	800aa40 <xQueueReceive>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f47f af2a 	bne.w	800c834 <prvProcessReceivedCommands+0x8>
	}
}
 800c9e0:	bf00      	nop
 800c9e2:	bf00      	nop
 800c9e4:	3730      	adds	r7, #48	; 0x30
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	20001004 	.word	0x20001004

0800c9f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b088      	sub	sp, #32
 800c9f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9f6:	e048      	b.n	800ca8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9f8:	4b2d      	ldr	r3, [pc, #180]	; (800cab0 <prvSwitchTimerLists+0xc0>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca02:	4b2b      	ldr	r3, [pc, #172]	; (800cab0 <prvSwitchTimerLists+0xc0>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	3304      	adds	r3, #4
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fd fcc7 	bl	800a3a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6a1b      	ldr	r3, [r3, #32]
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca24:	f003 0304 	and.w	r3, r3, #4
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d02e      	beq.n	800ca8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	693a      	ldr	r2, [r7, #16]
 800ca32:	4413      	add	r3, r2
 800ca34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d90e      	bls.n	800ca5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	68ba      	ldr	r2, [r7, #8]
 800ca42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca4a:	4b19      	ldr	r3, [pc, #100]	; (800cab0 <prvSwitchTimerLists+0xc0>)
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3304      	adds	r3, #4
 800ca52:	4619      	mov	r1, r3
 800ca54:	4610      	mov	r0, r2
 800ca56:	f7fd fc6c 	bl	800a332 <vListInsert>
 800ca5a:	e016      	b.n	800ca8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	2300      	movs	r3, #0
 800ca62:	693a      	ldr	r2, [r7, #16]
 800ca64:	2100      	movs	r1, #0
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f7ff fd60 	bl	800c52c <xTimerGenericCommand>
 800ca6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d10a      	bne.n	800ca8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ca74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca78:	f383 8811 	msr	BASEPRI, r3
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f3bf 8f4f 	dsb	sy
 800ca84:	603b      	str	r3, [r7, #0]
}
 800ca86:	bf00      	nop
 800ca88:	e7fe      	b.n	800ca88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca8a:	4b09      	ldr	r3, [pc, #36]	; (800cab0 <prvSwitchTimerLists+0xc0>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1b1      	bne.n	800c9f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca94:	4b06      	ldr	r3, [pc, #24]	; (800cab0 <prvSwitchTimerLists+0xc0>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca9a:	4b06      	ldr	r3, [pc, #24]	; (800cab4 <prvSwitchTimerLists+0xc4>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a04      	ldr	r2, [pc, #16]	; (800cab0 <prvSwitchTimerLists+0xc0>)
 800caa0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800caa2:	4a04      	ldr	r2, [pc, #16]	; (800cab4 <prvSwitchTimerLists+0xc4>)
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	6013      	str	r3, [r2, #0]
}
 800caa8:	bf00      	nop
 800caaa:	3718      	adds	r7, #24
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	20000ffc 	.word	0x20000ffc
 800cab4:	20001000 	.word	0x20001000

0800cab8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cabe:	f000 f969 	bl	800cd94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cac2:	4b15      	ldr	r3, [pc, #84]	; (800cb18 <prvCheckForValidListAndQueue+0x60>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d120      	bne.n	800cb0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800caca:	4814      	ldr	r0, [pc, #80]	; (800cb1c <prvCheckForValidListAndQueue+0x64>)
 800cacc:	f7fd fbe0 	bl	800a290 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cad0:	4813      	ldr	r0, [pc, #76]	; (800cb20 <prvCheckForValidListAndQueue+0x68>)
 800cad2:	f7fd fbdd 	bl	800a290 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cad6:	4b13      	ldr	r3, [pc, #76]	; (800cb24 <prvCheckForValidListAndQueue+0x6c>)
 800cad8:	4a10      	ldr	r2, [pc, #64]	; (800cb1c <prvCheckForValidListAndQueue+0x64>)
 800cada:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cadc:	4b12      	ldr	r3, [pc, #72]	; (800cb28 <prvCheckForValidListAndQueue+0x70>)
 800cade:	4a10      	ldr	r2, [pc, #64]	; (800cb20 <prvCheckForValidListAndQueue+0x68>)
 800cae0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cae2:	2300      	movs	r3, #0
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	4b11      	ldr	r3, [pc, #68]	; (800cb2c <prvCheckForValidListAndQueue+0x74>)
 800cae8:	4a11      	ldr	r2, [pc, #68]	; (800cb30 <prvCheckForValidListAndQueue+0x78>)
 800caea:	2110      	movs	r1, #16
 800caec:	200a      	movs	r0, #10
 800caee:	f7fd fceb 	bl	800a4c8 <xQueueGenericCreateStatic>
 800caf2:	4603      	mov	r3, r0
 800caf4:	4a08      	ldr	r2, [pc, #32]	; (800cb18 <prvCheckForValidListAndQueue+0x60>)
 800caf6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800caf8:	4b07      	ldr	r3, [pc, #28]	; (800cb18 <prvCheckForValidListAndQueue+0x60>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d005      	beq.n	800cb0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb00:	4b05      	ldr	r3, [pc, #20]	; (800cb18 <prvCheckForValidListAndQueue+0x60>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	490b      	ldr	r1, [pc, #44]	; (800cb34 <prvCheckForValidListAndQueue+0x7c>)
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fe faae 	bl	800b068 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb0c:	f000 f972 	bl	800cdf4 <vPortExitCritical>
}
 800cb10:	bf00      	nop
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	20001004 	.word	0x20001004
 800cb1c:	20000fd4 	.word	0x20000fd4
 800cb20:	20000fe8 	.word	0x20000fe8
 800cb24:	20000ffc 	.word	0x20000ffc
 800cb28:	20001000 	.word	0x20001000
 800cb2c:	200010b0 	.word	0x200010b0
 800cb30:	20001010 	.word	0x20001010
 800cb34:	0800e960 	.word	0x0800e960

0800cb38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	3b04      	subs	r3, #4
 800cb48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	3b04      	subs	r3, #4
 800cb56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	f023 0201 	bic.w	r2, r3, #1
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	3b04      	subs	r3, #4
 800cb66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb68:	4a0c      	ldr	r2, [pc, #48]	; (800cb9c <pxPortInitialiseStack+0x64>)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3b14      	subs	r3, #20
 800cb72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	3b04      	subs	r3, #4
 800cb7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f06f 0202 	mvn.w	r2, #2
 800cb86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3b20      	subs	r3, #32
 800cb8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr
 800cb9c:	0800cba1 	.word	0x0800cba1

0800cba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cba6:	2300      	movs	r3, #0
 800cba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cbaa:	4b12      	ldr	r3, [pc, #72]	; (800cbf4 <prvTaskExitError+0x54>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb2:	d00a      	beq.n	800cbca <prvTaskExitError+0x2a>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	60fb      	str	r3, [r7, #12]
}
 800cbc6:	bf00      	nop
 800cbc8:	e7fe      	b.n	800cbc8 <prvTaskExitError+0x28>
	__asm volatile
 800cbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	60bb      	str	r3, [r7, #8]
}
 800cbdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cbde:	bf00      	nop
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d0fc      	beq.n	800cbe0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cbe6:	bf00      	nop
 800cbe8:	bf00      	nop
 800cbea:	3714      	adds	r7, #20
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr
 800cbf4:	20000098 	.word	0x20000098
	...

0800cc00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc00:	4b07      	ldr	r3, [pc, #28]	; (800cc20 <pxCurrentTCBConst2>)
 800cc02:	6819      	ldr	r1, [r3, #0]
 800cc04:	6808      	ldr	r0, [r1, #0]
 800cc06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0a:	f380 8809 	msr	PSP, r0
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f04f 0000 	mov.w	r0, #0
 800cc16:	f380 8811 	msr	BASEPRI, r0
 800cc1a:	4770      	bx	lr
 800cc1c:	f3af 8000 	nop.w

0800cc20 <pxCurrentTCBConst2>:
 800cc20:	20000ad4 	.word	0x20000ad4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop

0800cc28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc28:	4808      	ldr	r0, [pc, #32]	; (800cc4c <prvPortStartFirstTask+0x24>)
 800cc2a:	6800      	ldr	r0, [r0, #0]
 800cc2c:	6800      	ldr	r0, [r0, #0]
 800cc2e:	f380 8808 	msr	MSP, r0
 800cc32:	f04f 0000 	mov.w	r0, #0
 800cc36:	f380 8814 	msr	CONTROL, r0
 800cc3a:	b662      	cpsie	i
 800cc3c:	b661      	cpsie	f
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	df00      	svc	0
 800cc48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc4a:	bf00      	nop
 800cc4c:	e000ed08 	.word	0xe000ed08

0800cc50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc56:	4b46      	ldr	r3, [pc, #280]	; (800cd70 <xPortStartScheduler+0x120>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a46      	ldr	r2, [pc, #280]	; (800cd74 <xPortStartScheduler+0x124>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d10a      	bne.n	800cc76 <xPortStartScheduler+0x26>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	613b      	str	r3, [r7, #16]
}
 800cc72:	bf00      	nop
 800cc74:	e7fe      	b.n	800cc74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc76:	4b3e      	ldr	r3, [pc, #248]	; (800cd70 <xPortStartScheduler+0x120>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a3f      	ldr	r2, [pc, #252]	; (800cd78 <xPortStartScheduler+0x128>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d10a      	bne.n	800cc96 <xPortStartScheduler+0x46>
	__asm volatile
 800cc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	60fb      	str	r3, [r7, #12]
}
 800cc92:	bf00      	nop
 800cc94:	e7fe      	b.n	800cc94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc96:	4b39      	ldr	r3, [pc, #228]	; (800cd7c <xPortStartScheduler+0x12c>)
 800cc98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	22ff      	movs	r2, #255	; 0xff
 800cca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ccb0:	78fb      	ldrb	r3, [r7, #3]
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ccb8:	b2da      	uxtb	r2, r3
 800ccba:	4b31      	ldr	r3, [pc, #196]	; (800cd80 <xPortStartScheduler+0x130>)
 800ccbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ccbe:	4b31      	ldr	r3, [pc, #196]	; (800cd84 <xPortStartScheduler+0x134>)
 800ccc0:	2207      	movs	r2, #7
 800ccc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccc4:	e009      	b.n	800ccda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ccc6:	4b2f      	ldr	r3, [pc, #188]	; (800cd84 <xPortStartScheduler+0x134>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3b01      	subs	r3, #1
 800cccc:	4a2d      	ldr	r2, [pc, #180]	; (800cd84 <xPortStartScheduler+0x134>)
 800ccce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ccd0:	78fb      	ldrb	r3, [r7, #3]
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccda:	78fb      	ldrb	r3, [r7, #3]
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cce2:	2b80      	cmp	r3, #128	; 0x80
 800cce4:	d0ef      	beq.n	800ccc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cce6:	4b27      	ldr	r3, [pc, #156]	; (800cd84 <xPortStartScheduler+0x134>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f1c3 0307 	rsb	r3, r3, #7
 800ccee:	2b04      	cmp	r3, #4
 800ccf0:	d00a      	beq.n	800cd08 <xPortStartScheduler+0xb8>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	60bb      	str	r3, [r7, #8]
}
 800cd04:	bf00      	nop
 800cd06:	e7fe      	b.n	800cd06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd08:	4b1e      	ldr	r3, [pc, #120]	; (800cd84 <xPortStartScheduler+0x134>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	021b      	lsls	r3, r3, #8
 800cd0e:	4a1d      	ldr	r2, [pc, #116]	; (800cd84 <xPortStartScheduler+0x134>)
 800cd10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd12:	4b1c      	ldr	r3, [pc, #112]	; (800cd84 <xPortStartScheduler+0x134>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd1a:	4a1a      	ldr	r2, [pc, #104]	; (800cd84 <xPortStartScheduler+0x134>)
 800cd1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd26:	4b18      	ldr	r3, [pc, #96]	; (800cd88 <xPortStartScheduler+0x138>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a17      	ldr	r2, [pc, #92]	; (800cd88 <xPortStartScheduler+0x138>)
 800cd2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd32:	4b15      	ldr	r3, [pc, #84]	; (800cd88 <xPortStartScheduler+0x138>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a14      	ldr	r2, [pc, #80]	; (800cd88 <xPortStartScheduler+0x138>)
 800cd38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd3e:	f000 f8dd 	bl	800cefc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd42:	4b12      	ldr	r3, [pc, #72]	; (800cd8c <xPortStartScheduler+0x13c>)
 800cd44:	2200      	movs	r2, #0
 800cd46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd48:	f000 f8fc 	bl	800cf44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd4c:	4b10      	ldr	r3, [pc, #64]	; (800cd90 <xPortStartScheduler+0x140>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a0f      	ldr	r2, [pc, #60]	; (800cd90 <xPortStartScheduler+0x140>)
 800cd52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd58:	f7ff ff66 	bl	800cc28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd5c:	f7fe ff0c 	bl	800bb78 <vTaskSwitchContext>
	prvTaskExitError();
 800cd60:	f7ff ff1e 	bl	800cba0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3718      	adds	r7, #24
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	e000ed00 	.word	0xe000ed00
 800cd74:	410fc271 	.word	0x410fc271
 800cd78:	410fc270 	.word	0x410fc270
 800cd7c:	e000e400 	.word	0xe000e400
 800cd80:	20001100 	.word	0x20001100
 800cd84:	20001104 	.word	0x20001104
 800cd88:	e000ed20 	.word	0xe000ed20
 800cd8c:	20000098 	.word	0x20000098
 800cd90:	e000ef34 	.word	0xe000ef34

0800cd94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
	__asm volatile
 800cd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9e:	f383 8811 	msr	BASEPRI, r3
 800cda2:	f3bf 8f6f 	isb	sy
 800cda6:	f3bf 8f4f 	dsb	sy
 800cdaa:	607b      	str	r3, [r7, #4]
}
 800cdac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdae:	4b0f      	ldr	r3, [pc, #60]	; (800cdec <vPortEnterCritical+0x58>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	4a0d      	ldr	r2, [pc, #52]	; (800cdec <vPortEnterCritical+0x58>)
 800cdb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cdb8:	4b0c      	ldr	r3, [pc, #48]	; (800cdec <vPortEnterCritical+0x58>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d10f      	bne.n	800cde0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cdc0:	4b0b      	ldr	r3, [pc, #44]	; (800cdf0 <vPortEnterCritical+0x5c>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00a      	beq.n	800cde0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	603b      	str	r3, [r7, #0]
}
 800cddc:	bf00      	nop
 800cdde:	e7fe      	b.n	800cdde <vPortEnterCritical+0x4a>
	}
}
 800cde0:	bf00      	nop
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr
 800cdec:	20000098 	.word	0x20000098
 800cdf0:	e000ed04 	.word	0xe000ed04

0800cdf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdfa:	4b12      	ldr	r3, [pc, #72]	; (800ce44 <vPortExitCritical+0x50>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d10a      	bne.n	800ce18 <vPortExitCritical+0x24>
	__asm volatile
 800ce02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce06:	f383 8811 	msr	BASEPRI, r3
 800ce0a:	f3bf 8f6f 	isb	sy
 800ce0e:	f3bf 8f4f 	dsb	sy
 800ce12:	607b      	str	r3, [r7, #4]
}
 800ce14:	bf00      	nop
 800ce16:	e7fe      	b.n	800ce16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce18:	4b0a      	ldr	r3, [pc, #40]	; (800ce44 <vPortExitCritical+0x50>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	4a09      	ldr	r2, [pc, #36]	; (800ce44 <vPortExitCritical+0x50>)
 800ce20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce22:	4b08      	ldr	r3, [pc, #32]	; (800ce44 <vPortExitCritical+0x50>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d105      	bne.n	800ce36 <vPortExitCritical+0x42>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	f383 8811 	msr	BASEPRI, r3
}
 800ce34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce36:	bf00      	nop
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	20000098 	.word	0x20000098
	...

0800ce50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce50:	f3ef 8009 	mrs	r0, PSP
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	4b15      	ldr	r3, [pc, #84]	; (800ceb0 <pxCurrentTCBConst>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	f01e 0f10 	tst.w	lr, #16
 800ce60:	bf08      	it	eq
 800ce62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6a:	6010      	str	r0, [r2, #0]
 800ce6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce74:	f380 8811 	msr	BASEPRI, r0
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f7fe fe7a 	bl	800bb78 <vTaskSwitchContext>
 800ce84:	f04f 0000 	mov.w	r0, #0
 800ce88:	f380 8811 	msr	BASEPRI, r0
 800ce8c:	bc09      	pop	{r0, r3}
 800ce8e:	6819      	ldr	r1, [r3, #0]
 800ce90:	6808      	ldr	r0, [r1, #0]
 800ce92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce96:	f01e 0f10 	tst.w	lr, #16
 800ce9a:	bf08      	it	eq
 800ce9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cea0:	f380 8809 	msr	PSP, r0
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	f3af 8000 	nop.w

0800ceb0 <pxCurrentTCBConst>:
 800ceb0:	20000ad4 	.word	0x20000ad4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ceb4:	bf00      	nop
 800ceb6:	bf00      	nop

0800ceb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
	__asm volatile
 800cebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	607b      	str	r3, [r7, #4]
}
 800ced0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ced2:	f7fe fd97 	bl	800ba04 <xTaskIncrementTick>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d003      	beq.n	800cee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cedc:	4b06      	ldr	r3, [pc, #24]	; (800cef8 <xPortSysTickHandler+0x40>)
 800cede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cee2:	601a      	str	r2, [r3, #0]
 800cee4:	2300      	movs	r3, #0
 800cee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	f383 8811 	msr	BASEPRI, r3
}
 800ceee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	e000ed04 	.word	0xe000ed04

0800cefc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cefc:	b480      	push	{r7}
 800cefe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf00:	4b0b      	ldr	r3, [pc, #44]	; (800cf30 <vPortSetupTimerInterrupt+0x34>)
 800cf02:	2200      	movs	r2, #0
 800cf04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf06:	4b0b      	ldr	r3, [pc, #44]	; (800cf34 <vPortSetupTimerInterrupt+0x38>)
 800cf08:	2200      	movs	r2, #0
 800cf0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf0c:	4b0a      	ldr	r3, [pc, #40]	; (800cf38 <vPortSetupTimerInterrupt+0x3c>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a0a      	ldr	r2, [pc, #40]	; (800cf3c <vPortSetupTimerInterrupt+0x40>)
 800cf12:	fba2 2303 	umull	r2, r3, r2, r3
 800cf16:	099b      	lsrs	r3, r3, #6
 800cf18:	4a09      	ldr	r2, [pc, #36]	; (800cf40 <vPortSetupTimerInterrupt+0x44>)
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf1e:	4b04      	ldr	r3, [pc, #16]	; (800cf30 <vPortSetupTimerInterrupt+0x34>)
 800cf20:	2207      	movs	r2, #7
 800cf22:	601a      	str	r2, [r3, #0]
}
 800cf24:	bf00      	nop
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	e000e010 	.word	0xe000e010
 800cf34:	e000e018 	.word	0xe000e018
 800cf38:	20000000 	.word	0x20000000
 800cf3c:	10624dd3 	.word	0x10624dd3
 800cf40:	e000e014 	.word	0xe000e014

0800cf44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf54 <vPortEnableVFP+0x10>
 800cf48:	6801      	ldr	r1, [r0, #0]
 800cf4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf4e:	6001      	str	r1, [r0, #0]
 800cf50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf52:	bf00      	nop
 800cf54:	e000ed88 	.word	0xe000ed88

0800cf58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf5e:	f3ef 8305 	mrs	r3, IPSR
 800cf62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b0f      	cmp	r3, #15
 800cf68:	d914      	bls.n	800cf94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf6a:	4a17      	ldr	r2, [pc, #92]	; (800cfc8 <vPortValidateInterruptPriority+0x70>)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	4413      	add	r3, r2
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf74:	4b15      	ldr	r3, [pc, #84]	; (800cfcc <vPortValidateInterruptPriority+0x74>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	7afa      	ldrb	r2, [r7, #11]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d20a      	bcs.n	800cf94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	607b      	str	r3, [r7, #4]
}
 800cf90:	bf00      	nop
 800cf92:	e7fe      	b.n	800cf92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf94:	4b0e      	ldr	r3, [pc, #56]	; (800cfd0 <vPortValidateInterruptPriority+0x78>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf9c:	4b0d      	ldr	r3, [pc, #52]	; (800cfd4 <vPortValidateInterruptPriority+0x7c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d90a      	bls.n	800cfba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	603b      	str	r3, [r7, #0]
}
 800cfb6:	bf00      	nop
 800cfb8:	e7fe      	b.n	800cfb8 <vPortValidateInterruptPriority+0x60>
	}
 800cfba:	bf00      	nop
 800cfbc:	3714      	adds	r7, #20
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	e000e3f0 	.word	0xe000e3f0
 800cfcc:	20001100 	.word	0x20001100
 800cfd0:	e000ed0c 	.word	0xe000ed0c
 800cfd4:	20001104 	.word	0x20001104

0800cfd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08a      	sub	sp, #40	; 0x28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cfe4:	f7fe fc52 	bl	800b88c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cfe8:	4b5b      	ldr	r3, [pc, #364]	; (800d158 <pvPortMalloc+0x180>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cff0:	f000 f920 	bl	800d234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cff4:	4b59      	ldr	r3, [pc, #356]	; (800d15c <pvPortMalloc+0x184>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4013      	ands	r3, r2
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f040 8093 	bne.w	800d128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d01d      	beq.n	800d044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d008:	2208      	movs	r2, #8
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4413      	add	r3, r2
 800d00e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f003 0307 	and.w	r3, r3, #7
 800d016:	2b00      	cmp	r3, #0
 800d018:	d014      	beq.n	800d044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f023 0307 	bic.w	r3, r3, #7
 800d020:	3308      	adds	r3, #8
 800d022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f003 0307 	and.w	r3, r3, #7
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00a      	beq.n	800d044 <pvPortMalloc+0x6c>
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	617b      	str	r3, [r7, #20]
}
 800d040:	bf00      	nop
 800d042:	e7fe      	b.n	800d042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d06e      	beq.n	800d128 <pvPortMalloc+0x150>
 800d04a:	4b45      	ldr	r3, [pc, #276]	; (800d160 <pvPortMalloc+0x188>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	429a      	cmp	r2, r3
 800d052:	d869      	bhi.n	800d128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d054:	4b43      	ldr	r3, [pc, #268]	; (800d164 <pvPortMalloc+0x18c>)
 800d056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d058:	4b42      	ldr	r3, [pc, #264]	; (800d164 <pvPortMalloc+0x18c>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d05e:	e004      	b.n	800d06a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	429a      	cmp	r2, r3
 800d072:	d903      	bls.n	800d07c <pvPortMalloc+0xa4>
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1f1      	bne.n	800d060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d07c:	4b36      	ldr	r3, [pc, #216]	; (800d158 <pvPortMalloc+0x180>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d082:	429a      	cmp	r2, r3
 800d084:	d050      	beq.n	800d128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2208      	movs	r2, #8
 800d08c:	4413      	add	r3, r2
 800d08e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	6a3b      	ldr	r3, [r7, #32]
 800d096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09a:	685a      	ldr	r2, [r3, #4]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	1ad2      	subs	r2, r2, r3
 800d0a0:	2308      	movs	r3, #8
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d91f      	bls.n	800d0e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	f003 0307 	and.w	r3, r3, #7
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00a      	beq.n	800d0d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	613b      	str	r3, [r7, #16]
}
 800d0cc:	bf00      	nop
 800d0ce:	e7fe      	b.n	800d0ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d2:	685a      	ldr	r2, [r3, #4]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	1ad2      	subs	r2, r2, r3
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d0e2:	69b8      	ldr	r0, [r7, #24]
 800d0e4:	f000 f908 	bl	800d2f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d0e8:	4b1d      	ldr	r3, [pc, #116]	; (800d160 <pvPortMalloc+0x188>)
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	4a1b      	ldr	r2, [pc, #108]	; (800d160 <pvPortMalloc+0x188>)
 800d0f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0f6:	4b1a      	ldr	r3, [pc, #104]	; (800d160 <pvPortMalloc+0x188>)
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	4b1b      	ldr	r3, [pc, #108]	; (800d168 <pvPortMalloc+0x190>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d203      	bcs.n	800d10a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d102:	4b17      	ldr	r3, [pc, #92]	; (800d160 <pvPortMalloc+0x188>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a18      	ldr	r2, [pc, #96]	; (800d168 <pvPortMalloc+0x190>)
 800d108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10c:	685a      	ldr	r2, [r3, #4]
 800d10e:	4b13      	ldr	r3, [pc, #76]	; (800d15c <pvPortMalloc+0x184>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	431a      	orrs	r2, r3
 800d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11a:	2200      	movs	r2, #0
 800d11c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d11e:	4b13      	ldr	r3, [pc, #76]	; (800d16c <pvPortMalloc+0x194>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	3301      	adds	r3, #1
 800d124:	4a11      	ldr	r2, [pc, #68]	; (800d16c <pvPortMalloc+0x194>)
 800d126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d128:	f7fe fbbe 	bl	800b8a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	f003 0307 	and.w	r3, r3, #7
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00a      	beq.n	800d14c <pvPortMalloc+0x174>
	__asm volatile
 800d136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13a:	f383 8811 	msr	BASEPRI, r3
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	60fb      	str	r3, [r7, #12]
}
 800d148:	bf00      	nop
 800d14a:	e7fe      	b.n	800d14a <pvPortMalloc+0x172>
	return pvReturn;
 800d14c:	69fb      	ldr	r3, [r7, #28]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3728      	adds	r7, #40	; 0x28
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	20004d10 	.word	0x20004d10
 800d15c:	20004d24 	.word	0x20004d24
 800d160:	20004d14 	.word	0x20004d14
 800d164:	20004d08 	.word	0x20004d08
 800d168:	20004d18 	.word	0x20004d18
 800d16c:	20004d1c 	.word	0x20004d1c

0800d170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d04d      	beq.n	800d21e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d182:	2308      	movs	r3, #8
 800d184:	425b      	negs	r3, r3
 800d186:	697a      	ldr	r2, [r7, #20]
 800d188:	4413      	add	r3, r2
 800d18a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	685a      	ldr	r2, [r3, #4]
 800d194:	4b24      	ldr	r3, [pc, #144]	; (800d228 <vPortFree+0xb8>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4013      	ands	r3, r2
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d10a      	bne.n	800d1b4 <vPortFree+0x44>
	__asm volatile
 800d19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a2:	f383 8811 	msr	BASEPRI, r3
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	f3bf 8f4f 	dsb	sy
 800d1ae:	60fb      	str	r3, [r7, #12]
}
 800d1b0:	bf00      	nop
 800d1b2:	e7fe      	b.n	800d1b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d00a      	beq.n	800d1d2 <vPortFree+0x62>
	__asm volatile
 800d1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	60bb      	str	r3, [r7, #8]
}
 800d1ce:	bf00      	nop
 800d1d0:	e7fe      	b.n	800d1d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	685a      	ldr	r2, [r3, #4]
 800d1d6:	4b14      	ldr	r3, [pc, #80]	; (800d228 <vPortFree+0xb8>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4013      	ands	r3, r2
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d01e      	beq.n	800d21e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d11a      	bne.n	800d21e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	685a      	ldr	r2, [r3, #4]
 800d1ec:	4b0e      	ldr	r3, [pc, #56]	; (800d228 <vPortFree+0xb8>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	43db      	mvns	r3, r3
 800d1f2:	401a      	ands	r2, r3
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1f8:	f7fe fb48 	bl	800b88c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	685a      	ldr	r2, [r3, #4]
 800d200:	4b0a      	ldr	r3, [pc, #40]	; (800d22c <vPortFree+0xbc>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4413      	add	r3, r2
 800d206:	4a09      	ldr	r2, [pc, #36]	; (800d22c <vPortFree+0xbc>)
 800d208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d20a:	6938      	ldr	r0, [r7, #16]
 800d20c:	f000 f874 	bl	800d2f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d210:	4b07      	ldr	r3, [pc, #28]	; (800d230 <vPortFree+0xc0>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3301      	adds	r3, #1
 800d216:	4a06      	ldr	r2, [pc, #24]	; (800d230 <vPortFree+0xc0>)
 800d218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d21a:	f7fe fb45 	bl	800b8a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d21e:	bf00      	nop
 800d220:	3718      	adds	r7, #24
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	20004d24 	.word	0x20004d24
 800d22c:	20004d14 	.word	0x20004d14
 800d230:	20004d20 	.word	0x20004d20

0800d234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d234:	b480      	push	{r7}
 800d236:	b085      	sub	sp, #20
 800d238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d23a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d23e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d240:	4b27      	ldr	r3, [pc, #156]	; (800d2e0 <prvHeapInit+0xac>)
 800d242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f003 0307 	and.w	r3, r3, #7
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00c      	beq.n	800d268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	3307      	adds	r3, #7
 800d252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f023 0307 	bic.w	r3, r3, #7
 800d25a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d25c:	68ba      	ldr	r2, [r7, #8]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	4a1f      	ldr	r2, [pc, #124]	; (800d2e0 <prvHeapInit+0xac>)
 800d264:	4413      	add	r3, r2
 800d266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d26c:	4a1d      	ldr	r2, [pc, #116]	; (800d2e4 <prvHeapInit+0xb0>)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d272:	4b1c      	ldr	r3, [pc, #112]	; (800d2e4 <prvHeapInit+0xb0>)
 800d274:	2200      	movs	r2, #0
 800d276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	68ba      	ldr	r2, [r7, #8]
 800d27c:	4413      	add	r3, r2
 800d27e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d280:	2208      	movs	r2, #8
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	1a9b      	subs	r3, r3, r2
 800d286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f023 0307 	bic.w	r3, r3, #7
 800d28e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	4a15      	ldr	r2, [pc, #84]	; (800d2e8 <prvHeapInit+0xb4>)
 800d294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d296:	4b14      	ldr	r3, [pc, #80]	; (800d2e8 <prvHeapInit+0xb4>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2200      	movs	r2, #0
 800d29c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d29e:	4b12      	ldr	r3, [pc, #72]	; (800d2e8 <prvHeapInit+0xb4>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	1ad2      	subs	r2, r2, r3
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d2b4:	4b0c      	ldr	r3, [pc, #48]	; (800d2e8 <prvHeapInit+0xb4>)
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	4a0a      	ldr	r2, [pc, #40]	; (800d2ec <prvHeapInit+0xb8>)
 800d2c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	4a09      	ldr	r2, [pc, #36]	; (800d2f0 <prvHeapInit+0xbc>)
 800d2ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d2cc:	4b09      	ldr	r3, [pc, #36]	; (800d2f4 <prvHeapInit+0xc0>)
 800d2ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d2d2:	601a      	str	r2, [r3, #0]
}
 800d2d4:	bf00      	nop
 800d2d6:	3714      	adds	r7, #20
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr
 800d2e0:	20001108 	.word	0x20001108
 800d2e4:	20004d08 	.word	0x20004d08
 800d2e8:	20004d10 	.word	0x20004d10
 800d2ec:	20004d18 	.word	0x20004d18
 800d2f0:	20004d14 	.word	0x20004d14
 800d2f4:	20004d24 	.word	0x20004d24

0800d2f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d300:	4b28      	ldr	r3, [pc, #160]	; (800d3a4 <prvInsertBlockIntoFreeList+0xac>)
 800d302:	60fb      	str	r3, [r7, #12]
 800d304:	e002      	b.n	800d30c <prvInsertBlockIntoFreeList+0x14>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	60fb      	str	r3, [r7, #12]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	429a      	cmp	r2, r3
 800d314:	d8f7      	bhi.n	800d306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	4413      	add	r3, r2
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	429a      	cmp	r2, r3
 800d326:	d108      	bne.n	800d33a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	685a      	ldr	r2, [r3, #4]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	441a      	add	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	441a      	add	r2, r3
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d118      	bne.n	800d380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	4b15      	ldr	r3, [pc, #84]	; (800d3a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	429a      	cmp	r2, r3
 800d358:	d00d      	beq.n	800d376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	685a      	ldr	r2, [r3, #4]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	441a      	add	r2, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	601a      	str	r2, [r3, #0]
 800d374:	e008      	b.n	800d388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d376:	4b0c      	ldr	r3, [pc, #48]	; (800d3a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	601a      	str	r2, [r3, #0]
 800d37e:	e003      	b.n	800d388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d388:	68fa      	ldr	r2, [r7, #12]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d002      	beq.n	800d396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d396:	bf00      	nop
 800d398:	3714      	adds	r7, #20
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop
 800d3a4:	20004d08 	.word	0x20004d08
 800d3a8:	20004d10 	.word	0x20004d10

0800d3ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	4912      	ldr	r1, [pc, #72]	; (800d3fc <MX_USB_DEVICE_Init+0x50>)
 800d3b4:	4812      	ldr	r0, [pc, #72]	; (800d400 <MX_USB_DEVICE_Init+0x54>)
 800d3b6:	f7fb fa11 	bl	80087dc <USBD_Init>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d001      	beq.n	800d3c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d3c0:	f7f4 fc5a 	bl	8001c78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d3c4:	490f      	ldr	r1, [pc, #60]	; (800d404 <MX_USB_DEVICE_Init+0x58>)
 800d3c6:	480e      	ldr	r0, [pc, #56]	; (800d400 <MX_USB_DEVICE_Init+0x54>)
 800d3c8:	f7fb fa38 	bl	800883c <USBD_RegisterClass>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d3d2:	f7f4 fc51 	bl	8001c78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d3d6:	490c      	ldr	r1, [pc, #48]	; (800d408 <MX_USB_DEVICE_Init+0x5c>)
 800d3d8:	4809      	ldr	r0, [pc, #36]	; (800d400 <MX_USB_DEVICE_Init+0x54>)
 800d3da:	f7fb f929 	bl	8008630 <USBD_CDC_RegisterInterface>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d001      	beq.n	800d3e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d3e4:	f7f4 fc48 	bl	8001c78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d3e8:	4805      	ldr	r0, [pc, #20]	; (800d400 <MX_USB_DEVICE_Init+0x54>)
 800d3ea:	f7fb fa5d 	bl	80088a8 <USBD_Start>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d001      	beq.n	800d3f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d3f4:	f7f4 fc40 	bl	8001c78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d3f8:	bf00      	nop
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	200000b0 	.word	0x200000b0
 800d400:	20004d28 	.word	0x20004d28
 800d404:	20000018 	.word	0x20000018
 800d408:	2000009c 	.word	0x2000009c

0800d40c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d410:	2200      	movs	r2, #0
 800d412:	4905      	ldr	r1, [pc, #20]	; (800d428 <CDC_Init_FS+0x1c>)
 800d414:	4805      	ldr	r0, [pc, #20]	; (800d42c <CDC_Init_FS+0x20>)
 800d416:	f7fb f925 	bl	8008664 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d41a:	4905      	ldr	r1, [pc, #20]	; (800d430 <CDC_Init_FS+0x24>)
 800d41c:	4803      	ldr	r0, [pc, #12]	; (800d42c <CDC_Init_FS+0x20>)
 800d41e:	f7fb f943 	bl	80086a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d422:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d424:	4618      	mov	r0, r3
 800d426:	bd80      	pop	{r7, pc}
 800d428:	20005404 	.word	0x20005404
 800d42c:	20004d28 	.word	0x20004d28
 800d430:	20005004 	.word	0x20005004

0800d434 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d434:	b480      	push	{r7}
 800d436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d438:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	4603      	mov	r3, r0
 800d44c:	6039      	str	r1, [r7, #0]
 800d44e:	71fb      	strb	r3, [r7, #7]
 800d450:	4613      	mov	r3, r2
 800d452:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d454:	79fb      	ldrb	r3, [r7, #7]
 800d456:	2b23      	cmp	r3, #35	; 0x23
 800d458:	d84a      	bhi.n	800d4f0 <CDC_Control_FS+0xac>
 800d45a:	a201      	add	r2, pc, #4	; (adr r2, 800d460 <CDC_Control_FS+0x1c>)
 800d45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d460:	0800d4f1 	.word	0x0800d4f1
 800d464:	0800d4f1 	.word	0x0800d4f1
 800d468:	0800d4f1 	.word	0x0800d4f1
 800d46c:	0800d4f1 	.word	0x0800d4f1
 800d470:	0800d4f1 	.word	0x0800d4f1
 800d474:	0800d4f1 	.word	0x0800d4f1
 800d478:	0800d4f1 	.word	0x0800d4f1
 800d47c:	0800d4f1 	.word	0x0800d4f1
 800d480:	0800d4f1 	.word	0x0800d4f1
 800d484:	0800d4f1 	.word	0x0800d4f1
 800d488:	0800d4f1 	.word	0x0800d4f1
 800d48c:	0800d4f1 	.word	0x0800d4f1
 800d490:	0800d4f1 	.word	0x0800d4f1
 800d494:	0800d4f1 	.word	0x0800d4f1
 800d498:	0800d4f1 	.word	0x0800d4f1
 800d49c:	0800d4f1 	.word	0x0800d4f1
 800d4a0:	0800d4f1 	.word	0x0800d4f1
 800d4a4:	0800d4f1 	.word	0x0800d4f1
 800d4a8:	0800d4f1 	.word	0x0800d4f1
 800d4ac:	0800d4f1 	.word	0x0800d4f1
 800d4b0:	0800d4f1 	.word	0x0800d4f1
 800d4b4:	0800d4f1 	.word	0x0800d4f1
 800d4b8:	0800d4f1 	.word	0x0800d4f1
 800d4bc:	0800d4f1 	.word	0x0800d4f1
 800d4c0:	0800d4f1 	.word	0x0800d4f1
 800d4c4:	0800d4f1 	.word	0x0800d4f1
 800d4c8:	0800d4f1 	.word	0x0800d4f1
 800d4cc:	0800d4f1 	.word	0x0800d4f1
 800d4d0:	0800d4f1 	.word	0x0800d4f1
 800d4d4:	0800d4f1 	.word	0x0800d4f1
 800d4d8:	0800d4f1 	.word	0x0800d4f1
 800d4dc:	0800d4f1 	.word	0x0800d4f1
 800d4e0:	0800d4f1 	.word	0x0800d4f1
 800d4e4:	0800d4f1 	.word	0x0800d4f1
 800d4e8:	0800d4f1 	.word	0x0800d4f1
 800d4ec:	0800d4f1 	.word	0x0800d4f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d4f0:	bf00      	nop
  }

  return (USBD_OK);
 800d4f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  BaseType_t xYieldRequired;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d50a:	6879      	ldr	r1, [r7, #4]
 800d50c:	4819      	ldr	r0, [pc, #100]	; (800d574 <CDC_Receive_FS+0x74>)
 800d50e:	f7fb f8cb 	bl	80086a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d512:	4818      	ldr	r0, [pc, #96]	; (800d574 <CDC_Receive_FS+0x74>)
 800d514:	f7fb f92c 	bl	8008770 <USBD_CDC_ReceivePacket>
  memset (buffer, '\0', 64);  // clear the buffer
 800d518:	2240      	movs	r2, #64	; 0x40
 800d51a:	2100      	movs	r1, #0
 800d51c:	4816      	ldr	r0, [pc, #88]	; (800d578 <CDC_Receive_FS+0x78>)
 800d51e:	f000 fcc1 	bl	800dea4 <memset>
  uint8_t len = (uint8_t)*Len;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 800d528:	7bfb      	ldrb	r3, [r7, #15]
 800d52a:	461a      	mov	r2, r3
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	4812      	ldr	r0, [pc, #72]	; (800d578 <CDC_Receive_FS+0x78>)
 800d530:	f000 fcaa 	bl	800de88 <memcpy>
  rec_cplt=1;
 800d534:	4b11      	ldr	r3, [pc, #68]	; (800d57c <CDC_Receive_FS+0x7c>)
 800d536:	2201      	movs	r2, #1
 800d538:	701a      	strb	r2, [r3, #0]
  xYieldRequired = xTaskResumeFromISR(USB_ListenHandle);
 800d53a:	4b11      	ldr	r3, [pc, #68]	; (800d580 <CDC_Receive_FS+0x80>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fe f8cc 	bl	800b6dc <xTaskResumeFromISR>
 800d544:	60b8      	str	r0, [r7, #8]
  portYIELD_FROM_ISR( xYieldRequired );
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d007      	beq.n	800d55c <CDC_Receive_FS+0x5c>
 800d54c:	4b0d      	ldr	r3, [pc, #52]	; (800d584 <CDC_Receive_FS+0x84>)
 800d54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d552:	601a      	str	r2, [r3, #0]
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	f3bf 8f6f 	isb	sy
  memset(Buf, '\0', len);   // clear the Buf also
 800d55c:	7bfb      	ldrb	r3, [r7, #15]
 800d55e:	461a      	mov	r2, r3
 800d560:	2100      	movs	r1, #0
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fc9e 	bl	800dea4 <memset>
  return (USBD_OK);
 800d568:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	20004d28 	.word	0x20004d28
 800d578:	20000330 	.word	0x20000330
 800d57c:	20000370 	.word	0x20000370
 800d580:	20000300 	.word	0x20000300
 800d584:	e000ed04 	.word	0xe000ed04

0800d588 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d594:	2300      	movs	r3, #0
 800d596:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d598:	4b0d      	ldr	r3, [pc, #52]	; (800d5d0 <CDC_Transmit_FS+0x48>)
 800d59a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d59e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d001      	beq.n	800d5ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e00b      	b.n	800d5c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d5ae:	887b      	ldrh	r3, [r7, #2]
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	6879      	ldr	r1, [r7, #4]
 800d5b4:	4806      	ldr	r0, [pc, #24]	; (800d5d0 <CDC_Transmit_FS+0x48>)
 800d5b6:	f7fb f855 	bl	8008664 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d5ba:	4805      	ldr	r0, [pc, #20]	; (800d5d0 <CDC_Transmit_FS+0x48>)
 800d5bc:	f7fb f892 	bl	80086e4 <USBD_CDC_TransmitPacket>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3710      	adds	r7, #16
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	20004d28 	.word	0x20004d28

0800d5d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b087      	sub	sp, #28
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d5e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	371c      	adds	r7, #28
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr
	...

0800d5f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b083      	sub	sp, #12
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4603      	mov	r3, r0
 800d600:	6039      	str	r1, [r7, #0]
 800d602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2212      	movs	r2, #18
 800d608:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d60a:	4b03      	ldr	r3, [pc, #12]	; (800d618 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr
 800d618:	200000cc 	.word	0x200000cc

0800d61c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	4603      	mov	r3, r0
 800d624:	6039      	str	r1, [r7, #0]
 800d626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	2204      	movs	r2, #4
 800d62c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d62e:	4b03      	ldr	r3, [pc, #12]	; (800d63c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d630:	4618      	mov	r0, r3
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	200000e0 	.word	0x200000e0

0800d640 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	4603      	mov	r3, r0
 800d648:	6039      	str	r1, [r7, #0]
 800d64a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d64c:	79fb      	ldrb	r3, [r7, #7]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d105      	bne.n	800d65e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d652:	683a      	ldr	r2, [r7, #0]
 800d654:	4907      	ldr	r1, [pc, #28]	; (800d674 <USBD_FS_ProductStrDescriptor+0x34>)
 800d656:	4808      	ldr	r0, [pc, #32]	; (800d678 <USBD_FS_ProductStrDescriptor+0x38>)
 800d658:	f7fc fad2 	bl	8009c00 <USBD_GetString>
 800d65c:	e004      	b.n	800d668 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d65e:	683a      	ldr	r2, [r7, #0]
 800d660:	4904      	ldr	r1, [pc, #16]	; (800d674 <USBD_FS_ProductStrDescriptor+0x34>)
 800d662:	4805      	ldr	r0, [pc, #20]	; (800d678 <USBD_FS_ProductStrDescriptor+0x38>)
 800d664:	f7fc facc 	bl	8009c00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d668:	4b02      	ldr	r3, [pc, #8]	; (800d674 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20005804 	.word	0x20005804
 800d678:	0800e968 	.word	0x0800e968

0800d67c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	4603      	mov	r3, r0
 800d684:	6039      	str	r1, [r7, #0]
 800d686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d688:	683a      	ldr	r2, [r7, #0]
 800d68a:	4904      	ldr	r1, [pc, #16]	; (800d69c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d68c:	4804      	ldr	r0, [pc, #16]	; (800d6a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d68e:	f7fc fab7 	bl	8009c00 <USBD_GetString>
  return USBD_StrDesc;
 800d692:	4b02      	ldr	r3, [pc, #8]	; (800d69c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d694:	4618      	mov	r0, r3
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	20005804 	.word	0x20005804
 800d6a0:	0800e980 	.word	0x0800e980

0800d6a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	6039      	str	r1, [r7, #0]
 800d6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	221a      	movs	r2, #26
 800d6b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d6b6:	f000 f843 	bl	800d740 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d6ba:	4b02      	ldr	r3, [pc, #8]	; (800d6c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3708      	adds	r7, #8
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	200000e4 	.word	0x200000e4

0800d6c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	6039      	str	r1, [r7, #0]
 800d6d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d6d4:	79fb      	ldrb	r3, [r7, #7]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d105      	bne.n	800d6e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6da:	683a      	ldr	r2, [r7, #0]
 800d6dc:	4907      	ldr	r1, [pc, #28]	; (800d6fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d6de:	4808      	ldr	r0, [pc, #32]	; (800d700 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d6e0:	f7fc fa8e 	bl	8009c00 <USBD_GetString>
 800d6e4:	e004      	b.n	800d6f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	4904      	ldr	r1, [pc, #16]	; (800d6fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d6ea:	4805      	ldr	r0, [pc, #20]	; (800d700 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d6ec:	f7fc fa88 	bl	8009c00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6f0:	4b02      	ldr	r3, [pc, #8]	; (800d6fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3708      	adds	r7, #8
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	20005804 	.word	0x20005804
 800d700:	0800e994 	.word	0x0800e994

0800d704 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	4603      	mov	r3, r0
 800d70c:	6039      	str	r1, [r7, #0]
 800d70e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d710:	79fb      	ldrb	r3, [r7, #7]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d105      	bne.n	800d722 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	4907      	ldr	r1, [pc, #28]	; (800d738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d71a:	4808      	ldr	r0, [pc, #32]	; (800d73c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d71c:	f7fc fa70 	bl	8009c00 <USBD_GetString>
 800d720:	e004      	b.n	800d72c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	4904      	ldr	r1, [pc, #16]	; (800d738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d726:	4805      	ldr	r0, [pc, #20]	; (800d73c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d728:	f7fc fa6a 	bl	8009c00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d72c:	4b02      	ldr	r3, [pc, #8]	; (800d738 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3708      	adds	r7, #8
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	20005804 	.word	0x20005804
 800d73c:	0800e9a0 	.word	0x0800e9a0

0800d740 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d746:	4b0f      	ldr	r3, [pc, #60]	; (800d784 <Get_SerialNum+0x44>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d74c:	4b0e      	ldr	r3, [pc, #56]	; (800d788 <Get_SerialNum+0x48>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d752:	4b0e      	ldr	r3, [pc, #56]	; (800d78c <Get_SerialNum+0x4c>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4413      	add	r3, r2
 800d75e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d009      	beq.n	800d77a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d766:	2208      	movs	r2, #8
 800d768:	4909      	ldr	r1, [pc, #36]	; (800d790 <Get_SerialNum+0x50>)
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	f000 f814 	bl	800d798 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d770:	2204      	movs	r2, #4
 800d772:	4908      	ldr	r1, [pc, #32]	; (800d794 <Get_SerialNum+0x54>)
 800d774:	68b8      	ldr	r0, [r7, #8]
 800d776:	f000 f80f 	bl	800d798 <IntToUnicode>
  }
}
 800d77a:	bf00      	nop
 800d77c:	3710      	adds	r7, #16
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	1fff7a10 	.word	0x1fff7a10
 800d788:	1fff7a14 	.word	0x1fff7a14
 800d78c:	1fff7a18 	.word	0x1fff7a18
 800d790:	200000e6 	.word	0x200000e6
 800d794:	200000f6 	.word	0x200000f6

0800d798 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d798:	b480      	push	{r7}
 800d79a:	b087      	sub	sp, #28
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	75fb      	strb	r3, [r7, #23]
 800d7ae:	e027      	b.n	800d800 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	0f1b      	lsrs	r3, r3, #28
 800d7b4:	2b09      	cmp	r3, #9
 800d7b6:	d80b      	bhi.n	800d7d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	0f1b      	lsrs	r3, r3, #28
 800d7bc:	b2da      	uxtb	r2, r3
 800d7be:	7dfb      	ldrb	r3, [r7, #23]
 800d7c0:	005b      	lsls	r3, r3, #1
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	440b      	add	r3, r1
 800d7c8:	3230      	adds	r2, #48	; 0x30
 800d7ca:	b2d2      	uxtb	r2, r2
 800d7cc:	701a      	strb	r2, [r3, #0]
 800d7ce:	e00a      	b.n	800d7e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	0f1b      	lsrs	r3, r3, #28
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	7dfb      	ldrb	r3, [r7, #23]
 800d7d8:	005b      	lsls	r3, r3, #1
 800d7da:	4619      	mov	r1, r3
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	440b      	add	r3, r1
 800d7e0:	3237      	adds	r2, #55	; 0x37
 800d7e2:	b2d2      	uxtb	r2, r2
 800d7e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	011b      	lsls	r3, r3, #4
 800d7ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d7ec:	7dfb      	ldrb	r3, [r7, #23]
 800d7ee:	005b      	lsls	r3, r3, #1
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	68ba      	ldr	r2, [r7, #8]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7fa:	7dfb      	ldrb	r3, [r7, #23]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	75fb      	strb	r3, [r7, #23]
 800d800:	7dfa      	ldrb	r2, [r7, #23]
 800d802:	79fb      	ldrb	r3, [r7, #7]
 800d804:	429a      	cmp	r2, r3
 800d806:	d3d3      	bcc.n	800d7b0 <IntToUnicode+0x18>
  }
}
 800d808:	bf00      	nop
 800d80a:	bf00      	nop
 800d80c:	371c      	adds	r7, #28
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
	...

0800d818 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b08a      	sub	sp, #40	; 0x28
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d820:	f107 0314 	add.w	r3, r7, #20
 800d824:	2200      	movs	r2, #0
 800d826:	601a      	str	r2, [r3, #0]
 800d828:	605a      	str	r2, [r3, #4]
 800d82a:	609a      	str	r2, [r3, #8]
 800d82c:	60da      	str	r2, [r3, #12]
 800d82e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d838:	d13a      	bne.n	800d8b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d83a:	2300      	movs	r3, #0
 800d83c:	613b      	str	r3, [r7, #16]
 800d83e:	4b1e      	ldr	r3, [pc, #120]	; (800d8b8 <HAL_PCD_MspInit+0xa0>)
 800d840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d842:	4a1d      	ldr	r2, [pc, #116]	; (800d8b8 <HAL_PCD_MspInit+0xa0>)
 800d844:	f043 0301 	orr.w	r3, r3, #1
 800d848:	6313      	str	r3, [r2, #48]	; 0x30
 800d84a:	4b1b      	ldr	r3, [pc, #108]	; (800d8b8 <HAL_PCD_MspInit+0xa0>)
 800d84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d84e:	f003 0301 	and.w	r3, r3, #1
 800d852:	613b      	str	r3, [r7, #16]
 800d854:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d856:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d85a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d85c:	2302      	movs	r3, #2
 800d85e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d860:	2300      	movs	r3, #0
 800d862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d864:	2303      	movs	r3, #3
 800d866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d868:	230a      	movs	r3, #10
 800d86a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d86c:	f107 0314 	add.w	r3, r7, #20
 800d870:	4619      	mov	r1, r3
 800d872:	4812      	ldr	r0, [pc, #72]	; (800d8bc <HAL_PCD_MspInit+0xa4>)
 800d874:	f7f5 fce4 	bl	8003240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d878:	4b0f      	ldr	r3, [pc, #60]	; (800d8b8 <HAL_PCD_MspInit+0xa0>)
 800d87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d87c:	4a0e      	ldr	r2, [pc, #56]	; (800d8b8 <HAL_PCD_MspInit+0xa0>)
 800d87e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d882:	6353      	str	r3, [r2, #52]	; 0x34
 800d884:	2300      	movs	r3, #0
 800d886:	60fb      	str	r3, [r7, #12]
 800d888:	4b0b      	ldr	r3, [pc, #44]	; (800d8b8 <HAL_PCD_MspInit+0xa0>)
 800d88a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d88c:	4a0a      	ldr	r2, [pc, #40]	; (800d8b8 <HAL_PCD_MspInit+0xa0>)
 800d88e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d892:	6453      	str	r3, [r2, #68]	; 0x44
 800d894:	4b08      	ldr	r3, [pc, #32]	; (800d8b8 <HAL_PCD_MspInit+0xa0>)
 800d896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d89c:	60fb      	str	r3, [r7, #12]
 800d89e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	2105      	movs	r1, #5
 800d8a4:	2043      	movs	r0, #67	; 0x43
 800d8a6:	f7f5 f931 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d8aa:	2043      	movs	r0, #67	; 0x43
 800d8ac:	f7f5 f94a 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d8b0:	bf00      	nop
 800d8b2:	3728      	adds	r7, #40	; 0x28
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	40023800 	.word	0x40023800
 800d8bc:	40020000 	.word	0x40020000

0800d8c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	4610      	mov	r0, r2
 800d8d8:	f7fb f833 	bl	8008942 <USBD_LL_SetupStage>
}
 800d8dc:	bf00      	nop
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d8f6:	78fa      	ldrb	r2, [r7, #3]
 800d8f8:	6879      	ldr	r1, [r7, #4]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	00db      	lsls	r3, r3, #3
 800d8fe:	4413      	add	r3, r2
 800d900:	009b      	lsls	r3, r3, #2
 800d902:	440b      	add	r3, r1
 800d904:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	78fb      	ldrb	r3, [r7, #3]
 800d90c:	4619      	mov	r1, r3
 800d90e:	f7fb f86d 	bl	80089ec <USBD_LL_DataOutStage>
}
 800d912:	bf00      	nop
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b082      	sub	sp, #8
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
 800d922:	460b      	mov	r3, r1
 800d924:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d92c:	78fa      	ldrb	r2, [r7, #3]
 800d92e:	6879      	ldr	r1, [r7, #4]
 800d930:	4613      	mov	r3, r2
 800d932:	00db      	lsls	r3, r3, #3
 800d934:	4413      	add	r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	440b      	add	r3, r1
 800d93a:	334c      	adds	r3, #76	; 0x4c
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	78fb      	ldrb	r3, [r7, #3]
 800d940:	4619      	mov	r1, r3
 800d942:	f7fb f906 	bl	8008b52 <USBD_LL_DataInStage>
}
 800d946:	bf00      	nop
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b082      	sub	sp, #8
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fb fa3a 	bl	8008dd6 <USBD_LL_SOF>
}
 800d962:	bf00      	nop
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d96a:	b580      	push	{r7, lr}
 800d96c:	b084      	sub	sp, #16
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d972:	2301      	movs	r3, #1
 800d974:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d001      	beq.n	800d982 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d97e:	f7f4 f97b 	bl	8001c78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d988:	7bfa      	ldrb	r2, [r7, #15]
 800d98a:	4611      	mov	r1, r2
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fb f9e4 	bl	8008d5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d998:	4618      	mov	r0, r3
 800d99a:	f7fb f98c 	bl	8008cb6 <USBD_LL_Reset>
}
 800d99e:	bf00      	nop
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
	...

0800d9a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fb f9df 	bl	8008d7a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	6812      	ldr	r2, [r2, #0]
 800d9ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d9ce:	f043 0301 	orr.w	r3, r3, #1
 800d9d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6a1b      	ldr	r3, [r3, #32]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d005      	beq.n	800d9e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9dc:	4b04      	ldr	r3, [pc, #16]	; (800d9f0 <HAL_PCD_SuspendCallback+0x48>)
 800d9de:	691b      	ldr	r3, [r3, #16]
 800d9e0:	4a03      	ldr	r2, [pc, #12]	; (800d9f0 <HAL_PCD_SuspendCallback+0x48>)
 800d9e2:	f043 0306 	orr.w	r3, r3, #6
 800d9e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	e000ed00 	.word	0xe000ed00

0800d9f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da02:	4618      	mov	r0, r3
 800da04:	f7fb f9cf 	bl	8008da6 <USBD_LL_Resume>
}
 800da08:	bf00      	nop
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	460b      	mov	r3, r1
 800da1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da22:	78fa      	ldrb	r2, [r7, #3]
 800da24:	4611      	mov	r1, r2
 800da26:	4618      	mov	r0, r3
 800da28:	f7fb fa27 	bl	8008e7a <USBD_LL_IsoOUTIncomplete>
}
 800da2c:	bf00      	nop
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	460b      	mov	r3, r1
 800da3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da46:	78fa      	ldrb	r2, [r7, #3]
 800da48:	4611      	mov	r1, r2
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fb f9e3 	bl	8008e16 <USBD_LL_IsoINIncomplete>
}
 800da50:	bf00      	nop
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da66:	4618      	mov	r0, r3
 800da68:	f7fb fa39 	bl	8008ede <USBD_LL_DevConnected>
}
 800da6c:	bf00      	nop
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da82:	4618      	mov	r0, r3
 800da84:	f7fb fa36 	bl	8008ef4 <USBD_LL_DevDisconnected>
}
 800da88:	bf00      	nop
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d13c      	bne.n	800db1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800daa0:	4a20      	ldr	r2, [pc, #128]	; (800db24 <USBD_LL_Init+0x94>)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	4a1e      	ldr	r2, [pc, #120]	; (800db24 <USBD_LL_Init+0x94>)
 800daac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dab0:	4b1c      	ldr	r3, [pc, #112]	; (800db24 <USBD_LL_Init+0x94>)
 800dab2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dab6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dab8:	4b1a      	ldr	r3, [pc, #104]	; (800db24 <USBD_LL_Init+0x94>)
 800daba:	2204      	movs	r2, #4
 800dabc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dabe:	4b19      	ldr	r3, [pc, #100]	; (800db24 <USBD_LL_Init+0x94>)
 800dac0:	2202      	movs	r2, #2
 800dac2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dac4:	4b17      	ldr	r3, [pc, #92]	; (800db24 <USBD_LL_Init+0x94>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800daca:	4b16      	ldr	r3, [pc, #88]	; (800db24 <USBD_LL_Init+0x94>)
 800dacc:	2202      	movs	r2, #2
 800dace:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dad0:	4b14      	ldr	r3, [pc, #80]	; (800db24 <USBD_LL_Init+0x94>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dad6:	4b13      	ldr	r3, [pc, #76]	; (800db24 <USBD_LL_Init+0x94>)
 800dad8:	2200      	movs	r2, #0
 800dada:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dadc:	4b11      	ldr	r3, [pc, #68]	; (800db24 <USBD_LL_Init+0x94>)
 800dade:	2200      	movs	r2, #0
 800dae0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dae2:	4b10      	ldr	r3, [pc, #64]	; (800db24 <USBD_LL_Init+0x94>)
 800dae4:	2200      	movs	r2, #0
 800dae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dae8:	4b0e      	ldr	r3, [pc, #56]	; (800db24 <USBD_LL_Init+0x94>)
 800daea:	2200      	movs	r2, #0
 800daec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800daee:	480d      	ldr	r0, [pc, #52]	; (800db24 <USBD_LL_Init+0x94>)
 800daf0:	f7f5 fd8e 	bl	8003610 <HAL_PCD_Init>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d001      	beq.n	800dafe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dafa:	f7f4 f8bd 	bl	8001c78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dafe:	2180      	movs	r1, #128	; 0x80
 800db00:	4808      	ldr	r0, [pc, #32]	; (800db24 <USBD_LL_Init+0x94>)
 800db02:	f7f6 ffe6 	bl	8004ad2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800db06:	2240      	movs	r2, #64	; 0x40
 800db08:	2100      	movs	r1, #0
 800db0a:	4806      	ldr	r0, [pc, #24]	; (800db24 <USBD_LL_Init+0x94>)
 800db0c:	f7f6 ff9a 	bl	8004a44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800db10:	2280      	movs	r2, #128	; 0x80
 800db12:	2101      	movs	r1, #1
 800db14:	4803      	ldr	r0, [pc, #12]	; (800db24 <USBD_LL_Init+0x94>)
 800db16:	f7f6 ff95 	bl	8004a44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	20005a04 	.word	0x20005a04

0800db28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db30:	2300      	movs	r3, #0
 800db32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db34:	2300      	movs	r3, #0
 800db36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db3e:	4618      	mov	r0, r3
 800db40:	f7f5 fe83 	bl	800384a <HAL_PCD_Start>
 800db44:	4603      	mov	r3, r0
 800db46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db48:	7bfb      	ldrb	r3, [r7, #15]
 800db4a:	4618      	mov	r0, r3
 800db4c:	f000 f942 	bl	800ddd4 <USBD_Get_USB_Status>
 800db50:	4603      	mov	r3, r0
 800db52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db54:	7bbb      	ldrb	r3, [r7, #14]
}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b084      	sub	sp, #16
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
 800db66:	4608      	mov	r0, r1
 800db68:	4611      	mov	r1, r2
 800db6a:	461a      	mov	r2, r3
 800db6c:	4603      	mov	r3, r0
 800db6e:	70fb      	strb	r3, [r7, #3]
 800db70:	460b      	mov	r3, r1
 800db72:	70bb      	strb	r3, [r7, #2]
 800db74:	4613      	mov	r3, r2
 800db76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db78:	2300      	movs	r3, #0
 800db7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db7c:	2300      	movs	r3, #0
 800db7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800db86:	78bb      	ldrb	r3, [r7, #2]
 800db88:	883a      	ldrh	r2, [r7, #0]
 800db8a:	78f9      	ldrb	r1, [r7, #3]
 800db8c:	f7f6 fb54 	bl	8004238 <HAL_PCD_EP_Open>
 800db90:	4603      	mov	r3, r0
 800db92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db94:	7bfb      	ldrb	r3, [r7, #15]
 800db96:	4618      	mov	r0, r3
 800db98:	f000 f91c 	bl	800ddd4 <USBD_Get_USB_Status>
 800db9c:	4603      	mov	r3, r0
 800db9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dba0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b084      	sub	sp, #16
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbc4:	78fa      	ldrb	r2, [r7, #3]
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7f6 fb9d 	bl	8004308 <HAL_PCD_EP_Close>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbd2:	7bfb      	ldrb	r3, [r7, #15]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f000 f8fd 	bl	800ddd4 <USBD_Get_USB_Status>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbde:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3710      	adds	r7, #16
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc02:	78fa      	ldrb	r2, [r7, #3]
 800dc04:	4611      	mov	r1, r2
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7f6 fc75 	bl	80044f6 <HAL_PCD_EP_SetStall>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f000 f8de 	bl	800ddd4 <USBD_Get_USB_Status>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b084      	sub	sp, #16
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
 800dc2e:	460b      	mov	r3, r1
 800dc30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc32:	2300      	movs	r3, #0
 800dc34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc36:	2300      	movs	r3, #0
 800dc38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc40:	78fa      	ldrb	r2, [r7, #3]
 800dc42:	4611      	mov	r1, r2
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7f6 fcba 	bl	80045be <HAL_PCD_EP_ClrStall>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc4e:	7bfb      	ldrb	r3, [r7, #15]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f000 f8bf 	bl	800ddd4 <USBD_Get_USB_Status>
 800dc56:	4603      	mov	r3, r0
 800dc58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b085      	sub	sp, #20
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dc78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	da0b      	bge.n	800dc98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dc80:	78fb      	ldrb	r3, [r7, #3]
 800dc82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc86:	68f9      	ldr	r1, [r7, #12]
 800dc88:	4613      	mov	r3, r2
 800dc8a:	00db      	lsls	r3, r3, #3
 800dc8c:	4413      	add	r3, r2
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	440b      	add	r3, r1
 800dc92:	333e      	adds	r3, #62	; 0x3e
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	e00b      	b.n	800dcb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc98:	78fb      	ldrb	r3, [r7, #3]
 800dc9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc9e:	68f9      	ldr	r1, [r7, #12]
 800dca0:	4613      	mov	r3, r2
 800dca2:	00db      	lsls	r3, r3, #3
 800dca4:	4413      	add	r3, r2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	440b      	add	r3, r1
 800dcaa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800dcae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3714      	adds	r7, #20
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dcd6:	78fa      	ldrb	r2, [r7, #3]
 800dcd8:	4611      	mov	r1, r2
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7f6 fa87 	bl	80041ee <HAL_PCD_SetAddress>
 800dce0:	4603      	mov	r3, r0
 800dce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dce4:	7bfb      	ldrb	r3, [r7, #15]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f000 f874 	bl	800ddd4 <USBD_Get_USB_Status>
 800dcec:	4603      	mov	r3, r0
 800dcee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b086      	sub	sp, #24
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	60f8      	str	r0, [r7, #12]
 800dd02:	607a      	str	r2, [r7, #4]
 800dd04:	603b      	str	r3, [r7, #0]
 800dd06:	460b      	mov	r3, r1
 800dd08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dd18:	7af9      	ldrb	r1, [r7, #11]
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	f7f6 fba0 	bl	8004462 <HAL_PCD_EP_Transmit>
 800dd22:	4603      	mov	r3, r0
 800dd24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd26:	7dfb      	ldrb	r3, [r7, #23]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f000 f853 	bl	800ddd4 <USBD_Get_USB_Status>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd32:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3718      	adds	r7, #24
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	607a      	str	r2, [r7, #4]
 800dd46:	603b      	str	r3, [r7, #0]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd50:	2300      	movs	r3, #0
 800dd52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dd5a:	7af9      	ldrb	r1, [r7, #11]
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	f7f6 fb1c 	bl	800439c <HAL_PCD_EP_Receive>
 800dd64:	4603      	mov	r3, r0
 800dd66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd68:	7dfb      	ldrb	r3, [r7, #23]
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f000 f832 	bl	800ddd4 <USBD_Get_USB_Status>
 800dd70:	4603      	mov	r3, r0
 800dd72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd74:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3718      	adds	r7, #24
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}

0800dd7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd7e:	b580      	push	{r7, lr}
 800dd80:	b082      	sub	sp, #8
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
 800dd86:	460b      	mov	r3, r1
 800dd88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd90:	78fa      	ldrb	r2, [r7, #3]
 800dd92:	4611      	mov	r1, r2
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7f6 fb4c 	bl	8004432 <HAL_PCD_EP_GetRxCount>
 800dd9a:	4603      	mov	r3, r0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ddac:	4b03      	ldr	r3, [pc, #12]	; (800ddbc <USBD_static_malloc+0x18>)
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	20005f10 	.word	0x20005f10

0800ddc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]

}
 800ddc8:	bf00      	nop
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	4603      	mov	r3, r0
 800dddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddde:	2300      	movs	r3, #0
 800dde0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dde2:	79fb      	ldrb	r3, [r7, #7]
 800dde4:	2b03      	cmp	r3, #3
 800dde6:	d817      	bhi.n	800de18 <USBD_Get_USB_Status+0x44>
 800dde8:	a201      	add	r2, pc, #4	; (adr r2, 800ddf0 <USBD_Get_USB_Status+0x1c>)
 800ddea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddee:	bf00      	nop
 800ddf0:	0800de01 	.word	0x0800de01
 800ddf4:	0800de07 	.word	0x0800de07
 800ddf8:	0800de0d 	.word	0x0800de0d
 800ddfc:	0800de13 	.word	0x0800de13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800de00:	2300      	movs	r3, #0
 800de02:	73fb      	strb	r3, [r7, #15]
    break;
 800de04:	e00b      	b.n	800de1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de06:	2303      	movs	r3, #3
 800de08:	73fb      	strb	r3, [r7, #15]
    break;
 800de0a:	e008      	b.n	800de1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de0c:	2301      	movs	r3, #1
 800de0e:	73fb      	strb	r3, [r7, #15]
    break;
 800de10:	e005      	b.n	800de1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de12:	2303      	movs	r3, #3
 800de14:	73fb      	strb	r3, [r7, #15]
    break;
 800de16:	e002      	b.n	800de1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800de18:	2303      	movs	r3, #3
 800de1a:	73fb      	strb	r3, [r7, #15]
    break;
 800de1c:	bf00      	nop
  }
  return usb_status;
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3714      	adds	r7, #20
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <atoi>:
 800de2c:	220a      	movs	r2, #10
 800de2e:	2100      	movs	r1, #0
 800de30:	f000 b8e2 	b.w	800dff8 <strtol>

0800de34 <__errno>:
 800de34:	4b01      	ldr	r3, [pc, #4]	; (800de3c <__errno+0x8>)
 800de36:	6818      	ldr	r0, [r3, #0]
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	20000100 	.word	0x20000100

0800de40 <__libc_init_array>:
 800de40:	b570      	push	{r4, r5, r6, lr}
 800de42:	4d0d      	ldr	r5, [pc, #52]	; (800de78 <__libc_init_array+0x38>)
 800de44:	4c0d      	ldr	r4, [pc, #52]	; (800de7c <__libc_init_array+0x3c>)
 800de46:	1b64      	subs	r4, r4, r5
 800de48:	10a4      	asrs	r4, r4, #2
 800de4a:	2600      	movs	r6, #0
 800de4c:	42a6      	cmp	r6, r4
 800de4e:	d109      	bne.n	800de64 <__libc_init_array+0x24>
 800de50:	4d0b      	ldr	r5, [pc, #44]	; (800de80 <__libc_init_array+0x40>)
 800de52:	4c0c      	ldr	r4, [pc, #48]	; (800de84 <__libc_init_array+0x44>)
 800de54:	f000 fd1a 	bl	800e88c <_init>
 800de58:	1b64      	subs	r4, r4, r5
 800de5a:	10a4      	asrs	r4, r4, #2
 800de5c:	2600      	movs	r6, #0
 800de5e:	42a6      	cmp	r6, r4
 800de60:	d105      	bne.n	800de6e <__libc_init_array+0x2e>
 800de62:	bd70      	pop	{r4, r5, r6, pc}
 800de64:	f855 3b04 	ldr.w	r3, [r5], #4
 800de68:	4798      	blx	r3
 800de6a:	3601      	adds	r6, #1
 800de6c:	e7ee      	b.n	800de4c <__libc_init_array+0xc>
 800de6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de72:	4798      	blx	r3
 800de74:	3601      	adds	r6, #1
 800de76:	e7f2      	b.n	800de5e <__libc_init_array+0x1e>
 800de78:	0800ec78 	.word	0x0800ec78
 800de7c:	0800ec78 	.word	0x0800ec78
 800de80:	0800ec78 	.word	0x0800ec78
 800de84:	0800ec7c 	.word	0x0800ec7c

0800de88 <memcpy>:
 800de88:	440a      	add	r2, r1
 800de8a:	4291      	cmp	r1, r2
 800de8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800de90:	d100      	bne.n	800de94 <memcpy+0xc>
 800de92:	4770      	bx	lr
 800de94:	b510      	push	{r4, lr}
 800de96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de9e:	4291      	cmp	r1, r2
 800dea0:	d1f9      	bne.n	800de96 <memcpy+0xe>
 800dea2:	bd10      	pop	{r4, pc}

0800dea4 <memset>:
 800dea4:	4402      	add	r2, r0
 800dea6:	4603      	mov	r3, r0
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d100      	bne.n	800deae <memset+0xa>
 800deac:	4770      	bx	lr
 800deae:	f803 1b01 	strb.w	r1, [r3], #1
 800deb2:	e7f9      	b.n	800dea8 <memset+0x4>

0800deb4 <siprintf>:
 800deb4:	b40e      	push	{r1, r2, r3}
 800deb6:	b500      	push	{lr}
 800deb8:	b09c      	sub	sp, #112	; 0x70
 800deba:	ab1d      	add	r3, sp, #116	; 0x74
 800debc:	9002      	str	r0, [sp, #8]
 800debe:	9006      	str	r0, [sp, #24]
 800dec0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dec4:	4809      	ldr	r0, [pc, #36]	; (800deec <siprintf+0x38>)
 800dec6:	9107      	str	r1, [sp, #28]
 800dec8:	9104      	str	r1, [sp, #16]
 800deca:	4909      	ldr	r1, [pc, #36]	; (800def0 <siprintf+0x3c>)
 800decc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ded0:	9105      	str	r1, [sp, #20]
 800ded2:	6800      	ldr	r0, [r0, #0]
 800ded4:	9301      	str	r3, [sp, #4]
 800ded6:	a902      	add	r1, sp, #8
 800ded8:	f000 f8f4 	bl	800e0c4 <_svfiprintf_r>
 800dedc:	9b02      	ldr	r3, [sp, #8]
 800dede:	2200      	movs	r2, #0
 800dee0:	701a      	strb	r2, [r3, #0]
 800dee2:	b01c      	add	sp, #112	; 0x70
 800dee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dee8:	b003      	add	sp, #12
 800deea:	4770      	bx	lr
 800deec:	20000100 	.word	0x20000100
 800def0:	ffff0208 	.word	0xffff0208

0800def4 <_strtol_l.constprop.0>:
 800def4:	2b01      	cmp	r3, #1
 800def6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800defa:	d001      	beq.n	800df00 <_strtol_l.constprop.0+0xc>
 800defc:	2b24      	cmp	r3, #36	; 0x24
 800defe:	d906      	bls.n	800df0e <_strtol_l.constprop.0+0x1a>
 800df00:	f7ff ff98 	bl	800de34 <__errno>
 800df04:	2316      	movs	r3, #22
 800df06:	6003      	str	r3, [r0, #0]
 800df08:	2000      	movs	r0, #0
 800df0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dff4 <_strtol_l.constprop.0+0x100>
 800df12:	460d      	mov	r5, r1
 800df14:	462e      	mov	r6, r5
 800df16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df1a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800df1e:	f017 0708 	ands.w	r7, r7, #8
 800df22:	d1f7      	bne.n	800df14 <_strtol_l.constprop.0+0x20>
 800df24:	2c2d      	cmp	r4, #45	; 0x2d
 800df26:	d132      	bne.n	800df8e <_strtol_l.constprop.0+0x9a>
 800df28:	782c      	ldrb	r4, [r5, #0]
 800df2a:	2701      	movs	r7, #1
 800df2c:	1cb5      	adds	r5, r6, #2
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d05b      	beq.n	800dfea <_strtol_l.constprop.0+0xf6>
 800df32:	2b10      	cmp	r3, #16
 800df34:	d109      	bne.n	800df4a <_strtol_l.constprop.0+0x56>
 800df36:	2c30      	cmp	r4, #48	; 0x30
 800df38:	d107      	bne.n	800df4a <_strtol_l.constprop.0+0x56>
 800df3a:	782c      	ldrb	r4, [r5, #0]
 800df3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800df40:	2c58      	cmp	r4, #88	; 0x58
 800df42:	d14d      	bne.n	800dfe0 <_strtol_l.constprop.0+0xec>
 800df44:	786c      	ldrb	r4, [r5, #1]
 800df46:	2310      	movs	r3, #16
 800df48:	3502      	adds	r5, #2
 800df4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800df4e:	f108 38ff 	add.w	r8, r8, #4294967295
 800df52:	f04f 0c00 	mov.w	ip, #0
 800df56:	fbb8 f9f3 	udiv	r9, r8, r3
 800df5a:	4666      	mov	r6, ip
 800df5c:	fb03 8a19 	mls	sl, r3, r9, r8
 800df60:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800df64:	f1be 0f09 	cmp.w	lr, #9
 800df68:	d816      	bhi.n	800df98 <_strtol_l.constprop.0+0xa4>
 800df6a:	4674      	mov	r4, lr
 800df6c:	42a3      	cmp	r3, r4
 800df6e:	dd24      	ble.n	800dfba <_strtol_l.constprop.0+0xc6>
 800df70:	f1bc 0f00 	cmp.w	ip, #0
 800df74:	db1e      	blt.n	800dfb4 <_strtol_l.constprop.0+0xc0>
 800df76:	45b1      	cmp	r9, r6
 800df78:	d31c      	bcc.n	800dfb4 <_strtol_l.constprop.0+0xc0>
 800df7a:	d101      	bne.n	800df80 <_strtol_l.constprop.0+0x8c>
 800df7c:	45a2      	cmp	sl, r4
 800df7e:	db19      	blt.n	800dfb4 <_strtol_l.constprop.0+0xc0>
 800df80:	fb06 4603 	mla	r6, r6, r3, r4
 800df84:	f04f 0c01 	mov.w	ip, #1
 800df88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df8c:	e7e8      	b.n	800df60 <_strtol_l.constprop.0+0x6c>
 800df8e:	2c2b      	cmp	r4, #43	; 0x2b
 800df90:	bf04      	itt	eq
 800df92:	782c      	ldrbeq	r4, [r5, #0]
 800df94:	1cb5      	addeq	r5, r6, #2
 800df96:	e7ca      	b.n	800df2e <_strtol_l.constprop.0+0x3a>
 800df98:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800df9c:	f1be 0f19 	cmp.w	lr, #25
 800dfa0:	d801      	bhi.n	800dfa6 <_strtol_l.constprop.0+0xb2>
 800dfa2:	3c37      	subs	r4, #55	; 0x37
 800dfa4:	e7e2      	b.n	800df6c <_strtol_l.constprop.0+0x78>
 800dfa6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dfaa:	f1be 0f19 	cmp.w	lr, #25
 800dfae:	d804      	bhi.n	800dfba <_strtol_l.constprop.0+0xc6>
 800dfb0:	3c57      	subs	r4, #87	; 0x57
 800dfb2:	e7db      	b.n	800df6c <_strtol_l.constprop.0+0x78>
 800dfb4:	f04f 3cff 	mov.w	ip, #4294967295
 800dfb8:	e7e6      	b.n	800df88 <_strtol_l.constprop.0+0x94>
 800dfba:	f1bc 0f00 	cmp.w	ip, #0
 800dfbe:	da05      	bge.n	800dfcc <_strtol_l.constprop.0+0xd8>
 800dfc0:	2322      	movs	r3, #34	; 0x22
 800dfc2:	6003      	str	r3, [r0, #0]
 800dfc4:	4646      	mov	r6, r8
 800dfc6:	b942      	cbnz	r2, 800dfda <_strtol_l.constprop.0+0xe6>
 800dfc8:	4630      	mov	r0, r6
 800dfca:	e79e      	b.n	800df0a <_strtol_l.constprop.0+0x16>
 800dfcc:	b107      	cbz	r7, 800dfd0 <_strtol_l.constprop.0+0xdc>
 800dfce:	4276      	negs	r6, r6
 800dfd0:	2a00      	cmp	r2, #0
 800dfd2:	d0f9      	beq.n	800dfc8 <_strtol_l.constprop.0+0xd4>
 800dfd4:	f1bc 0f00 	cmp.w	ip, #0
 800dfd8:	d000      	beq.n	800dfdc <_strtol_l.constprop.0+0xe8>
 800dfda:	1e69      	subs	r1, r5, #1
 800dfdc:	6011      	str	r1, [r2, #0]
 800dfde:	e7f3      	b.n	800dfc8 <_strtol_l.constprop.0+0xd4>
 800dfe0:	2430      	movs	r4, #48	; 0x30
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1b1      	bne.n	800df4a <_strtol_l.constprop.0+0x56>
 800dfe6:	2308      	movs	r3, #8
 800dfe8:	e7af      	b.n	800df4a <_strtol_l.constprop.0+0x56>
 800dfea:	2c30      	cmp	r4, #48	; 0x30
 800dfec:	d0a5      	beq.n	800df3a <_strtol_l.constprop.0+0x46>
 800dfee:	230a      	movs	r3, #10
 800dff0:	e7ab      	b.n	800df4a <_strtol_l.constprop.0+0x56>
 800dff2:	bf00      	nop
 800dff4:	0800eb3d 	.word	0x0800eb3d

0800dff8 <strtol>:
 800dff8:	4613      	mov	r3, r2
 800dffa:	460a      	mov	r2, r1
 800dffc:	4601      	mov	r1, r0
 800dffe:	4802      	ldr	r0, [pc, #8]	; (800e008 <strtol+0x10>)
 800e000:	6800      	ldr	r0, [r0, #0]
 800e002:	f7ff bf77 	b.w	800def4 <_strtol_l.constprop.0>
 800e006:	bf00      	nop
 800e008:	20000100 	.word	0x20000100

0800e00c <__ssputs_r>:
 800e00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e010:	688e      	ldr	r6, [r1, #8]
 800e012:	429e      	cmp	r6, r3
 800e014:	4682      	mov	sl, r0
 800e016:	460c      	mov	r4, r1
 800e018:	4690      	mov	r8, r2
 800e01a:	461f      	mov	r7, r3
 800e01c:	d838      	bhi.n	800e090 <__ssputs_r+0x84>
 800e01e:	898a      	ldrh	r2, [r1, #12]
 800e020:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e024:	d032      	beq.n	800e08c <__ssputs_r+0x80>
 800e026:	6825      	ldr	r5, [r4, #0]
 800e028:	6909      	ldr	r1, [r1, #16]
 800e02a:	eba5 0901 	sub.w	r9, r5, r1
 800e02e:	6965      	ldr	r5, [r4, #20]
 800e030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e034:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e038:	3301      	adds	r3, #1
 800e03a:	444b      	add	r3, r9
 800e03c:	106d      	asrs	r5, r5, #1
 800e03e:	429d      	cmp	r5, r3
 800e040:	bf38      	it	cc
 800e042:	461d      	movcc	r5, r3
 800e044:	0553      	lsls	r3, r2, #21
 800e046:	d531      	bpl.n	800e0ac <__ssputs_r+0xa0>
 800e048:	4629      	mov	r1, r5
 800e04a:	f000 fb55 	bl	800e6f8 <_malloc_r>
 800e04e:	4606      	mov	r6, r0
 800e050:	b950      	cbnz	r0, 800e068 <__ssputs_r+0x5c>
 800e052:	230c      	movs	r3, #12
 800e054:	f8ca 3000 	str.w	r3, [sl]
 800e058:	89a3      	ldrh	r3, [r4, #12]
 800e05a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e05e:	81a3      	strh	r3, [r4, #12]
 800e060:	f04f 30ff 	mov.w	r0, #4294967295
 800e064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e068:	6921      	ldr	r1, [r4, #16]
 800e06a:	464a      	mov	r2, r9
 800e06c:	f7ff ff0c 	bl	800de88 <memcpy>
 800e070:	89a3      	ldrh	r3, [r4, #12]
 800e072:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e07a:	81a3      	strh	r3, [r4, #12]
 800e07c:	6126      	str	r6, [r4, #16]
 800e07e:	6165      	str	r5, [r4, #20]
 800e080:	444e      	add	r6, r9
 800e082:	eba5 0509 	sub.w	r5, r5, r9
 800e086:	6026      	str	r6, [r4, #0]
 800e088:	60a5      	str	r5, [r4, #8]
 800e08a:	463e      	mov	r6, r7
 800e08c:	42be      	cmp	r6, r7
 800e08e:	d900      	bls.n	800e092 <__ssputs_r+0x86>
 800e090:	463e      	mov	r6, r7
 800e092:	6820      	ldr	r0, [r4, #0]
 800e094:	4632      	mov	r2, r6
 800e096:	4641      	mov	r1, r8
 800e098:	f000 faa8 	bl	800e5ec <memmove>
 800e09c:	68a3      	ldr	r3, [r4, #8]
 800e09e:	1b9b      	subs	r3, r3, r6
 800e0a0:	60a3      	str	r3, [r4, #8]
 800e0a2:	6823      	ldr	r3, [r4, #0]
 800e0a4:	4433      	add	r3, r6
 800e0a6:	6023      	str	r3, [r4, #0]
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	e7db      	b.n	800e064 <__ssputs_r+0x58>
 800e0ac:	462a      	mov	r2, r5
 800e0ae:	f000 fb97 	bl	800e7e0 <_realloc_r>
 800e0b2:	4606      	mov	r6, r0
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	d1e1      	bne.n	800e07c <__ssputs_r+0x70>
 800e0b8:	6921      	ldr	r1, [r4, #16]
 800e0ba:	4650      	mov	r0, sl
 800e0bc:	f000 fab0 	bl	800e620 <_free_r>
 800e0c0:	e7c7      	b.n	800e052 <__ssputs_r+0x46>
	...

0800e0c4 <_svfiprintf_r>:
 800e0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c8:	4698      	mov	r8, r3
 800e0ca:	898b      	ldrh	r3, [r1, #12]
 800e0cc:	061b      	lsls	r3, r3, #24
 800e0ce:	b09d      	sub	sp, #116	; 0x74
 800e0d0:	4607      	mov	r7, r0
 800e0d2:	460d      	mov	r5, r1
 800e0d4:	4614      	mov	r4, r2
 800e0d6:	d50e      	bpl.n	800e0f6 <_svfiprintf_r+0x32>
 800e0d8:	690b      	ldr	r3, [r1, #16]
 800e0da:	b963      	cbnz	r3, 800e0f6 <_svfiprintf_r+0x32>
 800e0dc:	2140      	movs	r1, #64	; 0x40
 800e0de:	f000 fb0b 	bl	800e6f8 <_malloc_r>
 800e0e2:	6028      	str	r0, [r5, #0]
 800e0e4:	6128      	str	r0, [r5, #16]
 800e0e6:	b920      	cbnz	r0, 800e0f2 <_svfiprintf_r+0x2e>
 800e0e8:	230c      	movs	r3, #12
 800e0ea:	603b      	str	r3, [r7, #0]
 800e0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f0:	e0d1      	b.n	800e296 <_svfiprintf_r+0x1d2>
 800e0f2:	2340      	movs	r3, #64	; 0x40
 800e0f4:	616b      	str	r3, [r5, #20]
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e0fa:	2320      	movs	r3, #32
 800e0fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e100:	f8cd 800c 	str.w	r8, [sp, #12]
 800e104:	2330      	movs	r3, #48	; 0x30
 800e106:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e2b0 <_svfiprintf_r+0x1ec>
 800e10a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e10e:	f04f 0901 	mov.w	r9, #1
 800e112:	4623      	mov	r3, r4
 800e114:	469a      	mov	sl, r3
 800e116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e11a:	b10a      	cbz	r2, 800e120 <_svfiprintf_r+0x5c>
 800e11c:	2a25      	cmp	r2, #37	; 0x25
 800e11e:	d1f9      	bne.n	800e114 <_svfiprintf_r+0x50>
 800e120:	ebba 0b04 	subs.w	fp, sl, r4
 800e124:	d00b      	beq.n	800e13e <_svfiprintf_r+0x7a>
 800e126:	465b      	mov	r3, fp
 800e128:	4622      	mov	r2, r4
 800e12a:	4629      	mov	r1, r5
 800e12c:	4638      	mov	r0, r7
 800e12e:	f7ff ff6d 	bl	800e00c <__ssputs_r>
 800e132:	3001      	adds	r0, #1
 800e134:	f000 80aa 	beq.w	800e28c <_svfiprintf_r+0x1c8>
 800e138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e13a:	445a      	add	r2, fp
 800e13c:	9209      	str	r2, [sp, #36]	; 0x24
 800e13e:	f89a 3000 	ldrb.w	r3, [sl]
 800e142:	2b00      	cmp	r3, #0
 800e144:	f000 80a2 	beq.w	800e28c <_svfiprintf_r+0x1c8>
 800e148:	2300      	movs	r3, #0
 800e14a:	f04f 32ff 	mov.w	r2, #4294967295
 800e14e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e152:	f10a 0a01 	add.w	sl, sl, #1
 800e156:	9304      	str	r3, [sp, #16]
 800e158:	9307      	str	r3, [sp, #28]
 800e15a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e15e:	931a      	str	r3, [sp, #104]	; 0x68
 800e160:	4654      	mov	r4, sl
 800e162:	2205      	movs	r2, #5
 800e164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e168:	4851      	ldr	r0, [pc, #324]	; (800e2b0 <_svfiprintf_r+0x1ec>)
 800e16a:	f7f2 f851 	bl	8000210 <memchr>
 800e16e:	9a04      	ldr	r2, [sp, #16]
 800e170:	b9d8      	cbnz	r0, 800e1aa <_svfiprintf_r+0xe6>
 800e172:	06d0      	lsls	r0, r2, #27
 800e174:	bf44      	itt	mi
 800e176:	2320      	movmi	r3, #32
 800e178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e17c:	0711      	lsls	r1, r2, #28
 800e17e:	bf44      	itt	mi
 800e180:	232b      	movmi	r3, #43	; 0x2b
 800e182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e186:	f89a 3000 	ldrb.w	r3, [sl]
 800e18a:	2b2a      	cmp	r3, #42	; 0x2a
 800e18c:	d015      	beq.n	800e1ba <_svfiprintf_r+0xf6>
 800e18e:	9a07      	ldr	r2, [sp, #28]
 800e190:	4654      	mov	r4, sl
 800e192:	2000      	movs	r0, #0
 800e194:	f04f 0c0a 	mov.w	ip, #10
 800e198:	4621      	mov	r1, r4
 800e19a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e19e:	3b30      	subs	r3, #48	; 0x30
 800e1a0:	2b09      	cmp	r3, #9
 800e1a2:	d94e      	bls.n	800e242 <_svfiprintf_r+0x17e>
 800e1a4:	b1b0      	cbz	r0, 800e1d4 <_svfiprintf_r+0x110>
 800e1a6:	9207      	str	r2, [sp, #28]
 800e1a8:	e014      	b.n	800e1d4 <_svfiprintf_r+0x110>
 800e1aa:	eba0 0308 	sub.w	r3, r0, r8
 800e1ae:	fa09 f303 	lsl.w	r3, r9, r3
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	9304      	str	r3, [sp, #16]
 800e1b6:	46a2      	mov	sl, r4
 800e1b8:	e7d2      	b.n	800e160 <_svfiprintf_r+0x9c>
 800e1ba:	9b03      	ldr	r3, [sp, #12]
 800e1bc:	1d19      	adds	r1, r3, #4
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	9103      	str	r1, [sp, #12]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	bfbb      	ittet	lt
 800e1c6:	425b      	neglt	r3, r3
 800e1c8:	f042 0202 	orrlt.w	r2, r2, #2
 800e1cc:	9307      	strge	r3, [sp, #28]
 800e1ce:	9307      	strlt	r3, [sp, #28]
 800e1d0:	bfb8      	it	lt
 800e1d2:	9204      	strlt	r2, [sp, #16]
 800e1d4:	7823      	ldrb	r3, [r4, #0]
 800e1d6:	2b2e      	cmp	r3, #46	; 0x2e
 800e1d8:	d10c      	bne.n	800e1f4 <_svfiprintf_r+0x130>
 800e1da:	7863      	ldrb	r3, [r4, #1]
 800e1dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e1de:	d135      	bne.n	800e24c <_svfiprintf_r+0x188>
 800e1e0:	9b03      	ldr	r3, [sp, #12]
 800e1e2:	1d1a      	adds	r2, r3, #4
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	9203      	str	r2, [sp, #12]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	bfb8      	it	lt
 800e1ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1f0:	3402      	adds	r4, #2
 800e1f2:	9305      	str	r3, [sp, #20]
 800e1f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e2c0 <_svfiprintf_r+0x1fc>
 800e1f8:	7821      	ldrb	r1, [r4, #0]
 800e1fa:	2203      	movs	r2, #3
 800e1fc:	4650      	mov	r0, sl
 800e1fe:	f7f2 f807 	bl	8000210 <memchr>
 800e202:	b140      	cbz	r0, 800e216 <_svfiprintf_r+0x152>
 800e204:	2340      	movs	r3, #64	; 0x40
 800e206:	eba0 000a 	sub.w	r0, r0, sl
 800e20a:	fa03 f000 	lsl.w	r0, r3, r0
 800e20e:	9b04      	ldr	r3, [sp, #16]
 800e210:	4303      	orrs	r3, r0
 800e212:	3401      	adds	r4, #1
 800e214:	9304      	str	r3, [sp, #16]
 800e216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e21a:	4826      	ldr	r0, [pc, #152]	; (800e2b4 <_svfiprintf_r+0x1f0>)
 800e21c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e220:	2206      	movs	r2, #6
 800e222:	f7f1 fff5 	bl	8000210 <memchr>
 800e226:	2800      	cmp	r0, #0
 800e228:	d038      	beq.n	800e29c <_svfiprintf_r+0x1d8>
 800e22a:	4b23      	ldr	r3, [pc, #140]	; (800e2b8 <_svfiprintf_r+0x1f4>)
 800e22c:	bb1b      	cbnz	r3, 800e276 <_svfiprintf_r+0x1b2>
 800e22e:	9b03      	ldr	r3, [sp, #12]
 800e230:	3307      	adds	r3, #7
 800e232:	f023 0307 	bic.w	r3, r3, #7
 800e236:	3308      	adds	r3, #8
 800e238:	9303      	str	r3, [sp, #12]
 800e23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e23c:	4433      	add	r3, r6
 800e23e:	9309      	str	r3, [sp, #36]	; 0x24
 800e240:	e767      	b.n	800e112 <_svfiprintf_r+0x4e>
 800e242:	fb0c 3202 	mla	r2, ip, r2, r3
 800e246:	460c      	mov	r4, r1
 800e248:	2001      	movs	r0, #1
 800e24a:	e7a5      	b.n	800e198 <_svfiprintf_r+0xd4>
 800e24c:	2300      	movs	r3, #0
 800e24e:	3401      	adds	r4, #1
 800e250:	9305      	str	r3, [sp, #20]
 800e252:	4619      	mov	r1, r3
 800e254:	f04f 0c0a 	mov.w	ip, #10
 800e258:	4620      	mov	r0, r4
 800e25a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e25e:	3a30      	subs	r2, #48	; 0x30
 800e260:	2a09      	cmp	r2, #9
 800e262:	d903      	bls.n	800e26c <_svfiprintf_r+0x1a8>
 800e264:	2b00      	cmp	r3, #0
 800e266:	d0c5      	beq.n	800e1f4 <_svfiprintf_r+0x130>
 800e268:	9105      	str	r1, [sp, #20]
 800e26a:	e7c3      	b.n	800e1f4 <_svfiprintf_r+0x130>
 800e26c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e270:	4604      	mov	r4, r0
 800e272:	2301      	movs	r3, #1
 800e274:	e7f0      	b.n	800e258 <_svfiprintf_r+0x194>
 800e276:	ab03      	add	r3, sp, #12
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	462a      	mov	r2, r5
 800e27c:	4b0f      	ldr	r3, [pc, #60]	; (800e2bc <_svfiprintf_r+0x1f8>)
 800e27e:	a904      	add	r1, sp, #16
 800e280:	4638      	mov	r0, r7
 800e282:	f3af 8000 	nop.w
 800e286:	1c42      	adds	r2, r0, #1
 800e288:	4606      	mov	r6, r0
 800e28a:	d1d6      	bne.n	800e23a <_svfiprintf_r+0x176>
 800e28c:	89ab      	ldrh	r3, [r5, #12]
 800e28e:	065b      	lsls	r3, r3, #25
 800e290:	f53f af2c 	bmi.w	800e0ec <_svfiprintf_r+0x28>
 800e294:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e296:	b01d      	add	sp, #116	; 0x74
 800e298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e29c:	ab03      	add	r3, sp, #12
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	462a      	mov	r2, r5
 800e2a2:	4b06      	ldr	r3, [pc, #24]	; (800e2bc <_svfiprintf_r+0x1f8>)
 800e2a4:	a904      	add	r1, sp, #16
 800e2a6:	4638      	mov	r0, r7
 800e2a8:	f000 f87a 	bl	800e3a0 <_printf_i>
 800e2ac:	e7eb      	b.n	800e286 <_svfiprintf_r+0x1c2>
 800e2ae:	bf00      	nop
 800e2b0:	0800ec3d 	.word	0x0800ec3d
 800e2b4:	0800ec47 	.word	0x0800ec47
 800e2b8:	00000000 	.word	0x00000000
 800e2bc:	0800e00d 	.word	0x0800e00d
 800e2c0:	0800ec43 	.word	0x0800ec43

0800e2c4 <_printf_common>:
 800e2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c8:	4616      	mov	r6, r2
 800e2ca:	4699      	mov	r9, r3
 800e2cc:	688a      	ldr	r2, [r1, #8]
 800e2ce:	690b      	ldr	r3, [r1, #16]
 800e2d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	bfb8      	it	lt
 800e2d8:	4613      	movlt	r3, r2
 800e2da:	6033      	str	r3, [r6, #0]
 800e2dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2e0:	4607      	mov	r7, r0
 800e2e2:	460c      	mov	r4, r1
 800e2e4:	b10a      	cbz	r2, 800e2ea <_printf_common+0x26>
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	6033      	str	r3, [r6, #0]
 800e2ea:	6823      	ldr	r3, [r4, #0]
 800e2ec:	0699      	lsls	r1, r3, #26
 800e2ee:	bf42      	ittt	mi
 800e2f0:	6833      	ldrmi	r3, [r6, #0]
 800e2f2:	3302      	addmi	r3, #2
 800e2f4:	6033      	strmi	r3, [r6, #0]
 800e2f6:	6825      	ldr	r5, [r4, #0]
 800e2f8:	f015 0506 	ands.w	r5, r5, #6
 800e2fc:	d106      	bne.n	800e30c <_printf_common+0x48>
 800e2fe:	f104 0a19 	add.w	sl, r4, #25
 800e302:	68e3      	ldr	r3, [r4, #12]
 800e304:	6832      	ldr	r2, [r6, #0]
 800e306:	1a9b      	subs	r3, r3, r2
 800e308:	42ab      	cmp	r3, r5
 800e30a:	dc26      	bgt.n	800e35a <_printf_common+0x96>
 800e30c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e310:	1e13      	subs	r3, r2, #0
 800e312:	6822      	ldr	r2, [r4, #0]
 800e314:	bf18      	it	ne
 800e316:	2301      	movne	r3, #1
 800e318:	0692      	lsls	r2, r2, #26
 800e31a:	d42b      	bmi.n	800e374 <_printf_common+0xb0>
 800e31c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e320:	4649      	mov	r1, r9
 800e322:	4638      	mov	r0, r7
 800e324:	47c0      	blx	r8
 800e326:	3001      	adds	r0, #1
 800e328:	d01e      	beq.n	800e368 <_printf_common+0xa4>
 800e32a:	6823      	ldr	r3, [r4, #0]
 800e32c:	68e5      	ldr	r5, [r4, #12]
 800e32e:	6832      	ldr	r2, [r6, #0]
 800e330:	f003 0306 	and.w	r3, r3, #6
 800e334:	2b04      	cmp	r3, #4
 800e336:	bf08      	it	eq
 800e338:	1aad      	subeq	r5, r5, r2
 800e33a:	68a3      	ldr	r3, [r4, #8]
 800e33c:	6922      	ldr	r2, [r4, #16]
 800e33e:	bf0c      	ite	eq
 800e340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e344:	2500      	movne	r5, #0
 800e346:	4293      	cmp	r3, r2
 800e348:	bfc4      	itt	gt
 800e34a:	1a9b      	subgt	r3, r3, r2
 800e34c:	18ed      	addgt	r5, r5, r3
 800e34e:	2600      	movs	r6, #0
 800e350:	341a      	adds	r4, #26
 800e352:	42b5      	cmp	r5, r6
 800e354:	d11a      	bne.n	800e38c <_printf_common+0xc8>
 800e356:	2000      	movs	r0, #0
 800e358:	e008      	b.n	800e36c <_printf_common+0xa8>
 800e35a:	2301      	movs	r3, #1
 800e35c:	4652      	mov	r2, sl
 800e35e:	4649      	mov	r1, r9
 800e360:	4638      	mov	r0, r7
 800e362:	47c0      	blx	r8
 800e364:	3001      	adds	r0, #1
 800e366:	d103      	bne.n	800e370 <_printf_common+0xac>
 800e368:	f04f 30ff 	mov.w	r0, #4294967295
 800e36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e370:	3501      	adds	r5, #1
 800e372:	e7c6      	b.n	800e302 <_printf_common+0x3e>
 800e374:	18e1      	adds	r1, r4, r3
 800e376:	1c5a      	adds	r2, r3, #1
 800e378:	2030      	movs	r0, #48	; 0x30
 800e37a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e37e:	4422      	add	r2, r4
 800e380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e388:	3302      	adds	r3, #2
 800e38a:	e7c7      	b.n	800e31c <_printf_common+0x58>
 800e38c:	2301      	movs	r3, #1
 800e38e:	4622      	mov	r2, r4
 800e390:	4649      	mov	r1, r9
 800e392:	4638      	mov	r0, r7
 800e394:	47c0      	blx	r8
 800e396:	3001      	adds	r0, #1
 800e398:	d0e6      	beq.n	800e368 <_printf_common+0xa4>
 800e39a:	3601      	adds	r6, #1
 800e39c:	e7d9      	b.n	800e352 <_printf_common+0x8e>
	...

0800e3a0 <_printf_i>:
 800e3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a4:	7e0f      	ldrb	r7, [r1, #24]
 800e3a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e3a8:	2f78      	cmp	r7, #120	; 0x78
 800e3aa:	4691      	mov	r9, r2
 800e3ac:	4680      	mov	r8, r0
 800e3ae:	460c      	mov	r4, r1
 800e3b0:	469a      	mov	sl, r3
 800e3b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e3b6:	d807      	bhi.n	800e3c8 <_printf_i+0x28>
 800e3b8:	2f62      	cmp	r7, #98	; 0x62
 800e3ba:	d80a      	bhi.n	800e3d2 <_printf_i+0x32>
 800e3bc:	2f00      	cmp	r7, #0
 800e3be:	f000 80d8 	beq.w	800e572 <_printf_i+0x1d2>
 800e3c2:	2f58      	cmp	r7, #88	; 0x58
 800e3c4:	f000 80a3 	beq.w	800e50e <_printf_i+0x16e>
 800e3c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3d0:	e03a      	b.n	800e448 <_printf_i+0xa8>
 800e3d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3d6:	2b15      	cmp	r3, #21
 800e3d8:	d8f6      	bhi.n	800e3c8 <_printf_i+0x28>
 800e3da:	a101      	add	r1, pc, #4	; (adr r1, 800e3e0 <_printf_i+0x40>)
 800e3dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3e0:	0800e439 	.word	0x0800e439
 800e3e4:	0800e44d 	.word	0x0800e44d
 800e3e8:	0800e3c9 	.word	0x0800e3c9
 800e3ec:	0800e3c9 	.word	0x0800e3c9
 800e3f0:	0800e3c9 	.word	0x0800e3c9
 800e3f4:	0800e3c9 	.word	0x0800e3c9
 800e3f8:	0800e44d 	.word	0x0800e44d
 800e3fc:	0800e3c9 	.word	0x0800e3c9
 800e400:	0800e3c9 	.word	0x0800e3c9
 800e404:	0800e3c9 	.word	0x0800e3c9
 800e408:	0800e3c9 	.word	0x0800e3c9
 800e40c:	0800e559 	.word	0x0800e559
 800e410:	0800e47d 	.word	0x0800e47d
 800e414:	0800e53b 	.word	0x0800e53b
 800e418:	0800e3c9 	.word	0x0800e3c9
 800e41c:	0800e3c9 	.word	0x0800e3c9
 800e420:	0800e57b 	.word	0x0800e57b
 800e424:	0800e3c9 	.word	0x0800e3c9
 800e428:	0800e47d 	.word	0x0800e47d
 800e42c:	0800e3c9 	.word	0x0800e3c9
 800e430:	0800e3c9 	.word	0x0800e3c9
 800e434:	0800e543 	.word	0x0800e543
 800e438:	682b      	ldr	r3, [r5, #0]
 800e43a:	1d1a      	adds	r2, r3, #4
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	602a      	str	r2, [r5, #0]
 800e440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e448:	2301      	movs	r3, #1
 800e44a:	e0a3      	b.n	800e594 <_printf_i+0x1f4>
 800e44c:	6820      	ldr	r0, [r4, #0]
 800e44e:	6829      	ldr	r1, [r5, #0]
 800e450:	0606      	lsls	r6, r0, #24
 800e452:	f101 0304 	add.w	r3, r1, #4
 800e456:	d50a      	bpl.n	800e46e <_printf_i+0xce>
 800e458:	680e      	ldr	r6, [r1, #0]
 800e45a:	602b      	str	r3, [r5, #0]
 800e45c:	2e00      	cmp	r6, #0
 800e45e:	da03      	bge.n	800e468 <_printf_i+0xc8>
 800e460:	232d      	movs	r3, #45	; 0x2d
 800e462:	4276      	negs	r6, r6
 800e464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e468:	485e      	ldr	r0, [pc, #376]	; (800e5e4 <_printf_i+0x244>)
 800e46a:	230a      	movs	r3, #10
 800e46c:	e019      	b.n	800e4a2 <_printf_i+0x102>
 800e46e:	680e      	ldr	r6, [r1, #0]
 800e470:	602b      	str	r3, [r5, #0]
 800e472:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e476:	bf18      	it	ne
 800e478:	b236      	sxthne	r6, r6
 800e47a:	e7ef      	b.n	800e45c <_printf_i+0xbc>
 800e47c:	682b      	ldr	r3, [r5, #0]
 800e47e:	6820      	ldr	r0, [r4, #0]
 800e480:	1d19      	adds	r1, r3, #4
 800e482:	6029      	str	r1, [r5, #0]
 800e484:	0601      	lsls	r1, r0, #24
 800e486:	d501      	bpl.n	800e48c <_printf_i+0xec>
 800e488:	681e      	ldr	r6, [r3, #0]
 800e48a:	e002      	b.n	800e492 <_printf_i+0xf2>
 800e48c:	0646      	lsls	r6, r0, #25
 800e48e:	d5fb      	bpl.n	800e488 <_printf_i+0xe8>
 800e490:	881e      	ldrh	r6, [r3, #0]
 800e492:	4854      	ldr	r0, [pc, #336]	; (800e5e4 <_printf_i+0x244>)
 800e494:	2f6f      	cmp	r7, #111	; 0x6f
 800e496:	bf0c      	ite	eq
 800e498:	2308      	moveq	r3, #8
 800e49a:	230a      	movne	r3, #10
 800e49c:	2100      	movs	r1, #0
 800e49e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e4a2:	6865      	ldr	r5, [r4, #4]
 800e4a4:	60a5      	str	r5, [r4, #8]
 800e4a6:	2d00      	cmp	r5, #0
 800e4a8:	bfa2      	ittt	ge
 800e4aa:	6821      	ldrge	r1, [r4, #0]
 800e4ac:	f021 0104 	bicge.w	r1, r1, #4
 800e4b0:	6021      	strge	r1, [r4, #0]
 800e4b2:	b90e      	cbnz	r6, 800e4b8 <_printf_i+0x118>
 800e4b4:	2d00      	cmp	r5, #0
 800e4b6:	d04d      	beq.n	800e554 <_printf_i+0x1b4>
 800e4b8:	4615      	mov	r5, r2
 800e4ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800e4be:	fb03 6711 	mls	r7, r3, r1, r6
 800e4c2:	5dc7      	ldrb	r7, [r0, r7]
 800e4c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4c8:	4637      	mov	r7, r6
 800e4ca:	42bb      	cmp	r3, r7
 800e4cc:	460e      	mov	r6, r1
 800e4ce:	d9f4      	bls.n	800e4ba <_printf_i+0x11a>
 800e4d0:	2b08      	cmp	r3, #8
 800e4d2:	d10b      	bne.n	800e4ec <_printf_i+0x14c>
 800e4d4:	6823      	ldr	r3, [r4, #0]
 800e4d6:	07de      	lsls	r6, r3, #31
 800e4d8:	d508      	bpl.n	800e4ec <_printf_i+0x14c>
 800e4da:	6923      	ldr	r3, [r4, #16]
 800e4dc:	6861      	ldr	r1, [r4, #4]
 800e4de:	4299      	cmp	r1, r3
 800e4e0:	bfde      	ittt	le
 800e4e2:	2330      	movle	r3, #48	; 0x30
 800e4e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e4e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e4ec:	1b52      	subs	r2, r2, r5
 800e4ee:	6122      	str	r2, [r4, #16]
 800e4f0:	f8cd a000 	str.w	sl, [sp]
 800e4f4:	464b      	mov	r3, r9
 800e4f6:	aa03      	add	r2, sp, #12
 800e4f8:	4621      	mov	r1, r4
 800e4fa:	4640      	mov	r0, r8
 800e4fc:	f7ff fee2 	bl	800e2c4 <_printf_common>
 800e500:	3001      	adds	r0, #1
 800e502:	d14c      	bne.n	800e59e <_printf_i+0x1fe>
 800e504:	f04f 30ff 	mov.w	r0, #4294967295
 800e508:	b004      	add	sp, #16
 800e50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e50e:	4835      	ldr	r0, [pc, #212]	; (800e5e4 <_printf_i+0x244>)
 800e510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e514:	6829      	ldr	r1, [r5, #0]
 800e516:	6823      	ldr	r3, [r4, #0]
 800e518:	f851 6b04 	ldr.w	r6, [r1], #4
 800e51c:	6029      	str	r1, [r5, #0]
 800e51e:	061d      	lsls	r5, r3, #24
 800e520:	d514      	bpl.n	800e54c <_printf_i+0x1ac>
 800e522:	07df      	lsls	r7, r3, #31
 800e524:	bf44      	itt	mi
 800e526:	f043 0320 	orrmi.w	r3, r3, #32
 800e52a:	6023      	strmi	r3, [r4, #0]
 800e52c:	b91e      	cbnz	r6, 800e536 <_printf_i+0x196>
 800e52e:	6823      	ldr	r3, [r4, #0]
 800e530:	f023 0320 	bic.w	r3, r3, #32
 800e534:	6023      	str	r3, [r4, #0]
 800e536:	2310      	movs	r3, #16
 800e538:	e7b0      	b.n	800e49c <_printf_i+0xfc>
 800e53a:	6823      	ldr	r3, [r4, #0]
 800e53c:	f043 0320 	orr.w	r3, r3, #32
 800e540:	6023      	str	r3, [r4, #0]
 800e542:	2378      	movs	r3, #120	; 0x78
 800e544:	4828      	ldr	r0, [pc, #160]	; (800e5e8 <_printf_i+0x248>)
 800e546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e54a:	e7e3      	b.n	800e514 <_printf_i+0x174>
 800e54c:	0659      	lsls	r1, r3, #25
 800e54e:	bf48      	it	mi
 800e550:	b2b6      	uxthmi	r6, r6
 800e552:	e7e6      	b.n	800e522 <_printf_i+0x182>
 800e554:	4615      	mov	r5, r2
 800e556:	e7bb      	b.n	800e4d0 <_printf_i+0x130>
 800e558:	682b      	ldr	r3, [r5, #0]
 800e55a:	6826      	ldr	r6, [r4, #0]
 800e55c:	6961      	ldr	r1, [r4, #20]
 800e55e:	1d18      	adds	r0, r3, #4
 800e560:	6028      	str	r0, [r5, #0]
 800e562:	0635      	lsls	r5, r6, #24
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	d501      	bpl.n	800e56c <_printf_i+0x1cc>
 800e568:	6019      	str	r1, [r3, #0]
 800e56a:	e002      	b.n	800e572 <_printf_i+0x1d2>
 800e56c:	0670      	lsls	r0, r6, #25
 800e56e:	d5fb      	bpl.n	800e568 <_printf_i+0x1c8>
 800e570:	8019      	strh	r1, [r3, #0]
 800e572:	2300      	movs	r3, #0
 800e574:	6123      	str	r3, [r4, #16]
 800e576:	4615      	mov	r5, r2
 800e578:	e7ba      	b.n	800e4f0 <_printf_i+0x150>
 800e57a:	682b      	ldr	r3, [r5, #0]
 800e57c:	1d1a      	adds	r2, r3, #4
 800e57e:	602a      	str	r2, [r5, #0]
 800e580:	681d      	ldr	r5, [r3, #0]
 800e582:	6862      	ldr	r2, [r4, #4]
 800e584:	2100      	movs	r1, #0
 800e586:	4628      	mov	r0, r5
 800e588:	f7f1 fe42 	bl	8000210 <memchr>
 800e58c:	b108      	cbz	r0, 800e592 <_printf_i+0x1f2>
 800e58e:	1b40      	subs	r0, r0, r5
 800e590:	6060      	str	r0, [r4, #4]
 800e592:	6863      	ldr	r3, [r4, #4]
 800e594:	6123      	str	r3, [r4, #16]
 800e596:	2300      	movs	r3, #0
 800e598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e59c:	e7a8      	b.n	800e4f0 <_printf_i+0x150>
 800e59e:	6923      	ldr	r3, [r4, #16]
 800e5a0:	462a      	mov	r2, r5
 800e5a2:	4649      	mov	r1, r9
 800e5a4:	4640      	mov	r0, r8
 800e5a6:	47d0      	blx	sl
 800e5a8:	3001      	adds	r0, #1
 800e5aa:	d0ab      	beq.n	800e504 <_printf_i+0x164>
 800e5ac:	6823      	ldr	r3, [r4, #0]
 800e5ae:	079b      	lsls	r3, r3, #30
 800e5b0:	d413      	bmi.n	800e5da <_printf_i+0x23a>
 800e5b2:	68e0      	ldr	r0, [r4, #12]
 800e5b4:	9b03      	ldr	r3, [sp, #12]
 800e5b6:	4298      	cmp	r0, r3
 800e5b8:	bfb8      	it	lt
 800e5ba:	4618      	movlt	r0, r3
 800e5bc:	e7a4      	b.n	800e508 <_printf_i+0x168>
 800e5be:	2301      	movs	r3, #1
 800e5c0:	4632      	mov	r2, r6
 800e5c2:	4649      	mov	r1, r9
 800e5c4:	4640      	mov	r0, r8
 800e5c6:	47d0      	blx	sl
 800e5c8:	3001      	adds	r0, #1
 800e5ca:	d09b      	beq.n	800e504 <_printf_i+0x164>
 800e5cc:	3501      	adds	r5, #1
 800e5ce:	68e3      	ldr	r3, [r4, #12]
 800e5d0:	9903      	ldr	r1, [sp, #12]
 800e5d2:	1a5b      	subs	r3, r3, r1
 800e5d4:	42ab      	cmp	r3, r5
 800e5d6:	dcf2      	bgt.n	800e5be <_printf_i+0x21e>
 800e5d8:	e7eb      	b.n	800e5b2 <_printf_i+0x212>
 800e5da:	2500      	movs	r5, #0
 800e5dc:	f104 0619 	add.w	r6, r4, #25
 800e5e0:	e7f5      	b.n	800e5ce <_printf_i+0x22e>
 800e5e2:	bf00      	nop
 800e5e4:	0800ec4e 	.word	0x0800ec4e
 800e5e8:	0800ec5f 	.word	0x0800ec5f

0800e5ec <memmove>:
 800e5ec:	4288      	cmp	r0, r1
 800e5ee:	b510      	push	{r4, lr}
 800e5f0:	eb01 0402 	add.w	r4, r1, r2
 800e5f4:	d902      	bls.n	800e5fc <memmove+0x10>
 800e5f6:	4284      	cmp	r4, r0
 800e5f8:	4623      	mov	r3, r4
 800e5fa:	d807      	bhi.n	800e60c <memmove+0x20>
 800e5fc:	1e43      	subs	r3, r0, #1
 800e5fe:	42a1      	cmp	r1, r4
 800e600:	d008      	beq.n	800e614 <memmove+0x28>
 800e602:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e60a:	e7f8      	b.n	800e5fe <memmove+0x12>
 800e60c:	4402      	add	r2, r0
 800e60e:	4601      	mov	r1, r0
 800e610:	428a      	cmp	r2, r1
 800e612:	d100      	bne.n	800e616 <memmove+0x2a>
 800e614:	bd10      	pop	{r4, pc}
 800e616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e61a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e61e:	e7f7      	b.n	800e610 <memmove+0x24>

0800e620 <_free_r>:
 800e620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e622:	2900      	cmp	r1, #0
 800e624:	d044      	beq.n	800e6b0 <_free_r+0x90>
 800e626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e62a:	9001      	str	r0, [sp, #4]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f1a1 0404 	sub.w	r4, r1, #4
 800e632:	bfb8      	it	lt
 800e634:	18e4      	addlt	r4, r4, r3
 800e636:	f000 f913 	bl	800e860 <__malloc_lock>
 800e63a:	4a1e      	ldr	r2, [pc, #120]	; (800e6b4 <_free_r+0x94>)
 800e63c:	9801      	ldr	r0, [sp, #4]
 800e63e:	6813      	ldr	r3, [r2, #0]
 800e640:	b933      	cbnz	r3, 800e650 <_free_r+0x30>
 800e642:	6063      	str	r3, [r4, #4]
 800e644:	6014      	str	r4, [r2, #0]
 800e646:	b003      	add	sp, #12
 800e648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e64c:	f000 b90e 	b.w	800e86c <__malloc_unlock>
 800e650:	42a3      	cmp	r3, r4
 800e652:	d908      	bls.n	800e666 <_free_r+0x46>
 800e654:	6825      	ldr	r5, [r4, #0]
 800e656:	1961      	adds	r1, r4, r5
 800e658:	428b      	cmp	r3, r1
 800e65a:	bf01      	itttt	eq
 800e65c:	6819      	ldreq	r1, [r3, #0]
 800e65e:	685b      	ldreq	r3, [r3, #4]
 800e660:	1949      	addeq	r1, r1, r5
 800e662:	6021      	streq	r1, [r4, #0]
 800e664:	e7ed      	b.n	800e642 <_free_r+0x22>
 800e666:	461a      	mov	r2, r3
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	b10b      	cbz	r3, 800e670 <_free_r+0x50>
 800e66c:	42a3      	cmp	r3, r4
 800e66e:	d9fa      	bls.n	800e666 <_free_r+0x46>
 800e670:	6811      	ldr	r1, [r2, #0]
 800e672:	1855      	adds	r5, r2, r1
 800e674:	42a5      	cmp	r5, r4
 800e676:	d10b      	bne.n	800e690 <_free_r+0x70>
 800e678:	6824      	ldr	r4, [r4, #0]
 800e67a:	4421      	add	r1, r4
 800e67c:	1854      	adds	r4, r2, r1
 800e67e:	42a3      	cmp	r3, r4
 800e680:	6011      	str	r1, [r2, #0]
 800e682:	d1e0      	bne.n	800e646 <_free_r+0x26>
 800e684:	681c      	ldr	r4, [r3, #0]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	6053      	str	r3, [r2, #4]
 800e68a:	4421      	add	r1, r4
 800e68c:	6011      	str	r1, [r2, #0]
 800e68e:	e7da      	b.n	800e646 <_free_r+0x26>
 800e690:	d902      	bls.n	800e698 <_free_r+0x78>
 800e692:	230c      	movs	r3, #12
 800e694:	6003      	str	r3, [r0, #0]
 800e696:	e7d6      	b.n	800e646 <_free_r+0x26>
 800e698:	6825      	ldr	r5, [r4, #0]
 800e69a:	1961      	adds	r1, r4, r5
 800e69c:	428b      	cmp	r3, r1
 800e69e:	bf04      	itt	eq
 800e6a0:	6819      	ldreq	r1, [r3, #0]
 800e6a2:	685b      	ldreq	r3, [r3, #4]
 800e6a4:	6063      	str	r3, [r4, #4]
 800e6a6:	bf04      	itt	eq
 800e6a8:	1949      	addeq	r1, r1, r5
 800e6aa:	6021      	streq	r1, [r4, #0]
 800e6ac:	6054      	str	r4, [r2, #4]
 800e6ae:	e7ca      	b.n	800e646 <_free_r+0x26>
 800e6b0:	b003      	add	sp, #12
 800e6b2:	bd30      	pop	{r4, r5, pc}
 800e6b4:	20006130 	.word	0x20006130

0800e6b8 <sbrk_aligned>:
 800e6b8:	b570      	push	{r4, r5, r6, lr}
 800e6ba:	4e0e      	ldr	r6, [pc, #56]	; (800e6f4 <sbrk_aligned+0x3c>)
 800e6bc:	460c      	mov	r4, r1
 800e6be:	6831      	ldr	r1, [r6, #0]
 800e6c0:	4605      	mov	r5, r0
 800e6c2:	b911      	cbnz	r1, 800e6ca <sbrk_aligned+0x12>
 800e6c4:	f000 f8bc 	bl	800e840 <_sbrk_r>
 800e6c8:	6030      	str	r0, [r6, #0]
 800e6ca:	4621      	mov	r1, r4
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	f000 f8b7 	bl	800e840 <_sbrk_r>
 800e6d2:	1c43      	adds	r3, r0, #1
 800e6d4:	d00a      	beq.n	800e6ec <sbrk_aligned+0x34>
 800e6d6:	1cc4      	adds	r4, r0, #3
 800e6d8:	f024 0403 	bic.w	r4, r4, #3
 800e6dc:	42a0      	cmp	r0, r4
 800e6de:	d007      	beq.n	800e6f0 <sbrk_aligned+0x38>
 800e6e0:	1a21      	subs	r1, r4, r0
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	f000 f8ac 	bl	800e840 <_sbrk_r>
 800e6e8:	3001      	adds	r0, #1
 800e6ea:	d101      	bne.n	800e6f0 <sbrk_aligned+0x38>
 800e6ec:	f04f 34ff 	mov.w	r4, #4294967295
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	bd70      	pop	{r4, r5, r6, pc}
 800e6f4:	20006134 	.word	0x20006134

0800e6f8 <_malloc_r>:
 800e6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fc:	1ccd      	adds	r5, r1, #3
 800e6fe:	f025 0503 	bic.w	r5, r5, #3
 800e702:	3508      	adds	r5, #8
 800e704:	2d0c      	cmp	r5, #12
 800e706:	bf38      	it	cc
 800e708:	250c      	movcc	r5, #12
 800e70a:	2d00      	cmp	r5, #0
 800e70c:	4607      	mov	r7, r0
 800e70e:	db01      	blt.n	800e714 <_malloc_r+0x1c>
 800e710:	42a9      	cmp	r1, r5
 800e712:	d905      	bls.n	800e720 <_malloc_r+0x28>
 800e714:	230c      	movs	r3, #12
 800e716:	603b      	str	r3, [r7, #0]
 800e718:	2600      	movs	r6, #0
 800e71a:	4630      	mov	r0, r6
 800e71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e720:	4e2e      	ldr	r6, [pc, #184]	; (800e7dc <_malloc_r+0xe4>)
 800e722:	f000 f89d 	bl	800e860 <__malloc_lock>
 800e726:	6833      	ldr	r3, [r6, #0]
 800e728:	461c      	mov	r4, r3
 800e72a:	bb34      	cbnz	r4, 800e77a <_malloc_r+0x82>
 800e72c:	4629      	mov	r1, r5
 800e72e:	4638      	mov	r0, r7
 800e730:	f7ff ffc2 	bl	800e6b8 <sbrk_aligned>
 800e734:	1c43      	adds	r3, r0, #1
 800e736:	4604      	mov	r4, r0
 800e738:	d14d      	bne.n	800e7d6 <_malloc_r+0xde>
 800e73a:	6834      	ldr	r4, [r6, #0]
 800e73c:	4626      	mov	r6, r4
 800e73e:	2e00      	cmp	r6, #0
 800e740:	d140      	bne.n	800e7c4 <_malloc_r+0xcc>
 800e742:	6823      	ldr	r3, [r4, #0]
 800e744:	4631      	mov	r1, r6
 800e746:	4638      	mov	r0, r7
 800e748:	eb04 0803 	add.w	r8, r4, r3
 800e74c:	f000 f878 	bl	800e840 <_sbrk_r>
 800e750:	4580      	cmp	r8, r0
 800e752:	d13a      	bne.n	800e7ca <_malloc_r+0xd2>
 800e754:	6821      	ldr	r1, [r4, #0]
 800e756:	3503      	adds	r5, #3
 800e758:	1a6d      	subs	r5, r5, r1
 800e75a:	f025 0503 	bic.w	r5, r5, #3
 800e75e:	3508      	adds	r5, #8
 800e760:	2d0c      	cmp	r5, #12
 800e762:	bf38      	it	cc
 800e764:	250c      	movcc	r5, #12
 800e766:	4629      	mov	r1, r5
 800e768:	4638      	mov	r0, r7
 800e76a:	f7ff ffa5 	bl	800e6b8 <sbrk_aligned>
 800e76e:	3001      	adds	r0, #1
 800e770:	d02b      	beq.n	800e7ca <_malloc_r+0xd2>
 800e772:	6823      	ldr	r3, [r4, #0]
 800e774:	442b      	add	r3, r5
 800e776:	6023      	str	r3, [r4, #0]
 800e778:	e00e      	b.n	800e798 <_malloc_r+0xa0>
 800e77a:	6822      	ldr	r2, [r4, #0]
 800e77c:	1b52      	subs	r2, r2, r5
 800e77e:	d41e      	bmi.n	800e7be <_malloc_r+0xc6>
 800e780:	2a0b      	cmp	r2, #11
 800e782:	d916      	bls.n	800e7b2 <_malloc_r+0xba>
 800e784:	1961      	adds	r1, r4, r5
 800e786:	42a3      	cmp	r3, r4
 800e788:	6025      	str	r5, [r4, #0]
 800e78a:	bf18      	it	ne
 800e78c:	6059      	strne	r1, [r3, #4]
 800e78e:	6863      	ldr	r3, [r4, #4]
 800e790:	bf08      	it	eq
 800e792:	6031      	streq	r1, [r6, #0]
 800e794:	5162      	str	r2, [r4, r5]
 800e796:	604b      	str	r3, [r1, #4]
 800e798:	4638      	mov	r0, r7
 800e79a:	f104 060b 	add.w	r6, r4, #11
 800e79e:	f000 f865 	bl	800e86c <__malloc_unlock>
 800e7a2:	f026 0607 	bic.w	r6, r6, #7
 800e7a6:	1d23      	adds	r3, r4, #4
 800e7a8:	1af2      	subs	r2, r6, r3
 800e7aa:	d0b6      	beq.n	800e71a <_malloc_r+0x22>
 800e7ac:	1b9b      	subs	r3, r3, r6
 800e7ae:	50a3      	str	r3, [r4, r2]
 800e7b0:	e7b3      	b.n	800e71a <_malloc_r+0x22>
 800e7b2:	6862      	ldr	r2, [r4, #4]
 800e7b4:	42a3      	cmp	r3, r4
 800e7b6:	bf0c      	ite	eq
 800e7b8:	6032      	streq	r2, [r6, #0]
 800e7ba:	605a      	strne	r2, [r3, #4]
 800e7bc:	e7ec      	b.n	800e798 <_malloc_r+0xa0>
 800e7be:	4623      	mov	r3, r4
 800e7c0:	6864      	ldr	r4, [r4, #4]
 800e7c2:	e7b2      	b.n	800e72a <_malloc_r+0x32>
 800e7c4:	4634      	mov	r4, r6
 800e7c6:	6876      	ldr	r6, [r6, #4]
 800e7c8:	e7b9      	b.n	800e73e <_malloc_r+0x46>
 800e7ca:	230c      	movs	r3, #12
 800e7cc:	603b      	str	r3, [r7, #0]
 800e7ce:	4638      	mov	r0, r7
 800e7d0:	f000 f84c 	bl	800e86c <__malloc_unlock>
 800e7d4:	e7a1      	b.n	800e71a <_malloc_r+0x22>
 800e7d6:	6025      	str	r5, [r4, #0]
 800e7d8:	e7de      	b.n	800e798 <_malloc_r+0xa0>
 800e7da:	bf00      	nop
 800e7dc:	20006130 	.word	0x20006130

0800e7e0 <_realloc_r>:
 800e7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e4:	4680      	mov	r8, r0
 800e7e6:	4614      	mov	r4, r2
 800e7e8:	460e      	mov	r6, r1
 800e7ea:	b921      	cbnz	r1, 800e7f6 <_realloc_r+0x16>
 800e7ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f0:	4611      	mov	r1, r2
 800e7f2:	f7ff bf81 	b.w	800e6f8 <_malloc_r>
 800e7f6:	b92a      	cbnz	r2, 800e804 <_realloc_r+0x24>
 800e7f8:	f7ff ff12 	bl	800e620 <_free_r>
 800e7fc:	4625      	mov	r5, r4
 800e7fe:	4628      	mov	r0, r5
 800e800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e804:	f000 f838 	bl	800e878 <_malloc_usable_size_r>
 800e808:	4284      	cmp	r4, r0
 800e80a:	4607      	mov	r7, r0
 800e80c:	d802      	bhi.n	800e814 <_realloc_r+0x34>
 800e80e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e812:	d812      	bhi.n	800e83a <_realloc_r+0x5a>
 800e814:	4621      	mov	r1, r4
 800e816:	4640      	mov	r0, r8
 800e818:	f7ff ff6e 	bl	800e6f8 <_malloc_r>
 800e81c:	4605      	mov	r5, r0
 800e81e:	2800      	cmp	r0, #0
 800e820:	d0ed      	beq.n	800e7fe <_realloc_r+0x1e>
 800e822:	42bc      	cmp	r4, r7
 800e824:	4622      	mov	r2, r4
 800e826:	4631      	mov	r1, r6
 800e828:	bf28      	it	cs
 800e82a:	463a      	movcs	r2, r7
 800e82c:	f7ff fb2c 	bl	800de88 <memcpy>
 800e830:	4631      	mov	r1, r6
 800e832:	4640      	mov	r0, r8
 800e834:	f7ff fef4 	bl	800e620 <_free_r>
 800e838:	e7e1      	b.n	800e7fe <_realloc_r+0x1e>
 800e83a:	4635      	mov	r5, r6
 800e83c:	e7df      	b.n	800e7fe <_realloc_r+0x1e>
	...

0800e840 <_sbrk_r>:
 800e840:	b538      	push	{r3, r4, r5, lr}
 800e842:	4d06      	ldr	r5, [pc, #24]	; (800e85c <_sbrk_r+0x1c>)
 800e844:	2300      	movs	r3, #0
 800e846:	4604      	mov	r4, r0
 800e848:	4608      	mov	r0, r1
 800e84a:	602b      	str	r3, [r5, #0]
 800e84c:	f7f3 fbe6 	bl	800201c <_sbrk>
 800e850:	1c43      	adds	r3, r0, #1
 800e852:	d102      	bne.n	800e85a <_sbrk_r+0x1a>
 800e854:	682b      	ldr	r3, [r5, #0]
 800e856:	b103      	cbz	r3, 800e85a <_sbrk_r+0x1a>
 800e858:	6023      	str	r3, [r4, #0]
 800e85a:	bd38      	pop	{r3, r4, r5, pc}
 800e85c:	20006138 	.word	0x20006138

0800e860 <__malloc_lock>:
 800e860:	4801      	ldr	r0, [pc, #4]	; (800e868 <__malloc_lock+0x8>)
 800e862:	f000 b811 	b.w	800e888 <__retarget_lock_acquire_recursive>
 800e866:	bf00      	nop
 800e868:	2000613c 	.word	0x2000613c

0800e86c <__malloc_unlock>:
 800e86c:	4801      	ldr	r0, [pc, #4]	; (800e874 <__malloc_unlock+0x8>)
 800e86e:	f000 b80c 	b.w	800e88a <__retarget_lock_release_recursive>
 800e872:	bf00      	nop
 800e874:	2000613c 	.word	0x2000613c

0800e878 <_malloc_usable_size_r>:
 800e878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e87c:	1f18      	subs	r0, r3, #4
 800e87e:	2b00      	cmp	r3, #0
 800e880:	bfbc      	itt	lt
 800e882:	580b      	ldrlt	r3, [r1, r0]
 800e884:	18c0      	addlt	r0, r0, r3
 800e886:	4770      	bx	lr

0800e888 <__retarget_lock_acquire_recursive>:
 800e888:	4770      	bx	lr

0800e88a <__retarget_lock_release_recursive>:
 800e88a:	4770      	bx	lr

0800e88c <_init>:
 800e88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e88e:	bf00      	nop
 800e890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e892:	bc08      	pop	{r3}
 800e894:	469e      	mov	lr, r3
 800e896:	4770      	bx	lr

0800e898 <_fini>:
 800e898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e89a:	bf00      	nop
 800e89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e89e:	bc08      	pop	{r3}
 800e8a0:	469e      	mov	lr, r3
 800e8a2:	4770      	bx	lr
